{
  "address": "0x1e6444BF4efc10e916c08410E33E5B753f0A1815",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeliveryAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferTermsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ProductionComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RedeemStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum SingleEditionMintable.WhoCanMint",
          "name": "minters",
          "type": "uint8"
        }
      ],
      "name": "WhoCanMintChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptDelivery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptOfferTerms",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getConditionReport",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "artist",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "royaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "splitBPS",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "conditionReportUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "conditionReportHash",
          "type": "bytes32"
        }
      ],
      "name": "productionComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rejectOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SingleEditionMintable.WhoCanMint",
          "name": "minters",
          "type": "uint8"
        }
      ],
      "name": "setAllowedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "minter",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "allowed",
          "type": "bool[]"
        }
      ],
      "name": "setApprovedMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "minter",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "allowed",
          "type": "bool[]"
        }
      ],
      "name": "setApprovedVIPMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setMembersSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vipSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "membersSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generalSalePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setVIPSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        }
      ],
      "name": "updateEditionURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9fa1bc8d55ad04690c03e065b39695062d443b55a009959ceec72be6695a1cb",
  "receipt": {
    "to": null,
    "from": "0xaD1fcD83DE77518d3D1b769F22B0A169eD55A919",
    "contractAddress": "0x1e6444BF4efc10e916c08410E33E5B753f0A1815",
    "transactionIndex": 4,
    "gasUsed": "3216351",
    "logsBloom": "0x
    "blockHash": "0x4f114e4f7bdf3f014212b5530cfa408bad37f3813807596153250ebf58346209",
    "transactionHash": "0xa9fa1bc8d55ad04690c03e065b39695062d443b55a009959ceec72be6695a1cb",
    "logs": [],
    "blockNumber": 11046205,
    "cumulativeGasUsed": "6442402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86b7d020C96676D3134931a69bC7df0675f45B1c"
  ],
  "solcInputHash": "4d907c61f9c5ab8ae511e186e22fbb8e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeliveryAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferTermsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ProductionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RedeemStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum SingleEditionMintable.WhoCanMint\",\"name\":\"minters\",\"type\":\"uint8\"}],\"name\":\"WhoCanMintChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptDelivery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptOfferTerms\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getConditionReport\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitBPS\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"conditionReportUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"conditionReportHash\",\"type\":\"bytes32\"}],\"name\":\"productionComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rejectOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SingleEditionMintable.WhoCanMint\",\"name\":\"minters\",\"type\":\"uint8\"}],\"name\":\"setAllowedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"minter\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"allowed\",\"type\":\"bool[]\"}],\"name\":\"setApprovedMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"minter\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"allowed\",\"type\":\"bool[]\"}],\"name\":\"setApprovedVIPMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setMembersSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vipSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membersSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generalSalePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setVIPSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"}],\"name\":\"updateEditionURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"iain nash Repository: https://github.com/ourzora/nft-editions\",\"details\":\"This allows creators to mint a unique serial edition of the same media within a custom contract\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn User burn function for token id \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getConditionReport(uint256)\":{\"details\":\"Get URIs for the condition report\",\"returns\":{\"_0\":\"_imageUrl, _imageHash\"}},\"getURIs()\":{\"details\":\"Get URIs for edition NFT\",\"returns\":{\"_0\":\"_imageUrl, _imageHash, _animationUrl, _animationHash\"}},\"initialize(address,address,string,string,string,string,bytes32,string,bytes32,uint256,uint256,uint256)\":{\"details\":\"Function to create a new edition. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the edition. This can be re-assigned or updated later\",\"params\":{\"_description\":\"Description of edition, used in the description field of the NFT\",\"_editionSize\":\"Number of editions that can be minted in total. If 0, unlimited editions can be minted.\",\"_name\":\"Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\",\"_owner\":\"User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\",\"_symbol\":\"Symbol of the new token contract\",\"animationHash\":\"The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\",\"animationUrl\":\"Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\",\"artist\":\"User that created the edition\",\"imageHash\":\"SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\",\"imageUrl\":\"Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.\",\"royaltyBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.\",\"splitBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.        \"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintEdition(address)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"to\":\"address to send the newly minted edition to\"}},\"mintEditions(address[])\":{\"details\":\"This mints multiple editions to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses to send the newly minted editions to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchase()\":{\"details\":\"This allows the user to purchase an edition at the given price in the contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAllowedMinter(uint8)\":{\"details\":\"Sets the types of users who is allowed to mint.\",\"params\":{\"minters\":\"WhoCanMint enum of minter types\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApprovedMinters(uint256,address[],bool[])\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setApprovedVIPMinters(uint256,address[],bool[])\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setMembersSalePrice(uint256)\":{\"details\":\"This sets the members ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"setSalePrice(uint256)\":{\"details\":\"This sets a simple ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"setSalePrices(uint256,uint256,uint256)\":{\"details\":\"This sets the members ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"generalSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.                                              \",\"membersSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\",\"vipSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"setVIPSalePrice(uint256)\":{\"details\":\"This sets the VIP ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the edition\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEditionURLs(string,string)\":{\"details\":\"Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\"},\"withdraw()\":{\"details\":\"This withdraws ETH from the contract to the contract owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"numberCanMint()\":{\"notice\":\"Returns the number of editions allowed to mint (max_uint256 when open edition)\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"}},\"notice\":\"This is a smart contract for handling dynamic contract minting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleEditionMintable.sol\":\"SingleEditionMintable\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            // solhint-disable quotes\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n            // solhint-enable quotes\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                // solhint-disable quotes\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n                // solhint-enable quotes\\n        }\\n        if (hasImage) {\\n            return\\n                // solhint-disable quotes\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n                // solhint-enable quotes\\n        }\\n        if (hasAnimation) {\\n            return\\n                // solhint-disable quotes\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n                // solhint-enable quotes\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x95274586735fd3eb3b1ba30d7a205f1c7bef6ca4fb7b60390e6f135aad7582cb\",\"license\":\"GPL-3.0\"},\"contracts/SingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity ^0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {SharedNFTLogic} from \\\"./SharedNFTLogic.sol\\\";\\nimport {IEditionSingleMintable} from \\\"./IEditionSingleMintable.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SingleEditionMintable is\\n    ERC721Upgradeable,\\n    IEditionSingleMintable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    enum WhoCanMint{ ONLY_OWNER, VIPS, MEMBERS, ANYONE }\\n\\n    enum ExpandedNFTStates{ UNMINTED, MINTED, REDEEM_STARTED, SET_OFFER_TERMS, ACCEPTED_OFFER, PRODUCTION_COMPLETE, REDEEMED }\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    \\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n    event WhoCanMintChanged(WhoCanMint minters);\\n\\n    // State change events\\n    event RedeemStarted(uint256 tokenId, address owner);\\n    event OfferTermsSet(uint256 tokenId);\\n    event OfferAccepted(uint256 tokenId);\\n    event OfferRejected(uint256 tokenId);\\n    event ProductionComplete(uint256 tokenId);\\n    event DeliveryAccepted(uint256 tokenId);\\n\\n    struct PerToken { \\n        // animation_url field in the metadata\\n        string redeemedAnimationUrl;\\n\\n        // Hash for the associated animation\\n        bytes32 redeemedAnimationHash;\\n\\n        // Image in the metadata\\n        string redeemedImageUrl;\\n\\n        // Hash for the associated image\\n        bytes32 redeemedImageHash;\\n\\n        // Condition report in the metadata\\n        string conditionReportUrl;\\n\\n        // Hash for the condition report\\n        bytes32 conditionReportHash;\\n\\n        // Hashmap of the Edition ID to the current \\n        ExpandedNFTStates editionState;\\n        uint256 editionFee; \\n    }\\n\\n    struct Pricing { \\n        // Royalty amount in bps\\n        uint256 royaltyBPS;\\n\\n        // Split amount to the platforms. the artist in bps\\n        uint256 splitBPS;\\n\\n        // Price for VIP sales\\n        uint256 vipSalePrice;\\n\\n        // Price for member sales\\n        uint256 membersSalePrice;        \\n    }\\n\\n    // metadata\\n    string public description;\\n\\n    // Artists wallet address\\n    address private _artist;\\n\\n    // Minted\\n\\n    // animation_url field in the metadata\\n    string private _animationUrl;\\n    // Hash for the associated animation\\n    bytes32 private _animationHash;\\n    // Image in the metadata\\n    string private _imageUrl;\\n    // Hash for the associated image\\n    bytes32 private _imageHash;\\n\\n    // Per Token data\\n    mapping(uint256 => PerToken) private _perTokenMetadata;\\n\\n    // Total size of edition that can be minted\\n    uint256 public editionSize;\\n\\n    // Current token id minted\\n    CountersUpgradeable.Counter private _atEditionId;\\n\\n    // Addresses allowed to mint edition\\n    mapping(address => bool) private _allowedMinters;\\n    // VIP Addresses allowed to mint edition\\n    mapping(address => bool) private _vipAllowedMinters;\\n\\n    // Who can currently mint\\n    WhoCanMint private _whoCanMint;\\n\\n    Pricing private _pricing;\\n\\n    // Price for general sales\\n    uint256 public salePrice;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable _sharedNFTLogic;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic sharedNFTLogic) {\\n        _sharedNFTLogic = sharedNFTLogic;\\n        _whoCanMint = WhoCanMint.ONLY_OWNER;\\n    }\\n\\n    /**\\n      @param _owner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n      @param artist User that created the edition\\n      @param _name Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _description Description of edition, used in the description field of the NFT\\n      @param imageUrl Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.\\n      @param imageHash SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\\n      @param animationUrl Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\\n      @param animationHash The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n      @param royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @param splitBPS BPS of the royalty set on the contract. Can be 0 for no royalty.        \\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        address artist,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory animationUrl,\\n        bytes32 animationHash,\\n        string memory imageUrl,\\n        bytes32 imageHash,\\n        uint256 _editionSize,\\n        uint256 royaltyBPS,\\n        uint256 splitBPS\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n        \\n        description = _description;\\n        _animationUrl = animationUrl;\\n        _animationHash = animationHash;\\n        _imageUrl = imageUrl;\\n        _imageHash = imageHash;\\n        \\n        _artist = artist;\\n        editionSize = _editionSize;\\n        _pricing.royaltyBPS = royaltyBPS;\\n        _pricing.splitBPS = splitBPS;\\n\\n        // Set edition id start to be 1 not 0\\n        _atEditionId.increment();\\n    }\\n\\n\\n    /// @dev returns the number of minted tokens within the edition\\n    function totalSupply() public view returns (uint256) {\\n        return _atEditionId.current() - 1;\\n    }\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through ISingleEditionMintable interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase an edition\\n           at the given price in the contract.\\n     */\\n    function purchase() external payable returns (uint256) {\\n        uint256 currentPrice = _currentSalesPrice();\\n\\n        require(currentPrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == currentPrice, \\\"Wrong price\\\");\\n\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = msg.sender;\\n        emit EditionSold(currentPrice, msg.sender);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @dev returns the current ETH sales price\\n           based on who can currently mint.\\n     */\\n    function _currentSalesPrice() internal view returns (uint256){\\n        if (_whoCanMint == WhoCanMint.VIPS) {\\n            return _pricing.vipSalePrice;\\n        } else if (_whoCanMint == WhoCanMint.MEMBERS) {\\n            return _pricing.membersSalePrice;\\n        } else if (_whoCanMint == WhoCanMint.ANYONE) {\\n            return salePrice;\\n        } \\n            \\n        return 0;       \\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n\\n        _whoCanMint = WhoCanMint.ANYONE;\\n\\n        emit WhoCanMintChanged(_whoCanMint);\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets the VIP ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setVIPSalePrice(uint256 _salePrice) external onlyOwner {\\n        _pricing.vipSalePrice = _salePrice;\\n\\n        _whoCanMint = WhoCanMint.VIPS;\\n\\n        emit WhoCanMintChanged(_whoCanMint);\\n        emit PriceChanged(salePrice);\\n    }\\n\\n     /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets the members ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setMembersSalePrice(uint256 _salePrice) external onlyOwner {\\n        _pricing.membersSalePrice = _salePrice;\\n\\n        _whoCanMint = WhoCanMint.MEMBERS;\\n\\n        emit WhoCanMintChanged(_whoCanMint);\\n        emit PriceChanged(salePrice);\\n    }   \\n\\n\\n     /**\\n      @param vipSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @param membersSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @param generalSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.                                              \\n      @dev This sets the members ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrices(uint256 vipSalePrice, uint256 membersSalePrice, uint256 generalSalePrice) external onlyOwner {\\n        _pricing.vipSalePrice = vipSalePrice;\\n        _pricing.membersSalePrice = membersSalePrice;\\n        salePrice = generalSalePrice;        \\n\\n        emit PriceChanged(salePrice);\\n    }  \\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 currentBalance = address(this).balance;\\n        \\n        uint256 platformFee = (currentBalance * _pricing.splitBPS) / 10_000;\\n        uint256 artistFee = currentBalance - platformFee;\\n\\n        // No need for gas limit to trusted address.\\n        AddressUpgradeable.sendValue(payable(owner()), platformFee);\\n        AddressUpgradeable.sendValue(payable(_artist), artistFee);\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (_whoCanMint == WhoCanMint.ANYONE) {\\n            return true;\\n        }\\n            \\n        if (_whoCanMint == WhoCanMint.MEMBERS) {\\n            if (_allowedMinters[msg.sender]) {\\n                return true;\\n            }          \\n        }\\n\\n        if ((_whoCanMint == WhoCanMint.VIPS) || (_whoCanMint == WhoCanMint.MEMBERS)) {\\n            if (_vipAllowedMinters[msg.sender]) {\\n                return true;\\n            }            \\n        }\\n\\n        if (_whoCanMint == WhoCanMint.ONLY_OWNER) {\\n            if (owner() == msg.sender) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(address[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintEditions(recipients);\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IEditionSingleMintable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n      @param minters WhoCanMint enum of minter types\\n      @dev Sets the types of users who is allowed to mint.\\n     */\\n    function setAllowedMinter(WhoCanMint minters) public onlyOwner {\\n        require(((minters >= WhoCanMint.ONLY_OWNER) && (minters <= WhoCanMint.ANYONE)), \\\"Needs to be a valid minter type\\\");\\n\\n        _whoCanMint = minters;\\n        emit WhoCanMintChanged(minters);\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinters(uint256 count, address[] calldata minter, bool[] calldata allowed) public onlyOwner {\\n        for (uint256 i=0; i < count; i++) {\\n            _allowedMinters[minter[i]] = allowed[i];\\n        }\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedVIPMinters(uint256 count, address[] calldata minter, bool[] calldata allowed) public onlyOwner {\\n        for (uint256 i=0; i < count; i++) {\\n            _vipAllowedMinters[minter[i]] = allowed[i];\\n        }\\n    }\\n\\n    /**\\n      @dev Allows for updates of edition urls by the owner of the edition.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n     */\\n    function updateEditionURLs(\\n        string memory imageUrl,\\n        string memory animationUrl\\n    ) public onlyOwner {\\n        _imageUrl = imageUrl;\\n        _animationUrl = animationUrl;\\n    }\\n\\n    /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\n    function numberCanMint() public view override returns (uint256) {\\n        // Return max int if open edition\\n        if (editionSize == 0) {\\n            return type(uint256).max;\\n        }\\n        // _atEditionId is one-indexed hence the need to remove one here\\n        return editionSize + 1 - _atEditionId.current();\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function redeem(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.MINTED), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.REDEEM_STARTED;\\n        emit RedeemStarted(tokenId, _msgSender());\\n    }\\n\\n    function setOfferTerms(uint256 tokenId, uint256 fee) public onlyOwner {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.REDEEM_STARTED), \\\"Wrong state\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.SET_OFFER_TERMS;\\n        _perTokenMetadata[tokenId].editionFee = fee;\\n\\n        emit OfferTermsSet(tokenId);\\n    }\\n\\n    function rejectOfferTerms(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.SET_OFFER_TERMS), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.MINTED;\\n\\n        emit OfferRejected(tokenId);\\n    }\\n\\n    function acceptOfferTerms(uint256 tokenId) external payable  {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.SET_OFFER_TERMS), \\\"You currently can not redeem\\\");\\n        require(msg.value == _perTokenMetadata[tokenId].editionFee, \\\"Wrong price\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.ACCEPTED_OFFER;\\n\\n        emit OfferAccepted(tokenId);\\n    }\\n\\n    function productionComplete(\\n        uint256 tokenId,\\n        string memory _description,\\n        string memory animationUrl,\\n        bytes32 animationHash,\\n        string memory imageUrl,\\n        bytes32 imageHash, \\n        string memory conditionReportUrl,\\n        bytes32 conditionReportHash               \\n    ) public onlyOwner {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.ACCEPTED_OFFER), \\\"You currently can not redeem\\\");\\n\\n        // Set the NFT to display as redeemed\\n        description = _description;\\n        _perTokenMetadata[tokenId].redeemedAnimationUrl = animationUrl;\\n        _perTokenMetadata[tokenId].redeemedAnimationHash = animationHash;\\n        _perTokenMetadata[tokenId].redeemedImageUrl = imageUrl;\\n        _perTokenMetadata[tokenId].redeemedImageHash = imageHash;\\n        _perTokenMetadata[tokenId].conditionReportUrl = conditionReportUrl;\\n        _perTokenMetadata[tokenId].conditionReportHash = conditionReportHash;\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.PRODUCTION_COMPLETE;\\n\\n        emit ProductionComplete(tokenId);\\n    }\\n\\n    function acceptDelivery(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.PRODUCTION_COMPLETE), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.REDEEMED;\\n\\n        emit OfferRejected(tokenId);\\n    }\\n\\n    /**\\n      @dev Private function to mint without any access checks.\\n           Called by the public edition minting functions.\\n     */\\n    function _mintEditions(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = _atEditionId.current();\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\n        while (_atEditionId.current() <= endAt) {\\n            _mint(\\n                recipients[_atEditionId.current() - startAt],\\n                _atEditionId.current()\\n            );\\n\\n            _perTokenMetadata[_atEditionId.current()].editionState = ExpandedNFTStates.MINTED;\\n\\n            _atEditionId.increment();\\n        }\\n        \\n        return _atEditionId.current();\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT\\n      @return _imageUrl, _imageHash, _animationUrl, _animationHash\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        return (_imageUrl, _imageHash, _animationUrl, _animationHash);\\n    }\\n\\n    /**\\n      @dev Get URIs for the condition report\\n      @return _imageUrl, _imageHash\\n     */\\n    function getConditionReport(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        return (_perTokenMetadata[tokenId].conditionReportUrl, _perTokenMetadata[tokenId].conditionReportHash);\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * _pricing.royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            _sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                _imageUrl,\\n                _animationUrl,\\n                tokenId,\\n                editionSize\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa26f31ac48678491a945fb80ccc67013acf8161b184ba964508ae4df6cc5c76b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620039c8380380620039c8833981016040819052620000349162000054565b60601b6001600160601b03191660805260d4805460ff1916905562000086565b6000602082840312156200006757600080fd5b81516001600160a01b03811681146200007f57600080fd5b9392505050565b60805160601c613923620000a5600039600061196b01526139236000f3fe6080604052600436106102675760003560e01c8063715018a611610144578063c87b56dd116100b6578063ee5df5501161007a578063ee5df5501461071d578063f2fde38b1461073d578063f4ed0f461461075d578063f51f96dd14610773578063f6dfa30b14610789578063fc51e0c3146107a957600080fd5b8063c87b56dd1461067d578063db006a751461069d578063de5d62a0146106bd578063e444bfcc146106dd578063e985e9c5146106fd57600080fd5b80637d0eeace116101085780637d0eeace146105e05780638da5cb5b146105f357806395d89b4114610608578063a22cb4651461061d578063a66ff0af1461063d578063b88d4fde1461065d57600080fd5b8063715018a6146105565780637284e4161461056b578063787e5efc14610580578063799b7c5f146105a05780637b422c4c146105c057600080fd5b8063367de39e116101dd57806342842e0e116101a157806342842e0e146104ae57806342966c68146104ce57806352c9143e146104ee5780636352211e1461050e57806364edfbf01461052e57806370a082311461053657600080fd5b8063367de39e1461041957806336f3ec76146104395780633892aa521461045957806339dc13bc146104795780633ccfd60b1461049957600080fd5b80630f6a93491161022f5780630f6a93491461034057806318160ddd146103605780631919fed71461037557806323b872dd1461039557806328c5440f146103b55780632a55205a146103da57600080fd5b806301ffc9a71461026c57806306fdde03146102a1578063081812fc146102c3578063095ea7b3146102fb5780630b65b6e71461031d575b600080fd5b34801561027857600080fd5b5061028c61028736600461302b565b6107d7565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102b6610802565b6040516102989190613443565b3480156102cf57600080fd5b506102e36102de36600461315f565b610894565b6040516001600160a01b039091168152602001610298565b34801561030757600080fd5b5061031b610316366004612f33565b610921565b005b34801561032957600080fd5b50610332610a32565b604051908152602001610298565b34801561034c57600080fd5b5061033261035b366004612f5d565b610a66565b34801561036c57600080fd5b50610332610a95565b34801561038157600080fd5b5061031b61039036600461315f565b610aa2565b3480156103a157600080fd5b5061031b6103b0366004612e52565b610b68565b3480156103c157600080fd5b506103ca610b9a565b6040516102989493929190613478565b3480156103e657600080fd5b506103fa6103f53660046132c4565b610cd2565b604080516001600160a01b039093168352602083019190915201610298565b34801561042557600080fd5b5061031b610434366004613065565b610d2f565b34801561044557600080fd5b5061031b6104543660046132e6565b610e31565b34801561046557600080fd5b5061031b610474366004613178565b610ea7565b34801561048557600080fd5b5061031b61049436600461315f565b610f75565b3480156104a557600080fd5b5061031b611058565b3480156104ba57600080fd5b5061031b6104c9366004612e52565b6110de565b3480156104da57600080fd5b5061031b6104e936600461315f565b6110f9565b3480156104fa57600080fd5b5061031b6105093660046131f1565b61112a565b34801561051a57600080fd5b506102e361052936600461315f565b6112b8565b61033261132f565b34801561054257600080fd5b50610332610551366004612cbf565b611431565b34801561056257600080fd5b5061031b6114b8565b34801561057757600080fd5b506102b66114f3565b34801561058c57600080fd5b5061031b61059b36600461315f565b611581565b3480156105ac57600080fd5b5061031b6105bb366004613178565b6115c8565b3480156105cc57600080fd5b5061031b6105db36600461315f565b61168e565b61031b6105ee36600461315f565b61173f565b3480156105ff57600080fd5b506102e361184c565b34801561061457600080fd5b506102b6611860565b34801561062957600080fd5b5061031b610638366004612f09565b61186f565b34801561064957600080fd5b50610332610658366004612cbf565b61187e565b34801561066957600080fd5b5061031b610678366004612e8e565b61190a565b34801561068957600080fd5b506102b661069836600461315f565b611942565b3480156106a957600080fd5b5061031b6106b836600461315f565b611a1f565b3480156106c957600080fd5b5061031b6106d836600461315f565b611b0b565b3480156106e957600080fd5b5061031b6106f83660046130fc565b611b53565b34801561070957600080fd5b5061028c610718366004612cda565b611ba9565b34801561072957600080fd5b5061031b6107383660046132c4565b611bd7565b34801561074957600080fd5b5061031b610758366004612cbf565b611cea565b34801561076957600080fd5b5061033260d05481565b34801561077f57600080fd5b5061033260d95481565b34801561079557600080fd5b5061031b6107a4366004612d0d565b611d87565b3480156107b557600080fd5b506107c96107c436600461315f565b611ee0565b604051610298929190613456565b600063152a902d60e11b6001600160e01b0319831614806107fc57506107fc82611f93565b92915050565b60606065805461081190613809565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90613809565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b5050505050905090565b600061089f82611fe3565b6109055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061092c826112b8565b9050806001600160a01b0316836001600160a01b0316141561099a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108fc565b336001600160a01b03821614806109b657506109b68133611ba9565b610a235760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016108fc565b610a2d8383612000565b505050565b600060d05460001415610a46575060001990565b60d15460d054610a5790600161376d565b610a6191906137c6565b905090565b6000610a7061206e565b610a8c5760405162461bcd60e51b81526004016108fc90613643565b6107fc82612173565b60006001610a5760d15490565b33610aab61184c565b6001600160a01b031614610ad15760405162461bcd60e51b81526004016108fc906135e9565b60d981905560d480546003919060ff19166001835b021790555060d4546040517f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5191610b229160ff9091169061341b565b60405180910390a17fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d62260d954604051610b5d91815260200190565b60405180910390a150565b610b73335b8261229a565b610b8f5760405162461bcd60e51b81526004016108fc9061367a565b610a2d83838361235c565b606060006060600060cd60ce5460cb60cc54838054610bb890613809565b80601f0160208091040260200160405190810160405280929190818152602001828054610be490613809565b8015610c315780601f10610c0657610100808354040283529160200191610c31565b820191906000526020600020905b815481529060010190602001808311610c1457829003601f168201915b50505050509350818054610c4490613809565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7090613809565b8015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b50505050509150935093509350935090919293565b60008080610cde61184c565b6001600160a01b03161415610d0057610cf561184c565b600091509150610d28565b610d0861184c565b60d55461271090610d1990866137a7565b610d239190613785565b915091505b9250929050565b33610d3861184c565b6001600160a01b031614610d5e5760405162461bcd60e51b81526004016108fc906135e9565b6000816003811115610d7257610d72613875565b10158015610d9257506003816003811115610d8f57610d8f613875565b11155b610dde5760405162461bcd60e51b815260206004820152601f60248201527f4e6565647320746f20626520612076616c6964206d696e74657220747970650060448201526064016108fc565b60d4805482919060ff19166001836003811115610dfd57610dfd613875565b02179055507f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5181604051610b5d919061341b565b33610e3a61184c565b6001600160a01b031614610e605760405162461bcd60e51b81526004016108fc906135e9565b60d783905560d882905560d98190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a1505050565b33610eb061184c565b6001600160a01b031614610ed65760405162461bcd60e51b81526004016108fc906135e9565b60005b85811015610f6d57828282818110610ef357610ef361388b565b9050602002016020810190610f089190613010565b60d36000878785818110610f1e57610f1e61388b565b9050602002016020810190610f339190612cbf565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610f6581613844565b915050610ed9565b505050505050565b610f7e81611fe3565b610f9a5760405162461bcd60e51b81526004016108fc906135a1565b610fa333610b6d565b610fbf5760405162461bcd60e51b81526004016108fc906135c3565b6003600082815260cf6020526040902060069081015460ff1690811115610fe857610fe8613875565b146110055760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf6020526040902060060180546001919060ff191682805b02179055506040518181527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b90602001610b5d565b3361106161184c565b6001600160a01b0316146110875760405162461bcd60e51b81526004016108fc906135e9565b60d65447906000906127109061109d90846137a7565b6110a79190613785565b905060006110b582846137c6565b90506110c86110c261184c565b836124e6565b60ca54610a2d906001600160a01b0316826124e6565b610a2d8383836040518060200160405280600081525061190a565b61110233610b6d565b61111e5760405162461bcd60e51b81526004016108fc906135c3565b611127816125ff565b50565b3361113361184c565b6001600160a01b0316146111595760405162461bcd60e51b81526004016108fc906135e9565b61116288611fe3565b61117e5760405162461bcd60e51b81526004016108fc906135a1565b6004600089815260cf6020526040902060069081015460ff16908111156111a7576111a7613875565b146111c45760405162461bcd60e51b81526004016108fc9061356a565b86516111d79060c99060208a0190612b58565b50600088815260cf6020908152604090912087516111f792890190612b58565b50600088815260cf6020908152604090912060018101879055855161122492600290920191870190612b58565b50600088815260cf6020908152604090912060038101859055835161125192600490920191850190612b58565b50600088815260cf6020526040902060058082018390556006909101805460ff191660018302179055506040518881527fadb6d4f651f6fbf8b37026019ee48fdb86abf9ec94eb4a5f0acf72ad8c7872a39060200160405180910390a15050505050505050565b6000818152606760205260408120546001600160a01b0316806107fc5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108fc565b60008061133a612688565b90506000811161137b5760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b60448201526064016108fc565b80341461139a5760405162461bcd60e51b81526004016108fc9061361e565b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106113d0576113d061388b565b6001600160a01b039092166020928302919091018201526040805184815233928101929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a161142a81612173565b9250505090565b60006001600160a01b03821661149c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108fc565b506001600160a01b031660009081526068602052604090205490565b336114c161184c565b6001600160a01b0316146114e75760405162461bcd60e51b81526004016108fc906135e9565b6114f160006126fc565b565b60c9805461150090613809565b80601f016020809104026020016040519081016040528092919081815260200182805461152c90613809565b80156115795780601f1061154e57610100808354040283529160200191611579565b820191906000526020600020905b81548152906001019060200180831161155c57829003601f168201915b505050505081565b3361158a61184c565b6001600160a01b0316146115b05760405162461bcd60e51b81526004016108fc906135e9565b60d781905560d480546001919060ff19168280610ae6565b336115d161184c565b6001600160a01b0316146115f75760405162461bcd60e51b81526004016108fc906135e9565b60005b85811015610f6d578282828181106116145761161461388b565b90506020020160208101906116299190613010565b60d2600087878581811061163f5761163f61388b565b90506020020160208101906116549190612cbf565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061168681613844565b9150506115fa565b61169781611fe3565b6116b35760405162461bcd60e51b81526004016108fc906135a1565b6116bc33610b6d565b6116d85760405162461bcd60e51b81526004016108fc906135c3565b6005600082815260cf6020526040902060069081015460ff169081111561170157611701613875565b1461171e5760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf602052604090206006908101805460ff1916600183611023565b61174881611fe3565b6117645760405162461bcd60e51b81526004016108fc906135a1565b61176d33610b6d565b6117895760405162461bcd60e51b81526004016108fc906135c3565b6003600082815260cf6020526040902060069081015460ff16908111156117b2576117b2613875565b146117cf5760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf602052604090206007015434146117ff5760405162461bcd60e51b81526004016108fc9061361e565b600081815260cf6020908152604091829020600601805460ff1916600417905590518281527f9bd6b4fd288008520fd788a93304e5688a401aea817ea8140ecf1fb8648f31919101610b5d565b6000610a616097546001600160a01b031690565b60606066805461081190613809565b61187a33838361274e565b5050565b600061188861206e565b6118a45760405162461bcd60e51b81526004016108fc90613643565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106118da576118da61388b565b60200260200101906001600160a01b031690816001600160a01b03168152505061190381612173565b9392505050565b611914338361229a565b6119305760405162461bcd60e51b81526004016108fc9061367a565b61193c84848484612819565b50505050565b606061194d82611fe3565b6119695760405162461bcd60e51b81526004016108fc906135a1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06119a0610802565b60c960cd60cb8760d0546040518763ffffffff1660e01b81526004016119cb969594939291906134b5565b60006040518083038186803b1580156119e357600080fd5b505afa1580156119f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fc9190810190613086565b611a2881611fe3565b611a445760405162461bcd60e51b81526004016108fc906135a1565b611a4d33610b6d565b611a695760405162461bcd60e51b81526004016108fc906135c3565b6001600082815260cf6020526040902060069081015460ff1690811115611a9257611a92613875565b14611aaf5760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf60205260409020600601805460ff191660021790557fc290e40808ef06721539ad0d926f8d5f53d2dd6d5e28334308a012676f8674168133604080519283526001600160a01b03909116602083015201610b5d565b33611b1461184c565b6001600160a01b031614611b3a5760405162461bcd60e51b81526004016108fc906135e9565b60d881905560d480546002919060ff1916600183610ae6565b33611b5c61184c565b6001600160a01b031614611b825760405162461bcd60e51b81526004016108fc906135e9565b8151611b959060cd906020850190612b58565b508051610a2d9060cb906020840190612b58565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b33611be061184c565b6001600160a01b031614611c065760405162461bcd60e51b81526004016108fc906135e9565b611c0f82611fe3565b611c2b5760405162461bcd60e51b81526004016108fc906135a1565b6002600083815260cf6020526040902060069081015460ff1690811115611c5457611c54613875565b14611c8f5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064016108fc565b600082815260cf602090815260409182902060068101805460ff1916600317905560070183905590518381527f316b408b8cf323e8f20ef7a8c267eedc89bef19ca5db7fc30be938e55bf068f9910160405180910390a15050565b33611cf361184c565b6001600160a01b031614611d195760405162461bcd60e51b81526004016108fc906135e9565b6001600160a01b038116611d7e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108fc565b611127816126fc565b600054610100900460ff16611da25760005460ff1615611da6565b303b155b611e095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108fc565b600054610100900460ff16158015611e2b576000805461ffff19166101011790555b611e358b8b61284c565b611e3d61287d565b611e468d611cea565b8851611e599060c99060208c0190612b58565b508751611e6d9060cb9060208b0190612b58565b5060cc8790558551611e869060cd906020890190612b58565b5060ce85905560ca80546001600160a01b0319166001600160a01b038e1617905560d084905560d583905560d682905560d1805460010190558015611ed1576000805461ff00191690555b50505050505050505050505050565b600081815260cf6020526040812060058101546004909101805460609392908290611f0a90613809565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3690613809565b8015611f835780601f10611f5857610100808354040283529160200191611f83565b820191906000526020600020905b815481529060010190602001808311611f6657829003601f168201915b5050505050915091509150915091565b60006001600160e01b031982166380ac58cd60e01b1480611fc457506001600160e01b03198216635b5e139f60e01b145b806107fc57506301ffc9a760e01b6001600160e01b03198316146107fc565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612035826112b8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600360d45460ff16600381111561208957612089613875565b14156120955750600190565b600260d45460ff1660038111156120ae576120ae613875565b14156120d25733600090815260d2602052604090205460ff16156120d25750600190565b600160d45460ff1660038111156120eb576120eb613875565b148061210d5750600260d45460ff16600381111561210b5761210b613875565b145b156121305733600090815260d3602052604090205460ff16156121305750600190565b600060d45460ff16600381111561214957612149613875565b141561216d573361215861184c565b6001600160a01b0316141561216d5750600190565b50600090565b60008061217f60d15490565b905060006001845183612192919061376d565b61219c91906137c6565b905060d054600014806121b1575060d0548111155b6121e85760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b60448201526064016108fc565b806121f260d15490565b1161228e57612235848361220560d15490565b61220f91906137c6565b8151811061221f5761221f61388b565b602002602001015161223060d15490565b6128ac565b600160cf600061224460d15490565b815260200190815260200160002060060160006101000a81548160ff0219169083600681111561227657612276613875565b021790555061228960d180546001019055565b6121e8565b60d1545b949350505050565b60006122a582611fe3565b6123065760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108fc565b6000612311836112b8565b9050806001600160a01b0316846001600160a01b0316148061234c5750836001600160a01b031661234184610894565b6001600160a01b0316145b8061229257506122928185611ba9565b826001600160a01b031661236f826112b8565b6001600160a01b0316146123d35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108fc565b6001600160a01b0382166124355760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108fc565b612440600082612000565b6001600160a01b03831660009081526068602052604081208054600192906124699084906137c6565b90915550506001600160a01b038216600090815260686020526040812080546001929061249790849061376d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206138ce83398151915291a4505050565b804710156125365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108fc565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612583576040519150601f19603f3d011682016040523d82523d6000602084013e612588565b606091505b5050905080610a2d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108fc565b600061260a826112b8565b9050612617600083612000565b6001600160a01b03811660009081526068602052604081208054600192906126409084906137c6565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206138ce833981519152908390a45050565b6000600160d45460ff1660038111156126a3576126a3613875565b14156126b0575060d75490565b600260d45460ff1660038111156126c9576126c9613875565b14156126d6575060d85490565b600360d45460ff1660038111156126ef576126ef613875565b141561216d575060d95490565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156127ac5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016108fc565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61282484848461235c565b612830848484846129cd565b61193c5760405162461bcd60e51b81526004016108fc90613518565b600054610100900460ff166128735760405162461bcd60e51b81526004016108fc906136cb565b61187a8282612ada565b600054610100900460ff166128a45760405162461bcd60e51b81526004016108fc906136cb565b6114f1612b28565b6001600160a01b0382166129025760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108fc565b61290b81611fe3565b156129585760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108fc565b6001600160a01b038216600090815260686020526040812080546001929061298190849061376d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206138ce833981519152908290a45050565b60006001600160a01b0384163b15612acf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612a119033908990889088906004016133de565b602060405180830381600087803b158015612a2b57600080fd5b505af1925050508015612a5b575060408051601f3d908101601f19168201909252612a5891810190613048565b60015b612ab5573d808015612a89576040519150601f19603f3d011682016040523d82523d6000602084013e612a8e565b606091505b508051612aad5760405162461bcd60e51b81526004016108fc90613518565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612292565b506001949350505050565b600054610100900460ff16612b015760405162461bcd60e51b81526004016108fc906136cb565b8151612b14906065906020850190612b58565b508051610a2d906066906020840190612b58565b600054610100900460ff16612b4f5760405162461bcd60e51b81526004016108fc906136cb565b6114f1336126fc565b828054612b6490613809565b90600052602060002090601f016020900481019282612b865760008555612bcc565b82601f10612b9f57805160ff1916838001178555612bcc565b82800160010185558215612bcc579182015b82811115612bcc578251825591602001919060010190612bb1565b50612bd8929150612bdc565b5090565b5b80821115612bd85760008155600101612bdd565b6000612c04612bff84613746565b613716565b9050828152838383011115612c1857600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114612c4657600080fd5b919050565b60008083601f840112612c5d57600080fd5b5081356001600160401b03811115612c7457600080fd5b6020830191508360208260051b8501011115610d2857600080fd5b80358015158114612c4657600080fd5b600082601f830112612cb057600080fd5b61190383833560208501612bf1565b600060208284031215612cd157600080fd5b61190382612c2f565b60008060408385031215612ced57600080fd5b612cf683612c2f565b9150612d0460208401612c2f565b90509250929050565b6000806000806000806000806000806000806101808d8f031215612d3057600080fd5b612d398d612c2f565b9b50612d4760208e01612c2f565b9a506001600160401b0360408e01351115612d6157600080fd5b612d718e60408f01358f01612c9f565b99506001600160401b0360608e01351115612d8b57600080fd5b612d9b8e60608f01358f01612c9f565b98506001600160401b0360808e01351115612db557600080fd5b612dc58e60808f01358f01612c9f565b97506001600160401b0360a08e01351115612ddf57600080fd5b612def8e60a08f01358f01612c9f565b965060c08d013595506001600160401b0360e08e01351115612e1057600080fd5b612e208e60e08f01358f01612c9f565b94506101008d013593506101208d013592506101408d013591506101608d013590509295989b509295989b509295989b565b600080600060608486031215612e6757600080fd5b612e7084612c2f565b9250612e7e60208501612c2f565b9150604084013590509250925092565b60008060008060808587031215612ea457600080fd5b612ead85612c2f565b9350612ebb60208601612c2f565b92506040850135915060608501356001600160401b03811115612edd57600080fd5b8501601f81018713612eee57600080fd5b612efd87823560208401612bf1565b91505092959194509250565b60008060408385031215612f1c57600080fd5b612f2583612c2f565b9150612d0460208401612c8f565b60008060408385031215612f4657600080fd5b612f4f83612c2f565b946020939093013593505050565b60006020808385031215612f7057600080fd5b82356001600160401b0380821115612f8757600080fd5b818501915085601f830112612f9b57600080fd5b813581811115612fad57612fad6138a1565b8060051b9150612fbe848301613716565b8181528481019084860184860187018a1015612fd957600080fd5b600095505b8386101561300357612fef81612c2f565b835260019590950194918601918601612fde565b5098975050505050505050565b60006020828403121561302257600080fd5b61190382612c8f565b60006020828403121561303d57600080fd5b8135611903816138b7565b60006020828403121561305a57600080fd5b8151611903816138b7565b60006020828403121561307757600080fd5b81356004811061190357600080fd5b60006020828403121561309857600080fd5b81516001600160401b038111156130ae57600080fd5b8201601f810184136130bf57600080fd5b80516130cd612bff82613746565b8181528560208385010111156130e257600080fd5b6130f38260208301602086016137dd565b95945050505050565b6000806040838503121561310f57600080fd5b82356001600160401b038082111561312657600080fd5b61313286838701612c9f565b9350602085013591508082111561314857600080fd5b5061315585828601612c9f565b9150509250929050565b60006020828403121561317157600080fd5b5035919050565b60008060008060006060868803121561319057600080fd5b8535945060208601356001600160401b03808211156131ae57600080fd5b6131ba89838a01612c4b565b909650945060408801359150808211156131d357600080fd5b506131e088828901612c4b565b969995985093965092949392505050565b600080600080600080600080610100898b03121561320e57600080fd5b8835975060208901356001600160401b038082111561322c57600080fd5b6132388c838d01612c9f565b985060408b013591508082111561324e57600080fd5b61325a8c838d01612c9f565b975060608b0135965060808b013591508082111561327757600080fd5b6132838c838d01612c9f565b955060a08b0135945060c08b01359150808211156132a057600080fd5b506132ad8b828c01612c9f565b92505060e089013590509295985092959890939650565b600080604083850312156132d757600080fd5b50508035926020909101359150565b6000806000606084860312156132fb57600080fd5b505081359360208301359350604090920135919050565b6000815180845261332a8160208601602086016137dd565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061335857607f831692505b602080841082141561337a57634e487b7160e01b600052602260045260246000fd5b8388526020880182801561339557600181146133a6576133d1565b60ff198716825282820197506133d1565b60008981526020902060005b878110156133cb578154848201529086019084016133b2565b83019850505b5050505050505092915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061341190830184613312565b9695505050505050565b602081016004831061343d57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006119036020830184613312565b6040815260006134696040830185613312565b90508260208301529392505050565b60808152600061348b6080830187613312565b85602084015282810360408401526134a38186613312565b91505082606083015295945050505050565b60c0815260006134c860c0830189613312565b82810360208401526134da818961333e565b905082810360408401526134ee818861333e565b90508281036060840152613502818761333e565b6080840195909552505060a00152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f596f752063757272656e746c792063616e206e6f742072656465656d00000000604082015260600190565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600b908201526a57726f6e6720707269636560a81b604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f191681016001600160401b038111828210171561373e5761373e6138a1565b604052919050565b60006001600160401b0382111561375f5761375f6138a1565b50601f01601f191660200190565b600082198211156137805761378061385f565b500190565b6000826137a257634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156137c1576137c161385f565b500290565b6000828210156137d8576137d861385f565b500390565b60005b838110156137f85781810151838201526020016137e0565b8381111561193c5750506000910152565b600181811c9082168061381d57607f821691505b6020821081141561383e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156138585761385861385f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461112757600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b3f88a32fcaa04c9b51a1bfa13a8e70134d4a43a5b576507ac8530823320170164736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c8063715018a611610144578063c87b56dd116100b6578063ee5df5501161007a578063ee5df5501461071d578063f2fde38b1461073d578063f4ed0f461461075d578063f51f96dd14610773578063f6dfa30b14610789578063fc51e0c3146107a957600080fd5b8063c87b56dd1461067d578063db006a751461069d578063de5d62a0146106bd578063e444bfcc146106dd578063e985e9c5146106fd57600080fd5b80637d0eeace116101085780637d0eeace146105e05780638da5cb5b146105f357806395d89b4114610608578063a22cb4651461061d578063a66ff0af1461063d578063b88d4fde1461065d57600080fd5b8063715018a6146105565780637284e4161461056b578063787e5efc14610580578063799b7c5f146105a05780637b422c4c146105c057600080fd5b8063367de39e116101dd57806342842e0e116101a157806342842e0e146104ae57806342966c68146104ce57806352c9143e146104ee5780636352211e1461050e57806364edfbf01461052e57806370a082311461053657600080fd5b8063367de39e1461041957806336f3ec76146104395780633892aa521461045957806339dc13bc146104795780633ccfd60b1461049957600080fd5b80630f6a93491161022f5780630f6a93491461034057806318160ddd146103605780631919fed71461037557806323b872dd1461039557806328c5440f146103b55780632a55205a146103da57600080fd5b806301ffc9a71461026c57806306fdde03146102a1578063081812fc146102c3578063095ea7b3146102fb5780630b65b6e71461031d575b600080fd5b34801561027857600080fd5b5061028c61028736600461302b565b6107d7565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102b6610802565b6040516102989190613443565b3480156102cf57600080fd5b506102e36102de36600461315f565b610894565b6040516001600160a01b039091168152602001610298565b34801561030757600080fd5b5061031b610316366004612f33565b610921565b005b34801561032957600080fd5b50610332610a32565b604051908152602001610298565b34801561034c57600080fd5b5061033261035b366004612f5d565b610a66565b34801561036c57600080fd5b50610332610a95565b34801561038157600080fd5b5061031b61039036600461315f565b610aa2565b3480156103a157600080fd5b5061031b6103b0366004612e52565b610b68565b3480156103c157600080fd5b506103ca610b9a565b6040516102989493929190613478565b3480156103e657600080fd5b506103fa6103f53660046132c4565b610cd2565b604080516001600160a01b039093168352602083019190915201610298565b34801561042557600080fd5b5061031b610434366004613065565b610d2f565b34801561044557600080fd5b5061031b6104543660046132e6565b610e31565b34801561046557600080fd5b5061031b610474366004613178565b610ea7565b34801561048557600080fd5b5061031b61049436600461315f565b610f75565b3480156104a557600080fd5b5061031b611058565b3480156104ba57600080fd5b5061031b6104c9366004612e52565b6110de565b3480156104da57600080fd5b5061031b6104e936600461315f565b6110f9565b3480156104fa57600080fd5b5061031b6105093660046131f1565b61112a565b34801561051a57600080fd5b506102e361052936600461315f565b6112b8565b61033261132f565b34801561054257600080fd5b50610332610551366004612cbf565b611431565b34801561056257600080fd5b5061031b6114b8565b34801561057757600080fd5b506102b66114f3565b34801561058c57600080fd5b5061031b61059b36600461315f565b611581565b3480156105ac57600080fd5b5061031b6105bb366004613178565b6115c8565b3480156105cc57600080fd5b5061031b6105db36600461315f565b61168e565b61031b6105ee36600461315f565b61173f565b3480156105ff57600080fd5b506102e361184c565b34801561061457600080fd5b506102b6611860565b34801561062957600080fd5b5061031b610638366004612f09565b61186f565b34801561064957600080fd5b50610332610658366004612cbf565b61187e565b34801561066957600080fd5b5061031b610678366004612e8e565b61190a565b34801561068957600080fd5b506102b661069836600461315f565b611942565b3480156106a957600080fd5b5061031b6106b836600461315f565b611a1f565b3480156106c957600080fd5b5061031b6106d836600461315f565b611b0b565b3480156106e957600080fd5b5061031b6106f83660046130fc565b611b53565b34801561070957600080fd5b5061028c610718366004612cda565b611ba9565b34801561072957600080fd5b5061031b6107383660046132c4565b611bd7565b34801561074957600080fd5b5061031b610758366004612cbf565b611cea565b34801561076957600080fd5b5061033260d05481565b34801561077f57600080fd5b5061033260d95481565b34801561079557600080fd5b5061031b6107a4366004612d0d565b611d87565b3480156107b557600080fd5b506107c96107c436600461315f565b611ee0565b604051610298929190613456565b600063152a902d60e11b6001600160e01b0319831614806107fc57506107fc82611f93565b92915050565b60606065805461081190613809565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90613809565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b5050505050905090565b600061089f82611fe3565b6109055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061092c826112b8565b9050806001600160a01b0316836001600160a01b0316141561099a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108fc565b336001600160a01b03821614806109b657506109b68133611ba9565b610a235760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016108fc565b610a2d8383612000565b505050565b600060d05460001415610a46575060001990565b60d15460d054610a5790600161376d565b610a6191906137c6565b905090565b6000610a7061206e565b610a8c5760405162461bcd60e51b81526004016108fc90613643565b6107fc82612173565b60006001610a5760d15490565b33610aab61184c565b6001600160a01b031614610ad15760405162461bcd60e51b81526004016108fc906135e9565b60d981905560d480546003919060ff19166001835b021790555060d4546040517f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5191610b229160ff9091169061341b565b60405180910390a17fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d62260d954604051610b5d91815260200190565b60405180910390a150565b610b73335b8261229a565b610b8f5760405162461bcd60e51b81526004016108fc9061367a565b610a2d83838361235c565b606060006060600060cd60ce5460cb60cc54838054610bb890613809565b80601f0160208091040260200160405190810160405280929190818152602001828054610be490613809565b8015610c315780601f10610c0657610100808354040283529160200191610c31565b820191906000526020600020905b815481529060010190602001808311610c1457829003601f168201915b50505050509350818054610c4490613809565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7090613809565b8015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b50505050509150935093509350935090919293565b60008080610cde61184c565b6001600160a01b03161415610d0057610cf561184c565b600091509150610d28565b610d0861184c565b60d55461271090610d1990866137a7565b610d239190613785565b915091505b9250929050565b33610d3861184c565b6001600160a01b031614610d5e5760405162461bcd60e51b81526004016108fc906135e9565b6000816003811115610d7257610d72613875565b10158015610d9257506003816003811115610d8f57610d8f613875565b11155b610dde5760405162461bcd60e51b815260206004820152601f60248201527f4e6565647320746f20626520612076616c6964206d696e74657220747970650060448201526064016108fc565b60d4805482919060ff19166001836003811115610dfd57610dfd613875565b02179055507f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5181604051610b5d919061341b565b33610e3a61184c565b6001600160a01b031614610e605760405162461bcd60e51b81526004016108fc906135e9565b60d783905560d882905560d98190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a1505050565b33610eb061184c565b6001600160a01b031614610ed65760405162461bcd60e51b81526004016108fc906135e9565b60005b85811015610f6d57828282818110610ef357610ef361388b565b9050602002016020810190610f089190613010565b60d36000878785818110610f1e57610f1e61388b565b9050602002016020810190610f339190612cbf565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610f6581613844565b915050610ed9565b505050505050565b610f7e81611fe3565b610f9a5760405162461bcd60e51b81526004016108fc906135a1565b610fa333610b6d565b610fbf5760405162461bcd60e51b81526004016108fc906135c3565b6003600082815260cf6020526040902060069081015460ff1690811115610fe857610fe8613875565b146110055760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf6020526040902060060180546001919060ff191682805b02179055506040518181527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b90602001610b5d565b3361106161184c565b6001600160a01b0316146110875760405162461bcd60e51b81526004016108fc906135e9565b60d65447906000906127109061109d90846137a7565b6110a79190613785565b905060006110b582846137c6565b90506110c86110c261184c565b836124e6565b60ca54610a2d906001600160a01b0316826124e6565b610a2d8383836040518060200160405280600081525061190a565b61110233610b6d565b61111e5760405162461bcd60e51b81526004016108fc906135c3565b611127816125ff565b50565b3361113361184c565b6001600160a01b0316146111595760405162461bcd60e51b81526004016108fc906135e9565b61116288611fe3565b61117e5760405162461bcd60e51b81526004016108fc906135a1565b6004600089815260cf6020526040902060069081015460ff16908111156111a7576111a7613875565b146111c45760405162461bcd60e51b81526004016108fc9061356a565b86516111d79060c99060208a0190612b58565b50600088815260cf6020908152604090912087516111f792890190612b58565b50600088815260cf6020908152604090912060018101879055855161122492600290920191870190612b58565b50600088815260cf6020908152604090912060038101859055835161125192600490920191850190612b58565b50600088815260cf6020526040902060058082018390556006909101805460ff191660018302179055506040518881527fadb6d4f651f6fbf8b37026019ee48fdb86abf9ec94eb4a5f0acf72ad8c7872a39060200160405180910390a15050505050505050565b6000818152606760205260408120546001600160a01b0316806107fc5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108fc565b60008061133a612688565b90506000811161137b5760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b60448201526064016108fc565b80341461139a5760405162461bcd60e51b81526004016108fc9061361e565b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106113d0576113d061388b565b6001600160a01b039092166020928302919091018201526040805184815233928101929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a161142a81612173565b9250505090565b60006001600160a01b03821661149c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108fc565b506001600160a01b031660009081526068602052604090205490565b336114c161184c565b6001600160a01b0316146114e75760405162461bcd60e51b81526004016108fc906135e9565b6114f160006126fc565b565b60c9805461150090613809565b80601f016020809104026020016040519081016040528092919081815260200182805461152c90613809565b80156115795780601f1061154e57610100808354040283529160200191611579565b820191906000526020600020905b81548152906001019060200180831161155c57829003601f168201915b505050505081565b3361158a61184c565b6001600160a01b0316146115b05760405162461bcd60e51b81526004016108fc906135e9565b60d781905560d480546001919060ff19168280610ae6565b336115d161184c565b6001600160a01b0316146115f75760405162461bcd60e51b81526004016108fc906135e9565b60005b85811015610f6d578282828181106116145761161461388b565b90506020020160208101906116299190613010565b60d2600087878581811061163f5761163f61388b565b90506020020160208101906116549190612cbf565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061168681613844565b9150506115fa565b61169781611fe3565b6116b35760405162461bcd60e51b81526004016108fc906135a1565b6116bc33610b6d565b6116d85760405162461bcd60e51b81526004016108fc906135c3565b6005600082815260cf6020526040902060069081015460ff169081111561170157611701613875565b1461171e5760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf602052604090206006908101805460ff1916600183611023565b61174881611fe3565b6117645760405162461bcd60e51b81526004016108fc906135a1565b61176d33610b6d565b6117895760405162461bcd60e51b81526004016108fc906135c3565b6003600082815260cf6020526040902060069081015460ff16908111156117b2576117b2613875565b146117cf5760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf602052604090206007015434146117ff5760405162461bcd60e51b81526004016108fc9061361e565b600081815260cf6020908152604091829020600601805460ff1916600417905590518281527f9bd6b4fd288008520fd788a93304e5688a401aea817ea8140ecf1fb8648f31919101610b5d565b6000610a616097546001600160a01b031690565b60606066805461081190613809565b61187a33838361274e565b5050565b600061188861206e565b6118a45760405162461bcd60e51b81526004016108fc90613643565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106118da576118da61388b565b60200260200101906001600160a01b031690816001600160a01b03168152505061190381612173565b9392505050565b611914338361229a565b6119305760405162461bcd60e51b81526004016108fc9061367a565b61193c84848484612819565b50505050565b606061194d82611fe3565b6119695760405162461bcd60e51b81526004016108fc906135a1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06119a0610802565b60c960cd60cb8760d0546040518763ffffffff1660e01b81526004016119cb969594939291906134b5565b60006040518083038186803b1580156119e357600080fd5b505afa1580156119f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fc9190810190613086565b611a2881611fe3565b611a445760405162461bcd60e51b81526004016108fc906135a1565b611a4d33610b6d565b611a695760405162461bcd60e51b81526004016108fc906135c3565b6001600082815260cf6020526040902060069081015460ff1690811115611a9257611a92613875565b14611aaf5760405162461bcd60e51b81526004016108fc9061356a565b600081815260cf60205260409020600601805460ff191660021790557fc290e40808ef06721539ad0d926f8d5f53d2dd6d5e28334308a012676f8674168133604080519283526001600160a01b03909116602083015201610b5d565b33611b1461184c565b6001600160a01b031614611b3a5760405162461bcd60e51b81526004016108fc906135e9565b60d881905560d480546002919060ff1916600183610ae6565b33611b5c61184c565b6001600160a01b031614611b825760405162461bcd60e51b81526004016108fc906135e9565b8151611b959060cd906020850190612b58565b508051610a2d9060cb906020840190612b58565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b33611be061184c565b6001600160a01b031614611c065760405162461bcd60e51b81526004016108fc906135e9565b611c0f82611fe3565b611c2b5760405162461bcd60e51b81526004016108fc906135a1565b6002600083815260cf6020526040902060069081015460ff1690811115611c5457611c54613875565b14611c8f5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064016108fc565b600082815260cf602090815260409182902060068101805460ff1916600317905560070183905590518381527f316b408b8cf323e8f20ef7a8c267eedc89bef19ca5db7fc30be938e55bf068f9910160405180910390a15050565b33611cf361184c565b6001600160a01b031614611d195760405162461bcd60e51b81526004016108fc906135e9565b6001600160a01b038116611d7e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108fc565b611127816126fc565b600054610100900460ff16611da25760005460ff1615611da6565b303b155b611e095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108fc565b600054610100900460ff16158015611e2b576000805461ffff19166101011790555b611e358b8b61284c565b611e3d61287d565b611e468d611cea565b8851611e599060c99060208c0190612b58565b508751611e6d9060cb9060208b0190612b58565b5060cc8790558551611e869060cd906020890190612b58565b5060ce85905560ca80546001600160a01b0319166001600160a01b038e1617905560d084905560d583905560d682905560d1805460010190558015611ed1576000805461ff00191690555b50505050505050505050505050565b600081815260cf6020526040812060058101546004909101805460609392908290611f0a90613809565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3690613809565b8015611f835780601f10611f5857610100808354040283529160200191611f83565b820191906000526020600020905b815481529060010190602001808311611f6657829003601f168201915b5050505050915091509150915091565b60006001600160e01b031982166380ac58cd60e01b1480611fc457506001600160e01b03198216635b5e139f60e01b145b806107fc57506301ffc9a760e01b6001600160e01b03198316146107fc565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612035826112b8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600360d45460ff16600381111561208957612089613875565b14156120955750600190565b600260d45460ff1660038111156120ae576120ae613875565b14156120d25733600090815260d2602052604090205460ff16156120d25750600190565b600160d45460ff1660038111156120eb576120eb613875565b148061210d5750600260d45460ff16600381111561210b5761210b613875565b145b156121305733600090815260d3602052604090205460ff16156121305750600190565b600060d45460ff16600381111561214957612149613875565b141561216d573361215861184c565b6001600160a01b0316141561216d5750600190565b50600090565b60008061217f60d15490565b905060006001845183612192919061376d565b61219c91906137c6565b905060d054600014806121b1575060d0548111155b6121e85760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b60448201526064016108fc565b806121f260d15490565b1161228e57612235848361220560d15490565b61220f91906137c6565b8151811061221f5761221f61388b565b602002602001015161223060d15490565b6128ac565b600160cf600061224460d15490565b815260200190815260200160002060060160006101000a81548160ff0219169083600681111561227657612276613875565b021790555061228960d180546001019055565b6121e8565b60d1545b949350505050565b60006122a582611fe3565b6123065760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108fc565b6000612311836112b8565b9050806001600160a01b0316846001600160a01b0316148061234c5750836001600160a01b031661234184610894565b6001600160a01b0316145b8061229257506122928185611ba9565b826001600160a01b031661236f826112b8565b6001600160a01b0316146123d35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108fc565b6001600160a01b0382166124355760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108fc565b612440600082612000565b6001600160a01b03831660009081526068602052604081208054600192906124699084906137c6565b90915550506001600160a01b038216600090815260686020526040812080546001929061249790849061376d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206138ce83398151915291a4505050565b804710156125365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108fc565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612583576040519150601f19603f3d011682016040523d82523d6000602084013e612588565b606091505b5050905080610a2d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108fc565b600061260a826112b8565b9050612617600083612000565b6001600160a01b03811660009081526068602052604081208054600192906126409084906137c6565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206138ce833981519152908390a45050565b6000600160d45460ff1660038111156126a3576126a3613875565b14156126b0575060d75490565b600260d45460ff1660038111156126c9576126c9613875565b14156126d6575060d85490565b600360d45460ff1660038111156126ef576126ef613875565b141561216d575060d95490565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156127ac5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016108fc565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61282484848461235c565b612830848484846129cd565b61193c5760405162461bcd60e51b81526004016108fc90613518565b600054610100900460ff166128735760405162461bcd60e51b81526004016108fc906136cb565b61187a8282612ada565b600054610100900460ff166128a45760405162461bcd60e51b81526004016108fc906136cb565b6114f1612b28565b6001600160a01b0382166129025760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108fc565b61290b81611fe3565b156129585760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108fc565b6001600160a01b038216600090815260686020526040812080546001929061298190849061376d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206138ce833981519152908290a45050565b60006001600160a01b0384163b15612acf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612a119033908990889088906004016133de565b602060405180830381600087803b158015612a2b57600080fd5b505af1925050508015612a5b575060408051601f3d908101601f19168201909252612a5891810190613048565b60015b612ab5573d808015612a89576040519150601f19603f3d011682016040523d82523d6000602084013e612a8e565b606091505b508051612aad5760405162461bcd60e51b81526004016108fc90613518565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612292565b506001949350505050565b600054610100900460ff16612b015760405162461bcd60e51b81526004016108fc906136cb565b8151612b14906065906020850190612b58565b508051610a2d906066906020840190612b58565b600054610100900460ff16612b4f5760405162461bcd60e51b81526004016108fc906136cb565b6114f1336126fc565b828054612b6490613809565b90600052602060002090601f016020900481019282612b865760008555612bcc565b82601f10612b9f57805160ff1916838001178555612bcc565b82800160010185558215612bcc579182015b82811115612bcc578251825591602001919060010190612bb1565b50612bd8929150612bdc565b5090565b5b80821115612bd85760008155600101612bdd565b6000612c04612bff84613746565b613716565b9050828152838383011115612c1857600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114612c4657600080fd5b919050565b60008083601f840112612c5d57600080fd5b5081356001600160401b03811115612c7457600080fd5b6020830191508360208260051b8501011115610d2857600080fd5b80358015158114612c4657600080fd5b600082601f830112612cb057600080fd5b61190383833560208501612bf1565b600060208284031215612cd157600080fd5b61190382612c2f565b60008060408385031215612ced57600080fd5b612cf683612c2f565b9150612d0460208401612c2f565b90509250929050565b6000806000806000806000806000806000806101808d8f031215612d3057600080fd5b612d398d612c2f565b9b50612d4760208e01612c2f565b9a506001600160401b0360408e01351115612d6157600080fd5b612d718e60408f01358f01612c9f565b99506001600160401b0360608e01351115612d8b57600080fd5b612d9b8e60608f01358f01612c9f565b98506001600160401b0360808e01351115612db557600080fd5b612dc58e60808f01358f01612c9f565b97506001600160401b0360a08e01351115612ddf57600080fd5b612def8e60a08f01358f01612c9f565b965060c08d013595506001600160401b0360e08e01351115612e1057600080fd5b612e208e60e08f01358f01612c9f565b94506101008d013593506101208d013592506101408d013591506101608d013590509295989b509295989b509295989b565b600080600060608486031215612e6757600080fd5b612e7084612c2f565b9250612e7e60208501612c2f565b9150604084013590509250925092565b60008060008060808587031215612ea457600080fd5b612ead85612c2f565b9350612ebb60208601612c2f565b92506040850135915060608501356001600160401b03811115612edd57600080fd5b8501601f81018713612eee57600080fd5b612efd87823560208401612bf1565b91505092959194509250565b60008060408385031215612f1c57600080fd5b612f2583612c2f565b9150612d0460208401612c8f565b60008060408385031215612f4657600080fd5b612f4f83612c2f565b946020939093013593505050565b60006020808385031215612f7057600080fd5b82356001600160401b0380821115612f8757600080fd5b818501915085601f830112612f9b57600080fd5b813581811115612fad57612fad6138a1565b8060051b9150612fbe848301613716565b8181528481019084860184860187018a1015612fd957600080fd5b600095505b8386101561300357612fef81612c2f565b835260019590950194918601918601612fde565b5098975050505050505050565b60006020828403121561302257600080fd5b61190382612c8f565b60006020828403121561303d57600080fd5b8135611903816138b7565b60006020828403121561305a57600080fd5b8151611903816138b7565b60006020828403121561307757600080fd5b81356004811061190357600080fd5b60006020828403121561309857600080fd5b81516001600160401b038111156130ae57600080fd5b8201601f810184136130bf57600080fd5b80516130cd612bff82613746565b8181528560208385010111156130e257600080fd5b6130f38260208301602086016137dd565b95945050505050565b6000806040838503121561310f57600080fd5b82356001600160401b038082111561312657600080fd5b61313286838701612c9f565b9350602085013591508082111561314857600080fd5b5061315585828601612c9f565b9150509250929050565b60006020828403121561317157600080fd5b5035919050565b60008060008060006060868803121561319057600080fd5b8535945060208601356001600160401b03808211156131ae57600080fd5b6131ba89838a01612c4b565b909650945060408801359150808211156131d357600080fd5b506131e088828901612c4b565b969995985093965092949392505050565b600080600080600080600080610100898b03121561320e57600080fd5b8835975060208901356001600160401b038082111561322c57600080fd5b6132388c838d01612c9f565b985060408b013591508082111561324e57600080fd5b61325a8c838d01612c9f565b975060608b0135965060808b013591508082111561327757600080fd5b6132838c838d01612c9f565b955060a08b0135945060c08b01359150808211156132a057600080fd5b506132ad8b828c01612c9f565b92505060e089013590509295985092959890939650565b600080604083850312156132d757600080fd5b50508035926020909101359150565b6000806000606084860312156132fb57600080fd5b505081359360208301359350604090920135919050565b6000815180845261332a8160208601602086016137dd565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061335857607f831692505b602080841082141561337a57634e487b7160e01b600052602260045260246000fd5b8388526020880182801561339557600181146133a6576133d1565b60ff198716825282820197506133d1565b60008981526020902060005b878110156133cb578154848201529086019084016133b2565b83019850505b5050505050505092915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061341190830184613312565b9695505050505050565b602081016004831061343d57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006119036020830184613312565b6040815260006134696040830185613312565b90508260208301529392505050565b60808152600061348b6080830187613312565b85602084015282810360408401526134a38186613312565b91505082606083015295945050505050565b60c0815260006134c860c0830189613312565b82810360208401526134da818961333e565b905082810360408401526134ee818861333e565b90508281036060840152613502818761333e565b6080840195909552505060a00152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f596f752063757272656e746c792063616e206e6f742072656465656d00000000604082015260600190565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600b908201526a57726f6e6720707269636560a81b604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f191681016001600160401b038111828210171561373e5761373e6138a1565b604052919050565b60006001600160401b0382111561375f5761375f6138a1565b50601f01601f191660200190565b600082198211156137805761378061385f565b500190565b6000826137a257634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156137c1576137c161385f565b500290565b6000828210156137d8576137d861385f565b500390565b60005b838110156137f85781810151838201526020016137e0565b8381111561193c5750506000910152565b600181811c9082168061381d57607f821691505b6020821081141561383e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156138585761385861385f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461112757600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b3f88a32fcaa04c9b51a1bfa13a8e70134d4a43a5b576507ac8530823320170164736f6c63430008060033",
  "devdoc": {
    "author": "iain nash Repository: https://github.com/ourzora/nft-editions",
    "details": "This allows creators to mint a unique serial edition of the same media within a custom contract",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn User burn function for token id "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getConditionReport(uint256)": {
        "details": "Get URIs for the condition report",
        "returns": {
          "_0": "_imageUrl, _imageHash"
        }
      },
      "getURIs()": {
        "details": "Get URIs for edition NFT",
        "returns": {
          "_0": "_imageUrl, _imageHash, _animationUrl, _animationHash"
        }
      },
      "initialize(address,address,string,string,string,string,bytes32,string,bytes32,uint256,uint256,uint256)": {
        "details": "Function to create a new edition. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the edition. This can be re-assigned or updated later",
        "params": {
          "_description": "Description of edition, used in the description field of the NFT",
          "_editionSize": "Number of editions that can be minted in total. If 0, unlimited editions can be minted.",
          "_name": "Name of edition, used in the title as \"$NAME NUMBER/TOTAL\"",
          "_owner": "User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.",
          "_symbol": "Symbol of the new token contract",
          "animationHash": "The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.",
          "animationUrl": "Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs",
          "artist": "User that created the edition",
          "imageHash": "SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.",
          "imageUrl": "Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.",
          "royaltyBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.",
          "splitBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.        "
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintEdition(address)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "to": "address to send the newly minted edition to"
        }
      },
      "mintEditions(address[])": {
        "details": "This mints multiple editions to the given list of addresses.",
        "params": {
          "recipients": "list of addresses to send the newly minted editions to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchase()": {
        "details": "This allows the user to purchase an edition at the given price in the contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAllowedMinter(uint8)": {
        "details": "Sets the types of users who is allowed to mint.",
        "params": {
          "minters": "WhoCanMint enum of minter types"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApprovedMinters(uint256,address[],bool[])": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setApprovedVIPMinters(uint256,address[],bool[])": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setMembersSalePrice(uint256)": {
        "details": "This sets the members ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "setSalePrice(uint256)": {
        "details": "This sets a simple ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "setSalePrices(uint256,uint256,uint256)": {
        "details": "This sets the members ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "generalSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.                                              ",
          "membersSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.",
          "vipSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "setVIPSalePrice(uint256)": {
        "details": "This sets the VIP ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the edition"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEditionURLs(string,string)": {
        "details": "Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated."
      },
      "withdraw()": {
        "details": "This withdraws ETH from the contract to the contract owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "numberCanMint()": {
        "notice": "Returns the number of editions allowed to mint (max_uint256 when open edition)"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      }
    },
    "notice": "This is a smart contract for handling dynamic contract minting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 229,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 232,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1632,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1953,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 325,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 327,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 331,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 335,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 339,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 345,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1186,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2506,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "description",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 2508,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_artist",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 2510,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_animationUrl",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 2512,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_animationHash",
        "offset": 0,
        "slot": "204",
        "type": "t_bytes32"
      },
      {
        "astId": 2514,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_imageUrl",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 2516,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_imageHash",
        "offset": 0,
        "slot": "206",
        "type": "t_bytes32"
      },
      {
        "astId": 2521,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_perTokenMetadata",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_struct(PerToken)2495_storage)"
      },
      {
        "astId": 2523,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "editionSize",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 2526,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_atEditionId",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(Counter)1639_storage"
      },
      {
        "astId": 2530,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_allowedMinters",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2534,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_vipAllowedMinters",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2537,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_whoCanMint",
        "offset": 0,
        "slot": "212",
        "type": "t_enum(WhoCanMint)2424"
      },
      {
        "astId": 2540,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_pricing",
        "offset": 0,
        "slot": "213",
        "type": "t_struct(Pricing)2504_storage"
      },
      {
        "astId": 2542,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "salePrice",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ExpandedNFTStates)2432": {
        "encoding": "inplace",
        "label": "enum SingleEditionMintable.ExpandedNFTStates",
        "numberOfBytes": "1"
      },
      "t_enum(WhoCanMint)2424": {
        "encoding": "inplace",
        "label": "enum SingleEditionMintable.WhoCanMint",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(PerToken)2495_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SingleEditionMintable.PerToken)",
        "numberOfBytes": "32",
        "value": "t_struct(PerToken)2495_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1639_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1638,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PerToken)2495_storage": {
        "encoding": "inplace",
        "label": "struct SingleEditionMintable.PerToken",
        "members": [
          {
            "astId": 2479,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "redeemedAnimationUrl",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2481,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "redeemedAnimationHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2483,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "redeemedImageUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2485,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "redeemedImageHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2487,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "conditionReportUrl",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2489,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "conditionReportHash",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 2492,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "editionState",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ExpandedNFTStates)2432"
          },
          {
            "astId": 2494,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "editionFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Pricing)2504_storage": {
        "encoding": "inplace",
        "label": "struct SingleEditionMintable.Pricing",
        "members": [
          {
            "astId": 2497,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "royaltyBPS",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2499,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "splitBPS",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2501,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "vipSalePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2503,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "membersSalePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}