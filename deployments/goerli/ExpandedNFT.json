{
  "address": "0x59c464Be60EecdB4d4959f8c728bd10663A4C521",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeliveryAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferTermsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ProductionComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RedeemAborted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RedeemStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ExpandedNFT.WhoCanMint",
          "name": "minters",
          "type": "uint8"
        }
      ],
      "name": "WhoCanMintChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "abortRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptDelivery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "acceptOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedMinter",
      "outputs": [
        {
          "internalType": "enum ExpandedNFT.WhoCanMint",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAnimationHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAnimationUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArtistWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getConditionReportHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getConditionReportUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneralMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getImageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getImageUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRedeemedAnimationHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRedeemedAnimationUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRedeemedImageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRedeemedImageUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSplitBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVIPMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVIPSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhoCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "artistWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dropSize",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_description",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "animationUrl",
          "type": "string[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "animationHash",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "imageUrl",
          "type": "string[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "imageHash",
          "type": "bytes32[]"
        }
      ],
      "name": "loadMetadataChunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataloaded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "conditionReportUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "conditionReportHash",
          "type": "bytes32"
        }
      ],
      "name": "productionComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rejectOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        }
      ],
      "name": "reserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ExpandedNFT.WhoCanMint",
          "name": "minters",
          "type": "uint8"
        }
      ],
      "name": "setAllowedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "minter",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "allowed",
          "type": "bool[]"
        }
      ],
      "name": "setApprovedMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "minter",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "allowed",
          "type": "bool[]"
        }
      ],
      "name": "setApprovedVIPMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setArtistWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setMembersSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_splitBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vipSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_membersSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generalSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vipMintLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_membersMintLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generalMintLimit",
          "type": "uint256"
        }
      ],
      "name": "setPricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vipSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "membersSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generalSalePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setVIPSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        }
      ],
      "name": "updateEditionURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3beb84b29164ec692a210693a04e3da3cf16728a417b4a97aeba8694c31ae0c6",
  "receipt": {
    "to": null,
    "from": "0xaD1fcD83DE77518d3D1b769F22B0A169eD55A919",
    "contractAddress": "0x59c464Be60EecdB4d4959f8c728bd10663A4C521",
    "transactionIndex": 36,
    "gasUsed": "4399211",
    "logsBloom": "0x
    "blockHash": "0x2974b7b91f132a8cb042527cae4650089a23941b1d9c85745efe4c0405d5f5f8",
    "transactionHash": "0x3beb84b29164ec692a210693a04e3da3cf16728a417b4a97aeba8694c31ae0c6",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 8304937,
        "transactionHash": "0x3beb84b29164ec692a210693a04e3da3cf16728a417b4a97aeba8694c31ae0c6",
        "address": "0x59c464Be60EecdB4d4959f8c728bd10663A4C521",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 83,
        "blockHash": "0x2974b7b91f132a8cb042527cae4650089a23941b1d9c85745efe4c0405d5f5f8"
      }
    ],
    "blockNumber": 8304937,
    "cumulativeGasUsed": "9407052",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x56DeD20F5fa9E878531BfB57637703eC58cF9DB6"
  ],
  "numDeployments": 2,
  "solcInputHash": "48582f4a917a415c167e61945d4804b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeliveryAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferTermsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ProductionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RedeemAborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RedeemStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ExpandedNFT.WhoCanMint\",\"name\":\"minters\",\"type\":\"uint8\"}],\"name\":\"WhoCanMintChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"abortRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptDelivery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"acceptOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedMinter\",\"outputs\":[{\"internalType\":\"enum ExpandedNFT.WhoCanMint\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAnimationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAnimationUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtistWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getConditionReportHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getConditionReportUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneralMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getImageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getImageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRedeemedAnimationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRedeemedAnimationUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRedeemedImageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRedeemedImageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplitBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVIPMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVIPSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhoCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artistWallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dropSize\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_description\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"animationUrl\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"animationHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"imageUrl\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"imageHash\",\"type\":\"bytes32[]\"}],\"name\":\"loadMetadataChunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataloaded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"conditionReportUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"conditionReportHash\",\"type\":\"bytes32\"}],\"name\":\"productionComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rejectOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ExpandedNFT.WhoCanMint\",\"name\":\"minters\",\"type\":\"uint8\"}],\"name\":\"setAllowedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"minter\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"allowed\",\"type\":\"bool[]\"}],\"name\":\"setApprovedMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"minter\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"allowed\",\"type\":\"bool[]\"}],\"name\":\"setApprovedVIPMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setArtistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setMembersSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_splitBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vipSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_membersSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generalSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vipMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_membersMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generalMintLimit\",\"type\":\"uint256\"}],\"name\":\"setPricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vipSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membersSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generalSalePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setVIPSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"}],\"name\":\"updateEditionURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zien Repository: https://github.com/joinzien/expanded-nft\",\"details\":\"This allows creators to mint a unique serial drop of an expanded NFT within a custom contract\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn User burn function for token id \"}},\"getAllowedMinter()\":{\"details\":\"Sets the types of users who is allowed to mint.\"},\"getAnimationHash(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getAnimationUrl(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getConditionReportHash(uint256)\":{\"details\":\"Get URIs for the condition report\",\"returns\":{\"_0\":\"conditionReportUrl, conditionReportHash\"}},\"getConditionReportUrl(uint256)\":{\"details\":\"Get URIs for the condition report\",\"returns\":{\"_0\":\"conditionReportUrl, conditionReportHash\"}},\"getDescription(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getGeneralMintLimit()\":{\"details\":\"returns the general mint limit\"},\"getImageHash(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getImageUrl(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getMembersMintLimit()\":{\"details\":\"returns the member mint limit\"},\"getMembersSalePrice()\":{\"details\":\"returns the member sale price\"},\"getRedeemedAnimationHash(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getRedeemedAnimationUrl(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getRedeemedImageHash(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getRedeemedImageUrl(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"getRoyaltyBPS()\":{\"details\":\"returns the royalty BPS\"},\"getSplitBPS()\":{\"details\":\"returns the split BPS\"},\"getURIs(uint256)\":{\"details\":\"Get URIs for edition NFT\",\"returns\":{\"_0\":\"_imageUrl, _imageHash, _animationUrl, _animationHash\"}},\"getVIPMintLimit()\":{\"details\":\"returns the VIP mint limit\"},\"getVIPSalePrice()\":{\"details\":\"returns the VIP sale price\"},\"getWhoCanMint()\":{\"details\":\"returns who can mint\"},\"initialize(address,address,string,string,uint256)\":{\"details\":\"Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later\",\"params\":{\"_dropSize\":\"Number of editions that can be minted in total.    \",\"_name\":\"Name of drop, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\",\"_owner\":\"wallet addres for the user that owns and can mint the drop, gets royalty and sales payouts and can update the base url if needed.\",\"_symbol\":\"Symbol of the new token contract\",\"artistWallet\":\"wallet address for thr User that created the drop\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"loadMetadataChunk(uint256,uint256,string[],string[],bytes32[],string[],bytes32[])\":{\"details\":\"Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later\",\"params\":{\"_description\":\"How many rows of data to load\",\"animationHash\":\"The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\",\"animationUrl\":\"Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\",\"count\":\"Description of the edition, used in the description field of the NFT\",\"imageHash\":\"SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\",\"imageUrl\":\"Image URL of the the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a drop to render the NFT.\",\"startIndex\":\"The first ID index to write the data\"}},\"mintEdition(address)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"to\":\"address to send the newly minted edition to\"}},\"mintEditions(address[])\":{\"details\":\"This mints multiple editions to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses to send the newly minted editions to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchase()\":{\"details\":\"This allows the user to purchase an edition at the given price in the contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserve(address[],uint256[])\":{\"details\":\"Set various pricing related values\",\"params\":{\"tokenIDs\":\"A list of tokenId to reserve                                                                           \",\"wallets\":\"A list of wallets\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAllowedMinter(uint8)\":{\"details\":\"Sets the types of users who is allowed to mint.\",\"params\":{\"minters\":\"WhoCanMint enum of minter types\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApprovedMinters(uint256,address[],bool[])\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setApprovedVIPMinters(uint256,address[],bool[])\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setMembersSalePrice(uint256)\":{\"details\":\"This sets the members ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"setPricing(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Set various pricing related values\",\"params\":{\"_generalMintLimit\":\"Mint limit for the general public                                                                                 \",\"_generalSalePrice\":\"SalePrice for the general public     \",\"_membersMintLimit\":\"Mint limit for Members  \",\"_membersSalePrice\":\"SalePrice for Members  \",\"_royaltyBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.\",\"_splitBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty. \",\"_vipMintLimit\":\"Mint limit for VIPs\",\"_vipSalePrice\":\"Sale price for VIPs\"}},\"setSalePrice(uint256)\":{\"details\":\"This sets a simple ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"setSalePrices(uint256,uint256,uint256)\":{\"details\":\"This sets the members ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"generalSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.                                              \",\"membersSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\",\"vipSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"setVIPSalePrice(uint256)\":{\"details\":\"This sets the VIP ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the drop\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEditionURLs(uint256,string,string)\":{\"details\":\"Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\"},\"withdraw()\":{\"details\":\"This withdraws ETH from the contract to the contract owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getArtistWallet()\":{\"notice\":\"return the artists wallet address\"},\"getPaymentToken()\":{\"notice\":\"return the payment tokens address\"},\"numberCanMint()\":{\"notice\":\"Returns the number of editions allowed to mint\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"},\"setArtistWallet(address)\":{\"notice\":\"set the artists wallet address\"},\"setPaymentToken(address)\":{\"notice\":\"set a new payment token address\"}},\"notice\":\"This is a smart contract for handling dynamic contract minting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExpandedNFT.sol\":\"ExpandedNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ExpandedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n    ExpandedNFTs\\n\\n */\\n\\npragma solidity ^0.8.15;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {SharedNFTLogic} from \\\"./SharedNFTLogic.sol\\\";\\nimport {IExpandedNFT} from \\\"./IExpandedNFT.sol\\\";\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    @dev This allows creators to mint a unique serial drop of an expanded NFT within a custom contract\\n    @author Zien\\n    Repository: https://github.com/joinzien/expanded-nft\\n*/\\ncontract ExpandedNFT is\\n    ERC721Upgradeable,\\n    IExpandedNFT,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    enum WhoCanMint{ ONLY_OWNER, VIPS, MEMBERS, ANYONE }\\n\\n    enum ExpandedNFTStates{ UNMINTED, MINTED, REDEEM_STARTED, SET_OFFER_TERMS, ACCEPTED_OFFER, PRODUCTION_COMPLETE, REDEEMED }\\n    \\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n    event WhoCanMintChanged(WhoCanMint minters);\\n\\n    // State change events\\n    event RedeemStarted(uint256 tokenId, address owner);\\n    event RedeemAborted(uint256 tokenId, address owner);    \\n    event OfferTermsSet(uint256 tokenId);\\n    event OfferAccepted(uint256 tokenId);\\n    event OfferRejected(uint256 tokenId);\\n    event ProductionComplete(uint256 tokenId);\\n    event DeliveryAccepted(uint256 tokenId);\\n\\n    struct PerToken { \\n        // Hashmap of the Edition ID to the current \\n        ExpandedNFTStates editionState;\\n\\n        // Redemption price\\n        uint256 editionFee; \\n\\n        // Edition description\\n        string description;\\n\\n        bool metadataLoaded;\\n\\n        // Minted\\n\\n        // animation_url field in the metadata\\n        string animationUrl;\\n        // Hash for the associated animation\\n        bytes32 animationHash;\\n        // Image in the metadata\\n        string imageUrl;\\n        // Hash for the associated image\\n        bytes32 imageHash;\\n\\n        // Redeemed\\n\\n        // animation_url field in the metadata\\n        string redeemedAnimationUrl;\\n        // Hash for the associated animation\\n        bytes32 redeemedAnimationHash;\\n        // Image in the metadata\\n        string redeemedImageUrl;\\n        // Hash for the associated image\\n        bytes32 redeemedImageHash;\\n        // Condition report in the metadata\\n        string conditionReportUrl;\\n        // Hash for the condition report\\n        bytes32 conditionReportHash;\\n    }\\n\\n    struct Pricing { \\n        // Royalty amount in bps\\n        uint256 royaltyBPS;\\n\\n        // Split amount to the platforms. the artist in bps\\n        uint256 splitBPS;\\n\\n        // Price for VIP sales\\n        uint256 vipSalePrice;\\n\\n        // Price for member sales\\n        uint256 membersSalePrice;   \\n\\n        // Price for VIP sales\\n        uint256 vipMintLimit;\\n\\n        // Price for member sales\\n        uint256 membersMintLimit;\\n\\n        // Price for general sales\\n        uint256 generalMintLimit;   \\n\\n        // Addresses allowed to mint edition\\n        mapping(address => bool) allowedMinters;\\n        // VIP Addresses allowed to mint edition\\n        mapping(address => bool) vipAllowedMinters;\\n\\n        // Who can currently mint\\n        WhoCanMint whoCanMint;\\n\\n        // Mint counts for each address\\n        mapping(address => uint256) mintCounts;                               \\n    }\\n\\n    // metadata\\n    string public description;\\n\\n    // Artists wallet address\\n    address private _artistWallet;\\n\\n    // Per Token data\\n    mapping(uint256 => PerToken) private _perTokenMetadata;\\n\\n    // Total size of the drop that can be minted\\n    uint256 public dropSize;\\n\\n    uint256 private _loadedMetadata;\\n\\n    // reservation list\\n    uint256 private _reserveCount;\\n    mapping(uint256 => address) private _reserveAddress;\\n    mapping(uint256 => uint256) private _reserveTokenId;\\n\\n    mapping(uint256 => bool) private _tokenClaimed; \\n    uint256 private _claimCount; \\n    uint256 private _currentIndex;\\n\\n    Pricing private _pricing;\\n\\n    // Price for general sales\\n    uint256 public salePrice;\\n\\n    // ERC20 interface for the payment token\\n    IERC20Upgradeable private _paymentTokenERC20;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable _sharedNFTLogic;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic sharedNFTLogic) {\\n        _sharedNFTLogic = sharedNFTLogic;\\n        _pricing.whoCanMint = WhoCanMint.ONLY_OWNER;\\n\\n        _disableInitializers();\\n    }\\n\\n    /**\\n      @param _owner wallet addres for the user that owns and can mint the drop, gets royalty and sales payouts and can update the base url if needed.\\n      @param artistWallet wallet address for thr User that created the drop\\n      @param _name Name of drop, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _dropSize Number of editions that can be minted in total.    \\n      @dev Function to create a new drop. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the drop.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        address artistWallet,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _dropSize\\n    ) public initializer {\\n        require(_dropSize > 0, \\\"Drop size must be > 0\\\");\\n\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n\\n        _artistWallet = artistWallet;\\n        dropSize = _dropSize;\\n\\n        // Set edition id start to be 1 not 0\\n        _claimCount = 0; \\n        _currentIndex = 1;\\n\\n        // Set the metadata\\n        description = _name;\\n        _loadedMetadata = 0; \\n    }\\n\\n    /**\\n      @param startIndex The first ID index to write the data\\n      @param _description How many rows of data to load\\n      @param count Description of the edition, used in the description field of the NFT\\n      @param animationUrl Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\\n      @param animationHash The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\\n      @param imageUrl Image URL of the the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a drop to render the NFT.\\n      @param imageHash SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\\n      @dev Function to create a new drop. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the drop.\\n           This can be re-assigned or updated later\\n     */\\n    function loadMetadataChunk(\\n        uint256 startIndex,\\n        uint256 count,\\n        string[] memory _description,\\n        string[] memory animationUrl,\\n        bytes32[] memory animationHash,\\n        string[] memory imageUrl,\\n        bytes32[] memory imageHash\\n\\n    ) public {\\n        require(startIndex > 0, \\\"StartIndex > 0\\\");\\n        require(startIndex + count <= dropSize + 1, \\\"Data large than drop size\\\");\\n\\n        require(_description.length == count, \\\"Data size mismatch\\\");\\n        require(animationUrl.length == count, \\\"Data size mismatch\\\");\\n        require(animationHash.length == count, \\\"Data size mismatch\\\");\\n        require(imageUrl.length == count, \\\"Data size mismatch\\\");\\n        require(imageHash.length == count, \\\"Data size mismatch\\\");\\n\\n        for (uint i = 0; i < count; i++) {\\n            uint index =  startIndex + i;\\n            \\n            _perTokenMetadata[index].description = _description[i];\\n            _perTokenMetadata[index].imageUrl = imageUrl[i];\\n            _perTokenMetadata[index].imageHash = imageHash[i];\\n            _perTokenMetadata[index].animationUrl = animationUrl[i];\\n            _perTokenMetadata[index].animationHash = animationHash[i];\\n\\n            if (_perTokenMetadata[index].metadataLoaded != true) {\\n                _perTokenMetadata[index].metadataLoaded = true;\\n               _loadedMetadata++; \\n            }\\n        }\\n    }\\n\\n    function metadataloaded() public view returns (bool){\\n        return (_loadedMetadata >= dropSize);\\n    }\\n\\n    /// @dev returns the number of minted tokens within the drop\\n    function totalSupply() public view returns (uint256) {\\n        return _claimCount;\\n    }\\n\\n    /// @dev returns the royalty BPS\\n    function getRoyaltyBPS() public view returns (uint256) {\\n        return _pricing.royaltyBPS;\\n    }\\n\\n    /// @dev returns the split BPS\\n    function getSplitBPS() public view returns (uint256) {\\n        return _pricing.splitBPS;\\n    }\\n\\n    /// @dev returns the VIP sale price\\n    function getVIPSalePrice() public view returns (uint256) {\\n        return _pricing.vipSalePrice;\\n    }\\n\\n    /// @dev returns the member sale price\\n    function getMembersSalePrice() public view returns (uint256) {\\n        return _pricing.membersSalePrice;\\n    }\\n\\n    /// @dev returns the VIP mint limit\\n    function getVIPMintLimit() public view returns (uint256) {\\n        return _pricing.vipMintLimit;\\n    }\\n\\n    /// @dev returns the member mint limit\\n    function getMembersMintLimit() public view returns (uint256) {\\n        return _pricing.membersMintLimit;\\n    }\\n\\n    /// @dev returns the general mint limit\\n    function getGeneralMintLimit() public view returns (uint256) {\\n        return salePrice;\\n    }\\n\\n    /// @dev returns who can mint\\n    function getWhoCanMint() public view returns (uint256) {\\n        return uint256(_pricing.whoCanMint);\\n    }\\n\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through IExpandedNFT interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase an edition\\n           at the given price in the contract.\\n     */\\n\\n    function purchase() external payable returns (uint256) {\\n        uint256 currentPrice = _currentSalesPrice();\\n        emit EditionSold(currentPrice, msg.sender);\\n\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = msg.sender;\\n\\n        return _mintEditionsBody(toMint);  \\n    }\\n\\n     /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to) external payable override returns (uint256) {\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n\\n        return _mintEditionsBody(toMint);        \\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(address[] memory recipients)\\n        external payable override returns (uint256)\\n    {\\n        return _mintEditionsBody(recipients);\\n    }   \\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function _mintEditionsBody(address[] memory recipients)\\n        internal returns (uint256)\\n    {\\n        require(_loadedMetadata >= dropSize, \\\"Not all metadata loaded\\\");\\n\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n\\n        uint256 currentPrice = _currentSalesPrice();\\n        require(currentPrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == (currentPrice * recipients.length), \\\"Wrong price\\\");\\n\\n        require((_pricing.mintCounts[msg.sender] + recipients.length - 1) < _currentMintLimit(), \\\"Exceeded mint limit\\\");\\n\\n        require(_claimCount + recipients.length <= dropSize, \\\"Over drop size\\\");\\n\\n        if (_pricing.whoCanMint == WhoCanMint.VIPS) {\\n            return _vipMintEditions(recipients);\\n        }\\n\\n        return _mintEditions(recipients);\\n    }  \\n\\n    /**\\n      @dev Private function to mint without any access checks.\\n           Called by the public edition minting functions.\\n     */\\n    function _vipMintEditions(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        address currentMinter = msg.sender;\\n\\n        uint256 unclaimed = 0;\\n        uint256 firstUnclaimed = _reserveCount;\\n\\n        for (uint256 r = 0; r < _reserveCount; r++) {\\n            if (_reserveAddress[r] == currentMinter) {\\n                uint256 id = _reserveTokenId[r];\\n\\n                if (_tokenClaimed[id] != true) {\\n                    if (r < firstUnclaimed) {\\n                       firstUnclaimed = r; \\n                    }\\n\\n                    unclaimed++;\\n                }\\n            }\\n        }\\n\\n        require(unclaimed >= recipients.length, \\\"Can not mint all editions\\\");\\n\\n        uint256 idToMint = 1;\\n\\n        uint256 reservationCounter = firstUnclaimed;\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            while (_reserveAddress[reservationCounter] != currentMinter) {\\n                reservationCounter++;\\n            }  \\n\\n            idToMint = _reserveTokenId[reservationCounter];\\n\\n            _mint(recipients[i], idToMint);\\n\\n            _perTokenMetadata[idToMint].editionState = ExpandedNFTStates.MINTED;\\n            _tokenClaimed[idToMint] = true;\\n            _pricing.mintCounts[currentMinter]++;\\n            _claimCount++;\\n\\n            reservationCounter++;\\n        }\\n\\n        return idToMint;            \\n    }    \\n\\n    /**\\n      @dev Private function to mint without any access checks.\\n           Called by the public edition minting functions.\\n     */\\n    function _mintEditions(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        address currentMinter = msg.sender;\\n       \\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            while (_tokenClaimed[_currentIndex] == true) {\\n                _currentIndex++;\\n            }  \\n\\n            _mint(recipients[i], _currentIndex);\\n\\n            _perTokenMetadata[_currentIndex].editionState = ExpandedNFTStates.MINTED;\\n            _tokenClaimed[_currentIndex] = true;\\n            _pricing.mintCounts[currentMinter]++;\\n            _claimCount++;\\n        }\\n\\n        return _currentIndex;        \\n    }    \\n\\n    /**\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @param _splitBPS BPS of the royalty set on the contract. Can be 0 for no royalty. \\n      @param _vipSalePrice Sale price for VIPs\\n      @param _membersSalePrice SalePrice for Members  \\n      @param _generalSalePrice SalePrice for the general public     \\n      @param _vipMintLimit Mint limit for VIPs\\n      @param _membersMintLimit Mint limit for Members  \\n      @param _generalMintLimit Mint limit for the general public                                                                                 \\n      @dev Set various pricing related values\\n     */\\n    function setPricing (\\n        uint256 _royaltyBPS,\\n        uint256 _splitBPS,\\n        uint256 _vipSalePrice,\\n        uint256 _membersSalePrice,      \\n        uint256 _generalSalePrice,\\n        uint256 _vipMintLimit,\\n        uint256 _membersMintLimit,\\n        uint256 _generalMintLimit             \\n    ) external onlyOwner {  \\n        _pricing.royaltyBPS = _royaltyBPS;\\n        _pricing.splitBPS = _splitBPS;\\n\\n        _pricing.vipSalePrice = _vipSalePrice;\\n        _pricing.membersSalePrice = _membersSalePrice;\\n        salePrice = _generalSalePrice;\\n\\n        _pricing.vipMintLimit = _vipMintLimit;\\n        _pricing.membersMintLimit = _membersMintLimit;\\n        _pricing.generalMintLimit = _generalMintLimit;\\n\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @dev returns the current ETH sales price\\n           based on who can currently mint.\\n     */\\n    function _currentSalesPrice() internal view returns (uint256){\\n        if (_pricing.whoCanMint == WhoCanMint.VIPS) {\\n            return _pricing.vipSalePrice;\\n        } else if (_pricing.whoCanMint == WhoCanMint.MEMBERS) {\\n            return _pricing.membersSalePrice;\\n        } else if (_pricing.whoCanMint == WhoCanMint.ANYONE) {\\n            return salePrice;\\n        } \\n            \\n        return 0;       \\n    }\\n\\n    /**\\n      @param wallets A list of wallets\\n      @param tokenIDs A list of tokenId to reserve                                                                           \\n      @dev Set various pricing related values\\n     */\\n    function reserve (address[] calldata wallets, uint256[] calldata tokenIDs) \\n        external onlyOwner {  \\n        for (uint256 i = 0; i < wallets.length; i++) {\\n            _reserveAddress[_reserveCount] = wallets[i]; \\n            _reserveTokenId[_reserveCount] = tokenIDs[i];                \\n            _reserveCount++;\\n        }\\n    }\\n\\n    /**\\n      @dev returns the current loimit on edition that \\n           can be minted by one wallet\\n     */\\n    function _currentMintLimit() internal view returns (uint256){\\n        if (_pricing.whoCanMint == WhoCanMint.VIPS) {\\n            return _pricing.vipMintLimit;\\n        } else if (_pricing.whoCanMint == WhoCanMint.MEMBERS) {\\n            return _pricing.membersMintLimit;\\n        } else if (_pricing.whoCanMint == WhoCanMint.ANYONE) {\\n            return _pricing.generalMintLimit;\\n        } \\n            \\n        return 0;       \\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n\\n        _pricing.whoCanMint = WhoCanMint.ANYONE;\\n\\n        emit WhoCanMintChanged(_pricing.whoCanMint);\\n        emit PriceChanged(_salePrice);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets the VIP ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setVIPSalePrice(uint256 _salePrice) external onlyOwner {\\n        _pricing.vipSalePrice = _salePrice;\\n\\n        _pricing.whoCanMint = WhoCanMint.VIPS;\\n\\n        emit WhoCanMintChanged(_pricing.whoCanMint);\\n        emit PriceChanged(_salePrice);\\n    }\\n\\n     /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets the members ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setMembersSalePrice(uint256 _salePrice) external onlyOwner {\\n        _pricing.membersSalePrice = _salePrice;\\n\\n        _pricing.whoCanMint = WhoCanMint.MEMBERS;\\n\\n        emit WhoCanMintChanged(_pricing.whoCanMint);\\n        emit PriceChanged(salePrice);\\n    }   \\n\\n\\n     /**\\n      @param vipSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @param membersSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @param generalSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.                                              \\n      @dev This sets the members ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrices(uint256 vipSalePrice, uint256 membersSalePrice, uint256 generalSalePrice) external onlyOwner {\\n        _pricing.vipSalePrice = vipSalePrice;\\n        _pricing.membersSalePrice = membersSalePrice;\\n        salePrice = generalSalePrice;        \\n\\n        emit PriceChanged(generalSalePrice);\\n    }  \\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 currentBalance = address(this).balance;\\n        if (currentBalance > 0) {\\n            uint256 platformFee = (currentBalance * _pricing.splitBPS) / 10000;\\n            uint256 artistFee = currentBalance - platformFee;\\n\\n            AddressUpgradeable.sendValue(payable(owner()), platformFee);\\n            AddressUpgradeable.sendValue(payable(_artistWallet), artistFee);\\n        }\\n\\n        if (address(_paymentTokenERC20) != address(0x0)) {\\n            uint256 currentBalanceERC20 = _paymentTokenERC20.balanceOf(address(this));\\n            if (currentBalanceERC20 > 0) {\\n                uint256 platformFee = (currentBalanceERC20 * _pricing.splitBPS) / 10000;\\n                uint256 artistFee = currentBalanceERC20 - platformFee;\\n\\n                _paymentTokenERC20.transfer(owner(), platformFee);\\n                _paymentTokenERC20.transfer(_artistWallet, artistFee);\\n            }\\n        }\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (_pricing.whoCanMint == WhoCanMint.ANYONE) {\\n            return true;\\n        }\\n\\n        if (_pricing.whoCanMint == WhoCanMint.MEMBERS) {\\n            if (_pricing.vipAllowedMinters[msg.sender]) {\\n                return true;\\n            }   \\n\\n            if (_pricing.allowedMinters[msg.sender]) {\\n                return true;\\n            }          \\n        }\\n\\n        if (_pricing.whoCanMint == WhoCanMint.VIPS) {\\n            if (_pricing.vipAllowedMinters[msg.sender]) {\\n                return true;\\n            }            \\n        }\\n\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IExpandedNFT)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n        return the artists wallet address\\n     */\\n    function getArtistWallet()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _artistWallet;\\n    }\\n\\n     /**\\n        set the artists wallet address\\n     */\\n    function setArtistWallet(address wallet)\\n        public\\n        onlyOwner\\n    {\\n        _artistWallet = wallet;\\n    }   \\n\\n    /**\\n        return the payment tokens address\\n     */\\n    function getPaymentToken()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(_paymentTokenERC20);\\n    }\\n\\n     /**\\n        set a new payment token address\\n     */\\n    function setPaymentToken(address paymentToken)\\n        public\\n        onlyOwner\\n    {\\n        if (address(_paymentTokenERC20) != address(0x0)) {\\n            require(_paymentTokenERC20.balanceOf(address(this)) == 0, \\\"token must have 0 balance\\\");\\n        }\\n\\n        _paymentTokenERC20 = IERC20Upgradeable(paymentToken);\\n    }   \\n\\n    /**\\n      @dev Sets the types of users who is allowed to mint.\\n     */\\n    function getAllowedMinter() public view returns (WhoCanMint){\\n        return _pricing.whoCanMint;\\n    }\\n\\n    /**\\n      @param minters WhoCanMint enum of minter types\\n      @dev Sets the types of users who is allowed to mint.\\n     */\\n    function setAllowedMinter(WhoCanMint minters) public onlyOwner {\\n        require(((minters >= WhoCanMint.ONLY_OWNER) && (minters <= WhoCanMint.ANYONE)), \\\"Needs to be a valid minter type\\\");\\n\\n        _pricing.whoCanMint = minters;\\n        emit WhoCanMintChanged(minters);\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinters(uint256 count, address[] calldata minter, bool[] calldata allowed) public onlyOwner {\\n        for (uint256 i = 0; i < count; i++) {\\n            _pricing.allowedMinters[minter[i]] = allowed[i];\\n        }\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedVIPMinters(uint256 count, address[] calldata minter, bool[] calldata allowed) public onlyOwner {\\n        for (uint256 i = 0; i < count; i++) {\\n            _pricing.vipAllowedMinters[minter[i]] = allowed[i];\\n        }\\n    }\\n\\n    /**\\n      @dev Allows for updates of edition urls by the owner of the edition.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n     */\\n    function updateEditionURLs(\\n        uint256 tokenId,\\n        string memory imageUrl,\\n        string memory animationUrl\\n    ) public onlyOwner {\\n        _perTokenMetadata[tokenId].imageUrl = imageUrl;\\n        _perTokenMetadata[tokenId].animationUrl = animationUrl;\\n    }\\n\\n    /// Returns the number of editions allowed to mint\\n    function numberCanMint() public view override returns (uint256) {\\n        return dropSize - _claimCount;\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function redeem(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.MINTED), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.REDEEM_STARTED;\\n        emit RedeemStarted(tokenId, _msgSender());\\n    }\\n\\n    function abortRedemption(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.REDEEM_STARTED), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.MINTED;\\n        emit RedeemAborted(tokenId, _msgSender());\\n    }\\n\\n    function setOfferTerms(uint256 tokenId, uint256 fee) public onlyOwner {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.REDEEM_STARTED), \\\"Wrong state\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.SET_OFFER_TERMS;\\n        _perTokenMetadata[tokenId].editionFee = fee;\\n\\n        emit OfferTermsSet(tokenId);\\n    }\\n\\n    function rejectOfferTerms(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.SET_OFFER_TERMS), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.MINTED;\\n\\n        emit OfferRejected(tokenId);\\n    }\\n\\n    function acceptOfferTerms(uint256 tokenId, uint256 paymentAmount) external {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.SET_OFFER_TERMS), \\\"You currently can not redeem\\\");\\n\\n        require(paymentAmount >= _perTokenMetadata[tokenId].editionFee, \\\"Wrong price\\\");\\n        require(_paymentTokenERC20.allowance(_msgSender(), address(this)) >= _perTokenMetadata[tokenId].editionFee, \\\"Insufficient allowance\\\");\\n\\n        bool success = _paymentTokenERC20.transferFrom(_msgSender(), address(this), _perTokenMetadata[tokenId].editionFee);\\n        require(success, \\\"Could not transfer token\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.ACCEPTED_OFFER; \\n\\n        emit OfferAccepted(tokenId);\\n    }\\n\\n    function productionComplete(\\n        uint256 tokenId,\\n        string memory _description,\\n        string memory animationUrl,\\n        bytes32 animationHash,\\n        string memory imageUrl,\\n        bytes32 imageHash, \\n        string memory conditionReportUrl,\\n        bytes32 conditionReportHash               \\n    ) public onlyOwner {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.ACCEPTED_OFFER), \\\"You currently can not redeem\\\");\\n\\n        // Set the NFT to display as redeemed\\n        _perTokenMetadata[tokenId].description = _description;\\n        _perTokenMetadata[tokenId].redeemedAnimationUrl = animationUrl;\\n        _perTokenMetadata[tokenId].redeemedAnimationHash = animationHash;\\n        _perTokenMetadata[tokenId].redeemedImageUrl = imageUrl;\\n        _perTokenMetadata[tokenId].redeemedImageHash = imageHash;\\n        _perTokenMetadata[tokenId].conditionReportUrl = conditionReportUrl;\\n        _perTokenMetadata[tokenId].conditionReportHash = conditionReportHash;\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.PRODUCTION_COMPLETE;\\n\\n        emit ProductionComplete(tokenId);\\n    }\\n\\n    function acceptDelivery(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.PRODUCTION_COMPLETE), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].editionState = ExpandedNFTStates.REDEEMED;\\n\\n        emit OfferRejected(tokenId);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getDescription(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _perTokenMetadata[tokenId].description;\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getImageUrl(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _perTokenMetadata[tokenId].imageUrl;\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getImageHash(uint256 tokenId)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _perTokenMetadata[tokenId].imageHash;\\n    }\\n\\n     /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getAnimationUrl(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _perTokenMetadata[tokenId].animationUrl;\\n    }  \\n\\n     /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getAnimationHash(uint256 tokenId)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _perTokenMetadata[tokenId].animationHash;\\n    }  \\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getRedeemedImageUrl(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _perTokenMetadata[tokenId].redeemedImageUrl;\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getRedeemedImageHash(uint256 tokenId)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _perTokenMetadata[tokenId].redeemedImageHash;\\n    }\\n\\n     /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getRedeemedAnimationUrl(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _perTokenMetadata[tokenId].redeemedAnimationUrl;\\n    }   \\n\\n     /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function getRedeemedAnimationHash(uint256 tokenId)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _perTokenMetadata[tokenId].redeemedAnimationHash;\\n    }  \\n\\n    /**\\n      @dev Get URIs for the condition report\\n      @return conditionReportUrl, conditionReportHash\\n     */\\n    function getConditionReportUrl(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return (_perTokenMetadata[tokenId].conditionReportUrl);\\n    }\\n\\n    /**\\n      @dev Get URIs for the condition report\\n      @return conditionReportUrl, conditionReportHash\\n     */\\n    function getConditionReportHash(uint256 tokenId)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return (_perTokenMetadata[tokenId].conditionReportHash);\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * _pricing.royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT\\n      @return _imageUrl, _imageHash, _animationUrl, _animationHash\\n     */\\n    function getURIs(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        if (_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.REDEEMED) {        \\n           return (_perTokenMetadata[tokenId].redeemedImageUrl, _perTokenMetadata[tokenId].redeemedImageHash,\\n                _perTokenMetadata[tokenId].redeemedAnimationUrl, _perTokenMetadata[tokenId].redeemedAnimationHash);\\n        }\\n\\n        return (_perTokenMetadata[tokenId].imageUrl, _perTokenMetadata[tokenId].imageHash,\\n             _perTokenMetadata[tokenId].animationUrl, _perTokenMetadata[tokenId].animationHash);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        if (_perTokenMetadata[tokenId].editionState == ExpandedNFTStates.REDEEMED) {\\n            return\\n                _sharedNFTLogic.createMetadataEdition(\\n                    name(),\\n                    _perTokenMetadata[tokenId].description,\\n                    _perTokenMetadata[tokenId].redeemedImageUrl,\\n                    _perTokenMetadata[tokenId].redeemedAnimationUrl,\\n                    tokenId,\\n                    dropSize\\n                );\\n        }\\n\\n        return\\n            _sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                _perTokenMetadata[tokenId].description,\\n                _perTokenMetadata[tokenId].imageUrl,\\n                _perTokenMetadata[tokenId].animationUrl,\\n                tokenId,\\n                dropSize\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x024a689418a86231c2068a3a55ac7db69bdd847847dfa7e1c3023d2b5d9c63d0\",\"license\":\"GPL-3.0\"},\"contracts/IExpandedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\ninterface IExpandedNFT {\\n  function mintEdition(address to) external payable returns (uint256);\\n  function mintEditions(address[] memory to) external payable returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe1dc9fcdfab1ec02f10203a59e3fb819707f06515abe45674c5ecc814fc9c253\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x76caf66cf71c1067c845ff9de580b6e886c448915997ed1d6f37fe1a1ec489de\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            // solhint-disable quotes\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n            // solhint-enable quotes\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                // solhint-disable quotes\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n                // solhint-enable quotes\\n        }\\n        if (hasImage) {\\n            return\\n                // solhint-disable quotes\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n                // solhint-enable quotes\\n        }\\n        if (hasAnimation) {\\n            return\\n                // solhint-disable quotes\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n                // solhint-enable quotes\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xfdd73dc4ee480dd881b7ca172136d13ce061c4239e5b409d9f8e2668fd6914bb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004f8238038062004f8283398101604081905262000034916200011e565b6001600160a01b03811660805260dd805460ff19169055620000556200005c565b5062000150565b600054610100900460ff1615620000c95760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156200011c576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200013157600080fd5b81516001600160a01b03811681146200014957600080fd5b9392505050565b608051614e0f62000173600039600081816128bd015261297e0152614e0f6000f3fe60806040526004361061039b5760003560e01c806364edfbf0116101de578063a22cb46511610103578063d41c3a651161009b578063d41c3a6514610b40578063d5344e3614610b5e578063db006a7514610b73578063de5d62a014610b93578063e985e9c514610bb3578063ee5df55014610bd3578063f2fde38b14610bf3578063f51f96dd14610c13578063fce57fd914610c2957600080fd5b8063a22cb46514610a2e578063a66ff0af14610a4e578063b6fd78cf14610a61578063b88d4fde14610a91578063bcda01af14610ab1578063bf82ae4914610ad1578063c87b56dd14610af1578063c9d359d614610b11578063d375b6fc14610b2b57600080fd5b80637b422c4c116101765780637b422c4c1461091f57806380ea85891461093f5780638277fc401461096f5780638c503ca41461098f5780638da5cb5b146109af57806393d23923146109c4578063954f6621146109e457806395d89b4114610a04578063a1279cfc14610a1957600080fd5b806364edfbf01461082d578063660243d01461083557806369e1cac1146108555780636a326ab11461087557806370a0823114610895578063715018a6146108b55780637284e416146108ca578063787e5efc146108df578063799b7c5f146108ff57600080fd5b80633892aa52116102c457806342966c681161025c57806342966c681461070357806346d9c4bf146107235780634925ec5514610738578063499e16721461075857806352c9143e1461076d57806356539ecf1461078d57806362834462146107ad5780636352211e146107dd57806364e9293e146107fd57600080fd5b80633892aa5214610610578063392774151461063057806339dc13bc1461064e5780633ccfd60b1461066e5780633da165d4146106835780633e1dc10714610699578063402635cf146106ae578063410a1095146106c357806342842e0e146106e357600080fd5b80631919fed7116103375780631919fed7146104c25780631ab4d7de146104e257806323b872dd1461050257806326be29b4146105225780632a55205a146105525780632caf4651146105805780633054d1ec146105a0578063367de39e146105d057806336f3ec76146105f057600080fd5b806301ffc9a7146103a0578063036c8ea1146103d557806306fdde03146103f7578063081812fc14610419578063095ea7b31461044657806309949abe146104665780630b65b6e7146104855780630f6a93491461049a57806318160ddd146104ad575b600080fd5b3480156103ac57600080fd5b506103c06103bb366004613d3c565b610c49565b60405190151581526020015b60405180910390f35b3480156103e157600080fd5b506103f56103f0366004613d59565b610c74565b005b34801561040357600080fd5b5061040c610cd0565b6040516103cc9190613e06565b34801561042557600080fd5b50610439610434366004613e19565b610d62565b6040516103cc9190613e32565b34801561045257600080fd5b506103f5610461366004613e62565b610d89565b34801561047257600080fd5b5060d4545b6040519081526020016103cc565b34801561049157600080fd5b50610477610ea3565b6104776104a8366004613ef5565b610eba565b3480156104b957600080fd5b5060d254610477565b3480156104ce57600080fd5b506103f56104dd366004613e19565b610ec5565b3480156104ee57600080fd5b5061040c6104fd366004613e19565b610f39565b34801561050e57600080fd5b506103f561051d366004613f91565b610fde565b34801561052e57600080fd5b5061047761053d366004613e19565b600090815260cb60205260409020600d015490565b34801561055e57600080fd5b5061057261056d366004613fcd565b611010565b6040516103cc929190613fef565b34801561058c57600080fd5b5061040c61059b366004613e19565b61106c565b3480156105ac57600080fd5b506104776105bb366004613e19565b600090815260cb602052604090206009015490565b3480156105dc57600080fd5b506103f56105eb366004614008565b61108c565b3480156105fc57600080fd5b506103f561060b366004614029565b611155565b34801561061c57600080fd5b506103f561062b366004614099565b611193565b34801561063c57600080fd5b5060ca546001600160a01b0316610439565b34801561065a57600080fd5b506103f5610669366004613e19565b61123a565b34801561067a57600080fd5b506103f5611316565b34801561068f57600080fd5b5061047760cc5481565b3480156106a557600080fd5b5060d954610477565b3480156106ba57600080fd5b5060d554610477565b3480156106cf57600080fd5b5060dd5460ff166040516103cc9190614128565b3480156106ef57600080fd5b506103f56106fe366004613f91565b611534565b34801561070f57600080fd5b506103f561071e366004613e19565b61154f565b34801561072f57600080fd5b5060df54610477565b34801561074457600080fd5b5061040c610753366004613e19565b61157d565b34801561076457600080fd5b5060d754610477565b34801561077957600080fd5b506103f56107883660046141d0565b61159d565b34801561079957600080fd5b5061040c6107a8366004613e19565b6116db565b3480156107b957600080fd5b506104776107c8366004613e19565b600090815260cb602052604090206007015490565b3480156107e957600080fd5b506104396107f8366004613e19565b6116fb565b34801561080957600080fd5b5061081d610818366004613e19565b611730565b6040516103cc94939291906142a3565b6104776119f5565b34801561084157600080fd5b506103f5610850366004613fcd565b611aa1565b34801561086157600080fd5b506103f56108703660046142e0565b611d6a565b34801561088157600080fd5b506103f561089036600461434b565b611e2a565b3480156108a157600080fd5b506104776108b036600461434b565b611f1f565b3480156108c157600080fd5b506103f5611fa5565b3480156108d657600080fd5b5061040c611fb9565b3480156108eb57600080fd5b506103f56108fa366004613e19565b612047565b34801561090b57600080fd5b506103f561091a366004614099565b612067565b34801561092b57600080fd5b506103f561093a366004613e19565b612106565b34801561094b57600080fd5b5061047761095a366004613e19565b600090815260cb60205260409020600b015490565b34801561097b57600080fd5b5061040c61098a366004613e19565b6121b2565b34801561099b57600080fd5b506103f56109aa366004614366565b6121d2565b3480156109bb57600080fd5b50610439612217565b3480156109d057600080fd5b506103f56109df3660046143d2565b61222b565b3480156109f057600080fd5b5061040c6109ff366004613e19565b6123d7565b348015610a1057600080fd5b5061040c6123f7565b348015610a2557600080fd5b5060d654610477565b348015610a3a57600080fd5b506103f5610a4936600461446c565b612406565b610477610a5c36600461434b565b612411565b348015610a6d57600080fd5b50610477610a7c366004613e19565b600090815260cb602052604090206005015490565b348015610a9d57600080fd5b506103f5610aac3660046144a3565b61247a565b348015610abd57600080fd5b506103f5610acc366004614603565b6124ab565b348015610add57600080fd5b506103f5610aec366004613e19565b612784565b348015610afd57600080fd5b5061040c610b0c366004613e19565b61286a565b348015610b1d57600080fd5b5060cc5460cd5410156103c0565b348015610b3757600080fd5b506104776129f8565b348015610b4c57600080fd5b5060e0546001600160a01b0316610439565b348015610b6a57600080fd5b5060d854610477565b348015610b7f57600080fd5b506103f5610b8e366004613e19565b612a12565b348015610b9f57600080fd5b506103f5610bae366004613e19565b612adf565b348015610bbf57600080fd5b506103c0610bce3660046146e7565b612b41565b348015610bdf57600080fd5b506103f5610bee366004613fcd565b612b6f565b348015610bff57600080fd5b506103f5610c0e36600461434b565b612c53565b348015610c1f57600080fd5b5061047760df5481565b348015610c3557600080fd5b506103f5610c4436600461434b565b612cc9565b600063152a902d60e11b6001600160e01b031983161480610c6e5750610c6e82612cf3565b92915050565b610c7c612d43565b60d488905560d587905560d686905560d785905560df84905560d883905560d982905560da819055604051848152600080516020614dba833981519152906020015b60405180910390a15050505050505050565b606060658054610cdf9061471a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0b9061471a565b8015610d585780601f10610d2d57610100808354040283529160200191610d58565b820191906000526020600020905b815481529060010190602001808311610d3b57829003601f168201915b5050505050905090565b6000610d6d82612da2565b506000908152606960205260409020546001600160a01b031690565b6000610d94826116fb565b9050806001600160a01b0316836001600160a01b031603610e065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610e225750610e228133612b41565b610e945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610dfd565b610e9e8383612dc7565b505050565b600060d25460cc54610eb5919061476a565b905090565b6000610c6e82612e35565b610ecd612d43565b60df81905560dd80546003919060ff19166001835b021790555060dd54604051600080516020614d9a83398151915291610f0c9160ff90911690614128565b60405180910390a1604051818152600080516020614dba833981519152906020015b60405180910390a150565b600081815260cb60205260409020600601805460609190610f599061471a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f859061471a565b8015610fd25780601f10610fa757610100808354040283529160200191610fd2565b820191906000526020600020905b815481529060010190602001808311610fb557829003601f168201915b50505050509050919050565b610fe9335b82613042565b6110055760405162461bcd60e51b8152600401610dfd90614781565b610e9e8383836130a1565b6000808061101c612217565b6001600160a01b03160361103d57611032612217565b600091509150611065565b611045612217565b60d4546127109061105690866147ce565b61106091906147ed565b915091505b9250929050565b600081815260cb60205260409020600a01805460609190610f599061471a565b611094612d43565b60008160038111156110a8576110a8614112565b101580156110c8575060038160038111156110c5576110c5614112565b11155b6111145760405162461bcd60e51b815260206004820152601f60248201527f4e6565647320746f20626520612076616c6964206d696e7465722074797065006044820152606401610dfd565b60dd805482919060ff1916600183600381111561113357611133614112565b0217905550600080516020614d9a83398151915281604051610f2e9190614128565b61115d612d43565b60d683905560d782905560df819055604051818152600080516020614dba833981519152906020015b60405180910390a1505050565b61119b612d43565b60005b85811015611232578282828181106111b8576111b861480f565b90506020020160208101906111cd9190614825565b60dc60008787858181106111e3576111e361480f565b90506020020160208101906111f8919061434b565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061122a81614842565b91505061119e565b505050505050565b61124381613200565b61125f5760405162461bcd60e51b8152600401610dfd9061485b565b61126833610fe3565b6112845760405162461bcd60e51b8152600401610dfd9061487d565b6003600082815260cb602052604090205460ff1660068111156112a9576112a9614112565b146112c65760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb6020526040902080546001919060ff191682805b02179055506040518181527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b90602001610f2e565b61131e612d43565b47801561137d5760d5546000906127109061133990846147ce565b61134391906147ed565b90506000611351828461476a565b905061136461135e612217565b8361321d565b60ca5461137a906001600160a01b03168261321d565b50505b60e0546001600160a01b0316156115315760e0546040516370a0823160e01b81526000916001600160a01b0316906370a08231906113bf903090600401613e32565b602060405180830381865afa1580156113dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140091906148da565b9050801561152f5760d5546000906127109061141c90846147ce565b61142691906147ed565b90506000611434828461476a565b60e0549091506001600160a01b031663a9059cbb611450612217565b846040518363ffffffff1660e01b815260040161146e929190613fef565b6020604051808303816000875af115801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b191906148f3565b5060e05460ca5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926114e8929116908590600401613fef565b6020604051808303816000875af1158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b91906148f3565b5050505b505b50565b610e9e8383836040518060200160405280600081525061247a565b61155833610fe3565b6115745760405162461bcd60e51b8152600401610dfd9061487d565b61153181613336565b600081815260cb60205260409020600201805460609190610f599061471a565b6115a5612d43565b6115ae88613200565b6115ca5760405162461bcd60e51b8152600401610dfd9061485b565b6004600089815260cb602052604090205460ff1660068111156115ef576115ef614112565b1461160c5760405162461bcd60e51b8152600401610dfd906148a3565b600088815260cb602052604090206002016116278882614956565b50600088815260cb602052604090206008016116438782614956565b50600088815260cb6020526040902060098101869055600a016116668582614956565b50600088815260cb60205260409020600b8101849055600c016116898382614956565b50600088815260cb6020908152604091829020600d8101849055805460ff1916600517905590518981527fadb6d4f651f6fbf8b37026019ee48fdb86abf9ec94eb4a5f0acf72ad8c7872a39101610cbe565b600081815260cb60205260409020600401805460609190610f599061471a565b6000818152606760205260408120546001600160a01b031680610c6e5760405162461bcd60e51b8152600401610dfd90614a15565b6060600081816006600086815260cb602052604090205460ff16600681111561175b5761175b614112565b036118a957600085815260cb60205260409020600b8101546009820154600a830180549093600801919084906117909061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546117bc9061471a565b80156118095780601f106117de57610100808354040283529160200191611809565b820191906000526020600020905b8154815290600101906020018083116117ec57829003601f168201915b5050505050935081805461181c9061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546118489061471a565b80156118955780601f1061186a57610100808354040283529160200191611895565b820191906000526020600020905b81548152906001019060200180831161187857829003601f168201915b5050505050915093509350935093506119ee565b600085815260cb60205260409020600781015460058201546006830180549093600401919084906118d99061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546119059061471a565b80156119525780601f1061192757610100808354040283529160200191611952565b820191906000526020600020905b81548152906001019060200180831161193557829003601f168201915b505050505093508180546119659061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546119919061471a565b80156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b5050505050915093509350935093505b9193509193565b600080611a006133c8565b604080518281523360208201529192507f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1604080516001808252818301909252600091602080830190803683370190505090503381600081518110611a7157611a7161480f565b60200260200101906001600160a01b031690816001600160a01b031681525050611a9a81612e35565b9250505090565b611aaa82613200565b611ac65760405162461bcd60e51b8152600401610dfd9061485b565b611ad1335b83613042565b611aed5760405162461bcd60e51b8152600401610dfd9061487d565b6003600083815260cb602052604090205460ff166006811115611b1257611b12614112565b14611b2f5760405162461bcd60e51b8152600401610dfd906148a3565b600082815260cb6020526040902060010154811015611b605760405162461bcd60e51b8152600401610dfd90614a47565b600082815260cb602052604090206001015460e0546001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf291906148da565b1015611c395760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606401610dfd565b60e0546000906001600160a01b03166323b872dd33600086815260cb60205260409081902060010154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015230602483015260448201526064016020604051808303816000875af1158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd691906148f3565b905080611d205760405162461bcd60e51b815260206004820152601860248201527721b7bab632103737ba103a3930b739b332b9103a37b5b2b760411b6044820152606401610dfd565b600083815260cb6020908152604091829020805460ff1916600417905590518481527f9bd6b4fd288008520fd788a93304e5688a401aea817ea8140ecf1fb8648f31919101611186565b611d72612d43565b60005b8381101561152b57848482818110611d8f57611d8f61480f565b9050602002016020810190611da4919061434b565b60ce54600090815260cf6020526040902080546001600160a01b0319166001600160a01b0392909216919091179055828282818110611de557611de561480f565b60ce8054600090815260d060209081526040822093029490940135909155805492909150611e1283614842565b91905055508080611e2290614842565b915050611d75565b611e32612d43565b60e0546001600160a01b031615611efd5760e0546040516370a0823160e01b81526001600160a01b03909116906370a0823190611e73903090600401613e32565b602060405180830381865afa158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb491906148da565b15611efd5760405162461bcd60e51b8152602060048201526019602482015278746f6b656e206d757374206861766520302062616c616e636560381b6044820152606401610dfd565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216611f895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610dfd565b506001600160a01b031660009081526068602052604090205490565b611fad612d43565b611fb7600061343f565b565b60c98054611fc69061471a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff29061471a565b801561203f5780601f106120145761010080835404028352916020019161203f565b820191906000526020600020905b81548152906001019060200180831161202257829003601f168201915b505050505081565b61204f612d43565b60d681905560dd80546001919060ff19168280610ee2565b61206f612d43565b60005b858110156112325782828281811061208c5761208c61480f565b90506020020160208101906120a19190614825565b60db60008787858181106120b7576120b761480f565b90506020020160208101906120cc919061434b565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806120fe81614842565b915050612072565b61210f81613200565b61212b5760405162461bcd60e51b8152600401610dfd9061485b565b61213433610fe3565b6121505760405162461bcd60e51b8152600401610dfd9061487d565b6005600082815260cb602052604090205460ff16600681111561217557612175614112565b146121925760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb6020526040902080546006919060ff19166001836112e1565b600081815260cb60205260409020600801805460609190610f599061471a565b6121da612d43565b600083815260cb602052604090206006016121f58382614956565b50600083815260cb602052604090206004016122118282614956565b50505050565b6000610eb56097546001600160a01b031690565b600054610100900460ff161580801561224b5750600054600160ff909116105b806122655750303b158015612265575060005460ff166001145b6122c85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610dfd565b6000805460ff1916600117905580156122eb576000805461ff0019166101001790555b600082116123335760405162461bcd60e51b8152602060048201526015602482015274044726f702073697a65206d757374206265203e203605c1b6044820152606401610dfd565b61233d8484613491565b6123456134c2565b61234e86612c53565b60ca80546001600160a01b0319166001600160a01b03871617905560cc829055600060d255600160d35560c96123848582614956565b50600060cd558015611232576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b600081815260cb60205260409020600c01805460609190610f599061471a565b606060668054610cdf9061471a565b61152f3383836134f1565b60408051600180825281830190925260009182919060208083019080368337019050509050828160008151811061244a5761244a61480f565b60200260200101906001600160a01b031690816001600160a01b03168152505061247381612e35565b9392505050565b61248333611acb565b61249f5760405162461bcd60e51b8152600401610dfd90614781565b612211848484846135bb565b600087116124ec5760405162461bcd60e51b815260206004820152600e60248201526d05374617274496e646578203e20360941b6044820152606401610dfd565b60cc546124fa906001614a6c565b6125048789614a6c565b111561254e5760405162461bcd60e51b815260206004820152601960248201527844617461206c61726765207468616e2064726f702073697a6560381b6044820152606401610dfd565b8585511461256e5760405162461bcd60e51b8152600401610dfd90614a84565b8584511461258e5760405162461bcd60e51b8152600401610dfd90614a84565b858351146125ae5760405162461bcd60e51b8152600401610dfd90614a84565b858251146125ce5760405162461bcd60e51b8152600401610dfd90614a84565b858151146125ee5760405162461bcd60e51b8152600401610dfd90614a84565b60005b8681101561277a576000612605828a614a6c565b90508682815181106126195761261961480f565b602002602001015160cb600083815260200190815260200160002060020190816126439190614956565b508382815181106126565761265661480f565b602002602001015160cb600083815260200190815260200160002060060190816126809190614956565b508282815181106126935761269361480f565b602002602001015160cb6000838152602001908152602001600020600701819055508582815181106126c7576126c761480f565b602002602001015160cb600083815260200190815260200160002060040190816126f19190614956565b508482815181106127045761270461480f565b602090810291909101810151600083815260cb909252604090912060058101919091556003015460ff16151560011461276757600081815260cb60205260408120600301805460ff1916600117905560cd80549161276183614842565b91905055505b508061277281614842565b9150506125f1565b5050505050505050565b61278d81613200565b6127a95760405162461bcd60e51b8152600401610dfd9061485b565b6127b233610fe3565b6127ce5760405162461bcd60e51b8152600401610dfd9061487d565b6002600082815260cb602052604090205460ff1660068111156127f3576127f3614112565b146128105760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb60205260409020805460ff191660011790557f6c7c9f699aacfa5bacd2758023ab209b2d1e1c237bfa752bdc94cb87878cf1b781335b604080519283526001600160a01b03909116602083015201610f2e565b606061287582613200565b6128915760405162461bcd60e51b8152600401610dfd9061485b565b6006600083815260cb602052604090205460ff1660068111156128b6576128b6614112565b0361297c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06128f2610cd0565b600085815260cb60205260409081902060cc5491516001600160e01b031960e086901b16815261293793926002830192600a8101926008909101918a91600401614b2d565b600060405180830381865afa158015612954573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c6e9190810190614b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06129b3610cd0565b600085815260cb60205260409081902060cc5491516001600160e01b031960e086901b1681526129379392600283019260068101926004918201928b92909101614b2d565b60dd5460009060ff166003811115610eb557610eb5614112565b612a1b81613200565b612a375760405162461bcd60e51b8152600401610dfd9061485b565b612a4033610fe3565b612a5c5760405162461bcd60e51b8152600401610dfd9061487d565b6001600082815260cb602052604090205460ff166006811115612a8157612a81614112565b14612a9e5760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb60205260409020805460ff191660021790557fc290e40808ef06721539ad0d926f8d5f53d2dd6d5e28334308a012676f867416813361284d565b612ae7612d43565b60d781905560dd805460ff19166002908117909155604051600080516020614d9a83398151915291612b1891614128565b60405180910390a1600080516020614dba83398151915260df54604051610f2e91815260200190565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b612b77612d43565b612b8082613200565b612b9c5760405162461bcd60e51b8152600401610dfd9061485b565b6002600083815260cb602052604090205460ff166006811115612bc157612bc1614112565b14612bfc5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b6044820152606401610dfd565b600082815260cb6020908152604091829020805460ff1916600317815560010183905590518381527f316b408b8cf323e8f20ef7a8c267eedc89bef19ca5db7fc30be938e55bf068f9910160405180910390a15050565b612c5b612d43565b6001600160a01b038116612cc05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dfd565b6115318161343f565b612cd1612d43565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b1480612d2457506001600160e01b03198216635b5e139f60e01b145b80610c6e57506301ffc9a760e01b6001600160e01b0319831614610c6e565b33612d4c612217565b6001600160a01b031614611fb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610dfd565b612dab81613200565b6115315760405162461bcd60e51b8152600401610dfd90614a15565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612dfc826116fb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060cc5460cd541015612e855760405162461bcd60e51b8152602060048201526017602482015276139bdd08185b1b081b595d1859185d18481b1bd8591959604a1b6044820152606401610dfd565b612e8d6135ee565b612ed95760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610dfd565b6000612ee36133c8565b905060008111612f245760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b6044820152606401610dfd565b8251612f3090826147ce565b3414612f4e5760405162461bcd60e51b8152600401610dfd90614a47565b612f566136c7565b835133600090815260de6020526040902054600191612f7491614a6c565b612f7e919061476a565b10612fc15760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b5a5b9d081b1a5b5a5d606a1b6044820152606401610dfd565b60cc54835160d254612fd39190614a6c565b11156130125760405162461bcd60e51b815260206004820152600e60248201526d4f7665722064726f702073697a6560901b6044820152606401610dfd565b600160dd5460ff16600381111561302b5761302b614112565b036130395761247383613738565b61247383613928565b60008061304e836116fb565b9050806001600160a01b0316846001600160a01b0316148061307557506130758185612b41565b806130995750836001600160a01b031661308e84610d62565b6001600160a01b0316145b949350505050565b826001600160a01b03166130b4826116fb565b6001600160a01b0316146130da5760405162461bcd60e51b8152600401610dfd90614c06565b6001600160a01b03821661313c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610dfd565b6131498383836001613a23565b826001600160a01b031661315c826116fb565b6001600160a01b0316146131825760405162461bcd60e51b8152600401610dfd90614c06565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b038781168086526068855283862080546000190190559087168086528386208054600101905586865260679094528285208054909216841790915590518493600080516020614d7a83398151915291a4505050565b6000908152606760205260409020546001600160a01b0316151590565b8047101561326d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610dfd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146132ba576040519150601f19603f3d011682016040523d82523d6000602084013e6132bf565b606091505b5050905080610e9e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610dfd565b6000613341826116fb565b9050613351816000846001613a23565b61335a826116fb565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b038516808552606884528285208054600019019055878552606790935281842080549091169055519293508492600080516020614d7a833981519152908390a461152f565b6000600160dd5460ff1660038111156133e3576133e3614112565b036133ef575060d65490565b600260dd5460ff16600381111561340857613408614112565b03613414575060d75490565b600360dd5460ff16600381111561342d5761342d614112565b03613439575060df5490565b50600090565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166134b85760405162461bcd60e51b8152600401610dfd90614c4b565b61152f8282613aab565b600054610100900460ff166134e95760405162461bcd60e51b8152600401610dfd90614c4b565b611fb7613aeb565b816001600160a01b0316836001600160a01b03160361354e5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610dfd565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6135c68484846130a1565b6135d284848484613b1b565b6122115760405162461bcd60e51b8152600401610dfd90614c96565b6000600360dd5460ff16600381111561360957613609614112565b036136145750600190565b600260dd5460ff16600381111561362d5761362d614112565b0361366e5733600090815260dc602052604090205460ff16156136505750600190565b33600090815260db602052604090205460ff161561366e5750600190565b600160dd5460ff16600381111561368757613687614112565b036136aa5733600090815260dc602052604090205460ff16156136aa5750600190565b336136b3612217565b6001600160a01b0316036134395750600190565b6000600160dd5460ff1660038111156136e2576136e2614112565b036136ee575060d85490565b600260dd5460ff16600381111561370757613707614112565b03613713575060d95490565b600360dd5460ff16600381111561372c5761372c614112565b03613439575060da5490565b60ce5460009033908290815b60ce548110156137c757600081815260cf60205260409020546001600160a01b038086169116036137b557600081815260d0602090815260408083205480845260d19092529091205460ff1615156001146137b357828210156137a5578192505b836137af81614842565b9450505b505b806137bf81614842565b915050613744565b5084518210156138155760405162461bcd60e51b815260206004820152601960248201527843616e206e6f74206d696e7420616c6c2065646974696f6e7360381b6044820152606401610dfd565b60018160005b875181101561391c575b600082815260cf60205260409020546001600160a01b03878116911614613858578161385081614842565b925050613825565b60d060008381526020019081526020016000205492506138918882815181106138835761388361480f565b602002602001015184613c1c565b600083815260cb602090815260408083208054600160ff19918216811790925560d18452828520805490911690911790556001600160a01b038916835260de90915281208054916138e183614842565b909155505060d280549060006138f683614842565b9190505550818061390690614842565b925050808061391490614842565b91505061381b565b50909695505050505050565b600033815b8351811015613a18575b60d354600090815260d1602052604090205460ff16151560010361396f5760d3805490600061396583614842565b9190505550613937565b6139948482815181106139845761398461480f565b602002602001015160d354613c1c565b60d38054600090815260cb602090815260408083208054600160ff1991821681179092559454845260d183528184208054909516179093556001600160a01b038516825260de90529081208054916139eb83614842565b909155505060d28054906000613a0083614842565b91905055508080613a1090614842565b91505061392d565b505060d35492915050565b6001811115612211576001600160a01b03841615613a69576001600160a01b03841660009081526068602052604081208054839290613a6390849061476a565b90915550505b6001600160a01b03831615612211576001600160a01b03831660009081526068602052604081208054839290613aa0908490614a6c565b909155505050505050565b600054610100900460ff16613ad25760405162461bcd60e51b8152600401610dfd90614c4b565b6065613ade8382614956565b506066610e9e8282614956565b600054610100900460ff16613b125760405162461bcd60e51b8152600401610dfd90614c4b565b611fb73361343f565b60006001600160a01b0384163b15613c1157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613b5f903390899088908890600401614ce8565b6020604051808303816000875af1925050508015613b9a575060408051601f3d908101601f19168201909252613b9791810190614d25565b60015b613bf7573d808015613bc8576040519150601f19603f3d011682016040523d82523d6000602084013e613bcd565b606091505b508051600003613bef5760405162461bcd60e51b8152600401610dfd90614c96565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613099565b506001949350505050565b6001600160a01b038216613c725760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610dfd565b613c7b81613200565b15613c985760405162461bcd60e51b8152600401610dfd90614d42565b613ca6600083836001613a23565b613caf81613200565b15613ccc5760405162461bcd60e51b8152600401610dfd90614d42565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b031916841790555183929190600080516020614d7a833981519152908290a461152f565b6001600160e01b03198116811461153157600080fd5b600060208284031215613d4e57600080fd5b813561247381613d26565b600080600080600080600080610100898b031215613d7657600080fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b60005b83811015613dc9578181015183820152602001613db1565b838111156122115750506000910152565b60008151808452613df2816020860160208601613dae565b601f01601f19169290920160200192915050565b6020815260006124736020830184613dda565b600060208284031215613e2b57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b0381168114613e5d57600080fd5b919050565b60008060408385031215613e7557600080fd5b613e7e83613e46565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613eca57613eca613e8c565b604052919050565b60006001600160401b03821115613eeb57613eeb613e8c565b5060051b60200190565b60006020808385031215613f0857600080fd5b82356001600160401b03811115613f1e57600080fd5b8301601f81018513613f2f57600080fd5b8035613f42613f3d82613ed2565b613ea2565b81815260059190911b82018301908381019087831115613f6157600080fd5b928401925b82841015613f8657613f7784613e46565b82529284019290840190613f66565b979650505050505050565b600080600060608486031215613fa657600080fd5b613faf84613e46565b9250613fbd60208501613e46565b9150604084013590509250925092565b60008060408385031215613fe057600080fd5b50508035926020909101359150565b6001600160a01b03929092168252602082015260400190565b60006020828403121561401a57600080fd5b81356004811061247357600080fd5b60008060006060848603121561403e57600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261406757600080fd5b5081356001600160401b0381111561407e57600080fd5b6020830191508360208260051b850101111561106557600080fd5b6000806000806000606086880312156140b157600080fd5b8535945060208601356001600160401b03808211156140cf57600080fd5b6140db89838a01614055565b909650945060408801359150808211156140f457600080fd5b5061410188828901614055565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061414a57634e487b7160e01b600052602160045260246000fd5b91905290565b60006001600160401b0382111561416957614169613e8c565b50601f01601f191660200190565b6000614185613f3d84614150565b905082815283838301111561419957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126141c157600080fd5b61247383833560208501614177565b600080600080600080600080610100898b0312156141ed57600080fd5b8835975060208901356001600160401b038082111561420b57600080fd5b6142178c838d016141b0565b985060408b013591508082111561422d57600080fd5b6142398c838d016141b0565b975060608b0135965060808b013591508082111561425657600080fd5b6142628c838d016141b0565b955060a08b0135945060c08b013591508082111561427f57600080fd5b5061428c8b828c016141b0565b92505060e089013590509295985092959890939650565b6080815260006142b66080830187613dda565b85602084015282810360408401526142ce8186613dda565b91505082606083015295945050505050565b600080600080604085870312156142f657600080fd5b84356001600160401b038082111561430d57600080fd5b61431988838901614055565b9096509450602087013591508082111561433257600080fd5b5061433f87828801614055565b95989497509550505050565b60006020828403121561435d57600080fd5b61247382613e46565b60008060006060848603121561437b57600080fd5b8335925060208401356001600160401b038082111561439957600080fd5b6143a5878388016141b0565b935060408601359150808211156143bb57600080fd5b506143c8868287016141b0565b9150509250925092565b600080600080600060a086880312156143ea57600080fd5b6143f386613e46565b945061440160208701613e46565b935060408601356001600160401b038082111561441d57600080fd5b61442989838a016141b0565b9450606088013591508082111561443f57600080fd5b5061444c888289016141b0565b95989497509295608001359392505050565b801515811461153157600080fd5b6000806040838503121561447f57600080fd5b61448883613e46565b915060208301356144988161445e565b809150509250929050565b600080600080608085870312156144b957600080fd5b6144c285613e46565b93506144d060208601613e46565b92506040850135915060608501356001600160401b038111156144f257600080fd5b8501601f8101871361450357600080fd5b61451287823560208401614177565b91505092959194509250565b600082601f83011261452f57600080fd5b8135602061453f613f3d83613ed2565b82815260059290921b8401810191818101908684111561455e57600080fd5b8286015b8481101561459d5780356001600160401b038111156145815760008081fd5b61458f8986838b01016141b0565b845250918301918301614562565b509695505050505050565b600082601f8301126145b957600080fd5b813560206145c9613f3d83613ed2565b82815260059290921b840181019181810190868411156145e857600080fd5b8286015b8481101561459d57803583529183019183016145ec565b600080600080600080600060e0888a03121561461e57600080fd5b873596506020880135955060408801356001600160401b038082111561464357600080fd5b61464f8b838c0161451e565b965060608a013591508082111561466557600080fd5b6146718b838c0161451e565b955060808a013591508082111561468757600080fd5b6146938b838c016145a8565b945060a08a01359150808211156146a957600080fd5b6146b58b838c0161451e565b935060c08a01359150808211156146cb57600080fd5b506146d88a828b016145a8565b91505092959891949750929550565b600080604083850312156146fa57600080fd5b61470383613e46565b915061471160208401613e46565b90509250929050565b600181811c9082168061472e57607f821691505b60208210810361474e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561477c5761477c614754565b500390565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008160001904831182151516156147e8576147e8614754565b500290565b60008261480a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561483757600080fd5b81356124738161445e565b60006001820161485457614854614754565b5060010190565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252601c908201527f596f752063757272656e746c792063616e206e6f742072656465656d00000000604082015260600190565b6000602082840312156148ec57600080fd5b5051919050565b60006020828403121561490557600080fd5b81516124738161445e565b601f821115610e9e57600081815260208120601f850160051c810160208610156149375750805b601f850160051c820191505b8181101561123257828155600101614943565b81516001600160401b0381111561496f5761496f613e8c565b6149838161497d845461471a565b84614910565b602080601f8311600181146149b857600084156149a05750858301515b600019600386901b1c1916600185901b178555611232565b600085815260208120601f198616915b828110156149e7578886015182559484019460019091019084016149c8565b5085821015614a055787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b6020808252600b908201526a57726f6e6720707269636560a81b604082015260600190565b60008219821115614a7f57614a7f614754565b500190565b602080825260129082015271088c2e8c240e6d2f4ca40dad2e6dac2e8c6d60731b604082015260600190565b60008154614abd8161471a565b808552602060018381168015614ada5760018114614af457614b22565b60ff1985168884015283151560051b880183019550614b22565b866000528260002060005b85811015614b1a5781548a8201860152908301908401614aff565b890184019650505b505050505092915050565b60c081526000614b4060c0830189613dda565b8281036020840152614b528189614ab0565b90508281036040840152614b668188614ab0565b90508281036060840152614b7a8187614ab0565b6080840195909552505060a00152949350505050565b600060208284031215614ba257600080fd5b81516001600160401b03811115614bb857600080fd5b8201601f81018413614bc957600080fd5b8051614bd7613f3d82614150565b818152856020838501011115614bec57600080fd5b614bfd826020830160208601613dae565b95945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614d1b90830184613dda565b9695505050505050565b600060208284031215614d3757600080fd5b815161247381613d26565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c51a6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622a26469706673582212207362e099d750e48b9f2c288016c94a84422b5d2b8607b91aff352473f03d26ef64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061039b5760003560e01c806364edfbf0116101de578063a22cb46511610103578063d41c3a651161009b578063d41c3a6514610b40578063d5344e3614610b5e578063db006a7514610b73578063de5d62a014610b93578063e985e9c514610bb3578063ee5df55014610bd3578063f2fde38b14610bf3578063f51f96dd14610c13578063fce57fd914610c2957600080fd5b8063a22cb46514610a2e578063a66ff0af14610a4e578063b6fd78cf14610a61578063b88d4fde14610a91578063bcda01af14610ab1578063bf82ae4914610ad1578063c87b56dd14610af1578063c9d359d614610b11578063d375b6fc14610b2b57600080fd5b80637b422c4c116101765780637b422c4c1461091f57806380ea85891461093f5780638277fc401461096f5780638c503ca41461098f5780638da5cb5b146109af57806393d23923146109c4578063954f6621146109e457806395d89b4114610a04578063a1279cfc14610a1957600080fd5b806364edfbf01461082d578063660243d01461083557806369e1cac1146108555780636a326ab11461087557806370a0823114610895578063715018a6146108b55780637284e416146108ca578063787e5efc146108df578063799b7c5f146108ff57600080fd5b80633892aa52116102c457806342966c681161025c57806342966c681461070357806346d9c4bf146107235780634925ec5514610738578063499e16721461075857806352c9143e1461076d57806356539ecf1461078d57806362834462146107ad5780636352211e146107dd57806364e9293e146107fd57600080fd5b80633892aa5214610610578063392774151461063057806339dc13bc1461064e5780633ccfd60b1461066e5780633da165d4146106835780633e1dc10714610699578063402635cf146106ae578063410a1095146106c357806342842e0e146106e357600080fd5b80631919fed7116103375780631919fed7146104c25780631ab4d7de146104e257806323b872dd1461050257806326be29b4146105225780632a55205a146105525780632caf4651146105805780633054d1ec146105a0578063367de39e146105d057806336f3ec76146105f057600080fd5b806301ffc9a7146103a0578063036c8ea1146103d557806306fdde03146103f7578063081812fc14610419578063095ea7b31461044657806309949abe146104665780630b65b6e7146104855780630f6a93491461049a57806318160ddd146104ad575b600080fd5b3480156103ac57600080fd5b506103c06103bb366004613d3c565b610c49565b60405190151581526020015b60405180910390f35b3480156103e157600080fd5b506103f56103f0366004613d59565b610c74565b005b34801561040357600080fd5b5061040c610cd0565b6040516103cc9190613e06565b34801561042557600080fd5b50610439610434366004613e19565b610d62565b6040516103cc9190613e32565b34801561045257600080fd5b506103f5610461366004613e62565b610d89565b34801561047257600080fd5b5060d4545b6040519081526020016103cc565b34801561049157600080fd5b50610477610ea3565b6104776104a8366004613ef5565b610eba565b3480156104b957600080fd5b5060d254610477565b3480156104ce57600080fd5b506103f56104dd366004613e19565b610ec5565b3480156104ee57600080fd5b5061040c6104fd366004613e19565b610f39565b34801561050e57600080fd5b506103f561051d366004613f91565b610fde565b34801561052e57600080fd5b5061047761053d366004613e19565b600090815260cb60205260409020600d015490565b34801561055e57600080fd5b5061057261056d366004613fcd565b611010565b6040516103cc929190613fef565b34801561058c57600080fd5b5061040c61059b366004613e19565b61106c565b3480156105ac57600080fd5b506104776105bb366004613e19565b600090815260cb602052604090206009015490565b3480156105dc57600080fd5b506103f56105eb366004614008565b61108c565b3480156105fc57600080fd5b506103f561060b366004614029565b611155565b34801561061c57600080fd5b506103f561062b366004614099565b611193565b34801561063c57600080fd5b5060ca546001600160a01b0316610439565b34801561065a57600080fd5b506103f5610669366004613e19565b61123a565b34801561067a57600080fd5b506103f5611316565b34801561068f57600080fd5b5061047760cc5481565b3480156106a557600080fd5b5060d954610477565b3480156106ba57600080fd5b5060d554610477565b3480156106cf57600080fd5b5060dd5460ff166040516103cc9190614128565b3480156106ef57600080fd5b506103f56106fe366004613f91565b611534565b34801561070f57600080fd5b506103f561071e366004613e19565b61154f565b34801561072f57600080fd5b5060df54610477565b34801561074457600080fd5b5061040c610753366004613e19565b61157d565b34801561076457600080fd5b5060d754610477565b34801561077957600080fd5b506103f56107883660046141d0565b61159d565b34801561079957600080fd5b5061040c6107a8366004613e19565b6116db565b3480156107b957600080fd5b506104776107c8366004613e19565b600090815260cb602052604090206007015490565b3480156107e957600080fd5b506104396107f8366004613e19565b6116fb565b34801561080957600080fd5b5061081d610818366004613e19565b611730565b6040516103cc94939291906142a3565b6104776119f5565b34801561084157600080fd5b506103f5610850366004613fcd565b611aa1565b34801561086157600080fd5b506103f56108703660046142e0565b611d6a565b34801561088157600080fd5b506103f561089036600461434b565b611e2a565b3480156108a157600080fd5b506104776108b036600461434b565b611f1f565b3480156108c157600080fd5b506103f5611fa5565b3480156108d657600080fd5b5061040c611fb9565b3480156108eb57600080fd5b506103f56108fa366004613e19565b612047565b34801561090b57600080fd5b506103f561091a366004614099565b612067565b34801561092b57600080fd5b506103f561093a366004613e19565b612106565b34801561094b57600080fd5b5061047761095a366004613e19565b600090815260cb60205260409020600b015490565b34801561097b57600080fd5b5061040c61098a366004613e19565b6121b2565b34801561099b57600080fd5b506103f56109aa366004614366565b6121d2565b3480156109bb57600080fd5b50610439612217565b3480156109d057600080fd5b506103f56109df3660046143d2565b61222b565b3480156109f057600080fd5b5061040c6109ff366004613e19565b6123d7565b348015610a1057600080fd5b5061040c6123f7565b348015610a2557600080fd5b5060d654610477565b348015610a3a57600080fd5b506103f5610a4936600461446c565b612406565b610477610a5c36600461434b565b612411565b348015610a6d57600080fd5b50610477610a7c366004613e19565b600090815260cb602052604090206005015490565b348015610a9d57600080fd5b506103f5610aac3660046144a3565b61247a565b348015610abd57600080fd5b506103f5610acc366004614603565b6124ab565b348015610add57600080fd5b506103f5610aec366004613e19565b612784565b348015610afd57600080fd5b5061040c610b0c366004613e19565b61286a565b348015610b1d57600080fd5b5060cc5460cd5410156103c0565b348015610b3757600080fd5b506104776129f8565b348015610b4c57600080fd5b5060e0546001600160a01b0316610439565b348015610b6a57600080fd5b5060d854610477565b348015610b7f57600080fd5b506103f5610b8e366004613e19565b612a12565b348015610b9f57600080fd5b506103f5610bae366004613e19565b612adf565b348015610bbf57600080fd5b506103c0610bce3660046146e7565b612b41565b348015610bdf57600080fd5b506103f5610bee366004613fcd565b612b6f565b348015610bff57600080fd5b506103f5610c0e36600461434b565b612c53565b348015610c1f57600080fd5b5061047760df5481565b348015610c3557600080fd5b506103f5610c4436600461434b565b612cc9565b600063152a902d60e11b6001600160e01b031983161480610c6e5750610c6e82612cf3565b92915050565b610c7c612d43565b60d488905560d587905560d686905560d785905560df84905560d883905560d982905560da819055604051848152600080516020614dba833981519152906020015b60405180910390a15050505050505050565b606060658054610cdf9061471a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0b9061471a565b8015610d585780601f10610d2d57610100808354040283529160200191610d58565b820191906000526020600020905b815481529060010190602001808311610d3b57829003601f168201915b5050505050905090565b6000610d6d82612da2565b506000908152606960205260409020546001600160a01b031690565b6000610d94826116fb565b9050806001600160a01b0316836001600160a01b031603610e065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610e225750610e228133612b41565b610e945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610dfd565b610e9e8383612dc7565b505050565b600060d25460cc54610eb5919061476a565b905090565b6000610c6e82612e35565b610ecd612d43565b60df81905560dd80546003919060ff19166001835b021790555060dd54604051600080516020614d9a83398151915291610f0c9160ff90911690614128565b60405180910390a1604051818152600080516020614dba833981519152906020015b60405180910390a150565b600081815260cb60205260409020600601805460609190610f599061471a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f859061471a565b8015610fd25780601f10610fa757610100808354040283529160200191610fd2565b820191906000526020600020905b815481529060010190602001808311610fb557829003601f168201915b50505050509050919050565b610fe9335b82613042565b6110055760405162461bcd60e51b8152600401610dfd90614781565b610e9e8383836130a1565b6000808061101c612217565b6001600160a01b03160361103d57611032612217565b600091509150611065565b611045612217565b60d4546127109061105690866147ce565b61106091906147ed565b915091505b9250929050565b600081815260cb60205260409020600a01805460609190610f599061471a565b611094612d43565b60008160038111156110a8576110a8614112565b101580156110c8575060038160038111156110c5576110c5614112565b11155b6111145760405162461bcd60e51b815260206004820152601f60248201527f4e6565647320746f20626520612076616c6964206d696e7465722074797065006044820152606401610dfd565b60dd805482919060ff1916600183600381111561113357611133614112565b0217905550600080516020614d9a83398151915281604051610f2e9190614128565b61115d612d43565b60d683905560d782905560df819055604051818152600080516020614dba833981519152906020015b60405180910390a1505050565b61119b612d43565b60005b85811015611232578282828181106111b8576111b861480f565b90506020020160208101906111cd9190614825565b60dc60008787858181106111e3576111e361480f565b90506020020160208101906111f8919061434b565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061122a81614842565b91505061119e565b505050505050565b61124381613200565b61125f5760405162461bcd60e51b8152600401610dfd9061485b565b61126833610fe3565b6112845760405162461bcd60e51b8152600401610dfd9061487d565b6003600082815260cb602052604090205460ff1660068111156112a9576112a9614112565b146112c65760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb6020526040902080546001919060ff191682805b02179055506040518181527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b90602001610f2e565b61131e612d43565b47801561137d5760d5546000906127109061133990846147ce565b61134391906147ed565b90506000611351828461476a565b905061136461135e612217565b8361321d565b60ca5461137a906001600160a01b03168261321d565b50505b60e0546001600160a01b0316156115315760e0546040516370a0823160e01b81526000916001600160a01b0316906370a08231906113bf903090600401613e32565b602060405180830381865afa1580156113dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140091906148da565b9050801561152f5760d5546000906127109061141c90846147ce565b61142691906147ed565b90506000611434828461476a565b60e0549091506001600160a01b031663a9059cbb611450612217565b846040518363ffffffff1660e01b815260040161146e929190613fef565b6020604051808303816000875af115801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b191906148f3565b5060e05460ca5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926114e8929116908590600401613fef565b6020604051808303816000875af1158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b91906148f3565b5050505b505b50565b610e9e8383836040518060200160405280600081525061247a565b61155833610fe3565b6115745760405162461bcd60e51b8152600401610dfd9061487d565b61153181613336565b600081815260cb60205260409020600201805460609190610f599061471a565b6115a5612d43565b6115ae88613200565b6115ca5760405162461bcd60e51b8152600401610dfd9061485b565b6004600089815260cb602052604090205460ff1660068111156115ef576115ef614112565b1461160c5760405162461bcd60e51b8152600401610dfd906148a3565b600088815260cb602052604090206002016116278882614956565b50600088815260cb602052604090206008016116438782614956565b50600088815260cb6020526040902060098101869055600a016116668582614956565b50600088815260cb60205260409020600b8101849055600c016116898382614956565b50600088815260cb6020908152604091829020600d8101849055805460ff1916600517905590518981527fadb6d4f651f6fbf8b37026019ee48fdb86abf9ec94eb4a5f0acf72ad8c7872a39101610cbe565b600081815260cb60205260409020600401805460609190610f599061471a565b6000818152606760205260408120546001600160a01b031680610c6e5760405162461bcd60e51b8152600401610dfd90614a15565b6060600081816006600086815260cb602052604090205460ff16600681111561175b5761175b614112565b036118a957600085815260cb60205260409020600b8101546009820154600a830180549093600801919084906117909061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546117bc9061471a565b80156118095780601f106117de57610100808354040283529160200191611809565b820191906000526020600020905b8154815290600101906020018083116117ec57829003601f168201915b5050505050935081805461181c9061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546118489061471a565b80156118955780601f1061186a57610100808354040283529160200191611895565b820191906000526020600020905b81548152906001019060200180831161187857829003601f168201915b5050505050915093509350935093506119ee565b600085815260cb60205260409020600781015460058201546006830180549093600401919084906118d99061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546119059061471a565b80156119525780601f1061192757610100808354040283529160200191611952565b820191906000526020600020905b81548152906001019060200180831161193557829003601f168201915b505050505093508180546119659061471a565b80601f01602080910402602001604051908101604052809291908181526020018280546119919061471a565b80156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b5050505050915093509350935093505b9193509193565b600080611a006133c8565b604080518281523360208201529192507f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1604080516001808252818301909252600091602080830190803683370190505090503381600081518110611a7157611a7161480f565b60200260200101906001600160a01b031690816001600160a01b031681525050611a9a81612e35565b9250505090565b611aaa82613200565b611ac65760405162461bcd60e51b8152600401610dfd9061485b565b611ad1335b83613042565b611aed5760405162461bcd60e51b8152600401610dfd9061487d565b6003600083815260cb602052604090205460ff166006811115611b1257611b12614112565b14611b2f5760405162461bcd60e51b8152600401610dfd906148a3565b600082815260cb6020526040902060010154811015611b605760405162461bcd60e51b8152600401610dfd90614a47565b600082815260cb602052604090206001015460e0546001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf291906148da565b1015611c395760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606401610dfd565b60e0546000906001600160a01b03166323b872dd33600086815260cb60205260409081902060010154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015230602483015260448201526064016020604051808303816000875af1158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd691906148f3565b905080611d205760405162461bcd60e51b815260206004820152601860248201527721b7bab632103737ba103a3930b739b332b9103a37b5b2b760411b6044820152606401610dfd565b600083815260cb6020908152604091829020805460ff1916600417905590518481527f9bd6b4fd288008520fd788a93304e5688a401aea817ea8140ecf1fb8648f31919101611186565b611d72612d43565b60005b8381101561152b57848482818110611d8f57611d8f61480f565b9050602002016020810190611da4919061434b565b60ce54600090815260cf6020526040902080546001600160a01b0319166001600160a01b0392909216919091179055828282818110611de557611de561480f565b60ce8054600090815260d060209081526040822093029490940135909155805492909150611e1283614842565b91905055508080611e2290614842565b915050611d75565b611e32612d43565b60e0546001600160a01b031615611efd5760e0546040516370a0823160e01b81526001600160a01b03909116906370a0823190611e73903090600401613e32565b602060405180830381865afa158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb491906148da565b15611efd5760405162461bcd60e51b8152602060048201526019602482015278746f6b656e206d757374206861766520302062616c616e636560381b6044820152606401610dfd565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216611f895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610dfd565b506001600160a01b031660009081526068602052604090205490565b611fad612d43565b611fb7600061343f565b565b60c98054611fc69061471a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff29061471a565b801561203f5780601f106120145761010080835404028352916020019161203f565b820191906000526020600020905b81548152906001019060200180831161202257829003601f168201915b505050505081565b61204f612d43565b60d681905560dd80546001919060ff19168280610ee2565b61206f612d43565b60005b858110156112325782828281811061208c5761208c61480f565b90506020020160208101906120a19190614825565b60db60008787858181106120b7576120b761480f565b90506020020160208101906120cc919061434b565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806120fe81614842565b915050612072565b61210f81613200565b61212b5760405162461bcd60e51b8152600401610dfd9061485b565b61213433610fe3565b6121505760405162461bcd60e51b8152600401610dfd9061487d565b6005600082815260cb602052604090205460ff16600681111561217557612175614112565b146121925760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb6020526040902080546006919060ff19166001836112e1565b600081815260cb60205260409020600801805460609190610f599061471a565b6121da612d43565b600083815260cb602052604090206006016121f58382614956565b50600083815260cb602052604090206004016122118282614956565b50505050565b6000610eb56097546001600160a01b031690565b600054610100900460ff161580801561224b5750600054600160ff909116105b806122655750303b158015612265575060005460ff166001145b6122c85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610dfd565b6000805460ff1916600117905580156122eb576000805461ff0019166101001790555b600082116123335760405162461bcd60e51b8152602060048201526015602482015274044726f702073697a65206d757374206265203e203605c1b6044820152606401610dfd565b61233d8484613491565b6123456134c2565b61234e86612c53565b60ca80546001600160a01b0319166001600160a01b03871617905560cc829055600060d255600160d35560c96123848582614956565b50600060cd558015611232576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b600081815260cb60205260409020600c01805460609190610f599061471a565b606060668054610cdf9061471a565b61152f3383836134f1565b60408051600180825281830190925260009182919060208083019080368337019050509050828160008151811061244a5761244a61480f565b60200260200101906001600160a01b031690816001600160a01b03168152505061247381612e35565b9392505050565b61248333611acb565b61249f5760405162461bcd60e51b8152600401610dfd90614781565b612211848484846135bb565b600087116124ec5760405162461bcd60e51b815260206004820152600e60248201526d05374617274496e646578203e20360941b6044820152606401610dfd565b60cc546124fa906001614a6c565b6125048789614a6c565b111561254e5760405162461bcd60e51b815260206004820152601960248201527844617461206c61726765207468616e2064726f702073697a6560381b6044820152606401610dfd565b8585511461256e5760405162461bcd60e51b8152600401610dfd90614a84565b8584511461258e5760405162461bcd60e51b8152600401610dfd90614a84565b858351146125ae5760405162461bcd60e51b8152600401610dfd90614a84565b858251146125ce5760405162461bcd60e51b8152600401610dfd90614a84565b858151146125ee5760405162461bcd60e51b8152600401610dfd90614a84565b60005b8681101561277a576000612605828a614a6c565b90508682815181106126195761261961480f565b602002602001015160cb600083815260200190815260200160002060020190816126439190614956565b508382815181106126565761265661480f565b602002602001015160cb600083815260200190815260200160002060060190816126809190614956565b508282815181106126935761269361480f565b602002602001015160cb6000838152602001908152602001600020600701819055508582815181106126c7576126c761480f565b602002602001015160cb600083815260200190815260200160002060040190816126f19190614956565b508482815181106127045761270461480f565b602090810291909101810151600083815260cb909252604090912060058101919091556003015460ff16151560011461276757600081815260cb60205260408120600301805460ff1916600117905560cd80549161276183614842565b91905055505b508061277281614842565b9150506125f1565b5050505050505050565b61278d81613200565b6127a95760405162461bcd60e51b8152600401610dfd9061485b565b6127b233610fe3565b6127ce5760405162461bcd60e51b8152600401610dfd9061487d565b6002600082815260cb602052604090205460ff1660068111156127f3576127f3614112565b146128105760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb60205260409020805460ff191660011790557f6c7c9f699aacfa5bacd2758023ab209b2d1e1c237bfa752bdc94cb87878cf1b781335b604080519283526001600160a01b03909116602083015201610f2e565b606061287582613200565b6128915760405162461bcd60e51b8152600401610dfd9061485b565b6006600083815260cb602052604090205460ff1660068111156128b6576128b6614112565b0361297c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06128f2610cd0565b600085815260cb60205260409081902060cc5491516001600160e01b031960e086901b16815261293793926002830192600a8101926008909101918a91600401614b2d565b600060405180830381865afa158015612954573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c6e9190810190614b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06129b3610cd0565b600085815260cb60205260409081902060cc5491516001600160e01b031960e086901b1681526129379392600283019260068101926004918201928b92909101614b2d565b60dd5460009060ff166003811115610eb557610eb5614112565b612a1b81613200565b612a375760405162461bcd60e51b8152600401610dfd9061485b565b612a4033610fe3565b612a5c5760405162461bcd60e51b8152600401610dfd9061487d565b6001600082815260cb602052604090205460ff166006811115612a8157612a81614112565b14612a9e5760405162461bcd60e51b8152600401610dfd906148a3565b600081815260cb60205260409020805460ff191660021790557fc290e40808ef06721539ad0d926f8d5f53d2dd6d5e28334308a012676f867416813361284d565b612ae7612d43565b60d781905560dd805460ff19166002908117909155604051600080516020614d9a83398151915291612b1891614128565b60405180910390a1600080516020614dba83398151915260df54604051610f2e91815260200190565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b612b77612d43565b612b8082613200565b612b9c5760405162461bcd60e51b8152600401610dfd9061485b565b6002600083815260cb602052604090205460ff166006811115612bc157612bc1614112565b14612bfc5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b6044820152606401610dfd565b600082815260cb6020908152604091829020805460ff1916600317815560010183905590518381527f316b408b8cf323e8f20ef7a8c267eedc89bef19ca5db7fc30be938e55bf068f9910160405180910390a15050565b612c5b612d43565b6001600160a01b038116612cc05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dfd565b6115318161343f565b612cd1612d43565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b1480612d2457506001600160e01b03198216635b5e139f60e01b145b80610c6e57506301ffc9a760e01b6001600160e01b0319831614610c6e565b33612d4c612217565b6001600160a01b031614611fb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610dfd565b612dab81613200565b6115315760405162461bcd60e51b8152600401610dfd90614a15565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612dfc826116fb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060cc5460cd541015612e855760405162461bcd60e51b8152602060048201526017602482015276139bdd08185b1b081b595d1859185d18481b1bd8591959604a1b6044820152606401610dfd565b612e8d6135ee565b612ed95760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610dfd565b6000612ee36133c8565b905060008111612f245760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b6044820152606401610dfd565b8251612f3090826147ce565b3414612f4e5760405162461bcd60e51b8152600401610dfd90614a47565b612f566136c7565b835133600090815260de6020526040902054600191612f7491614a6c565b612f7e919061476a565b10612fc15760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b5a5b9d081b1a5b5a5d606a1b6044820152606401610dfd565b60cc54835160d254612fd39190614a6c565b11156130125760405162461bcd60e51b815260206004820152600e60248201526d4f7665722064726f702073697a6560901b6044820152606401610dfd565b600160dd5460ff16600381111561302b5761302b614112565b036130395761247383613738565b61247383613928565b60008061304e836116fb565b9050806001600160a01b0316846001600160a01b0316148061307557506130758185612b41565b806130995750836001600160a01b031661308e84610d62565b6001600160a01b0316145b949350505050565b826001600160a01b03166130b4826116fb565b6001600160a01b0316146130da5760405162461bcd60e51b8152600401610dfd90614c06565b6001600160a01b03821661313c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610dfd565b6131498383836001613a23565b826001600160a01b031661315c826116fb565b6001600160a01b0316146131825760405162461bcd60e51b8152600401610dfd90614c06565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b038781168086526068855283862080546000190190559087168086528386208054600101905586865260679094528285208054909216841790915590518493600080516020614d7a83398151915291a4505050565b6000908152606760205260409020546001600160a01b0316151590565b8047101561326d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610dfd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146132ba576040519150601f19603f3d011682016040523d82523d6000602084013e6132bf565b606091505b5050905080610e9e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610dfd565b6000613341826116fb565b9050613351816000846001613a23565b61335a826116fb565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b038516808552606884528285208054600019019055878552606790935281842080549091169055519293508492600080516020614d7a833981519152908390a461152f565b6000600160dd5460ff1660038111156133e3576133e3614112565b036133ef575060d65490565b600260dd5460ff16600381111561340857613408614112565b03613414575060d75490565b600360dd5460ff16600381111561342d5761342d614112565b03613439575060df5490565b50600090565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166134b85760405162461bcd60e51b8152600401610dfd90614c4b565b61152f8282613aab565b600054610100900460ff166134e95760405162461bcd60e51b8152600401610dfd90614c4b565b611fb7613aeb565b816001600160a01b0316836001600160a01b03160361354e5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610dfd565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6135c68484846130a1565b6135d284848484613b1b565b6122115760405162461bcd60e51b8152600401610dfd90614c96565b6000600360dd5460ff16600381111561360957613609614112565b036136145750600190565b600260dd5460ff16600381111561362d5761362d614112565b0361366e5733600090815260dc602052604090205460ff16156136505750600190565b33600090815260db602052604090205460ff161561366e5750600190565b600160dd5460ff16600381111561368757613687614112565b036136aa5733600090815260dc602052604090205460ff16156136aa5750600190565b336136b3612217565b6001600160a01b0316036134395750600190565b6000600160dd5460ff1660038111156136e2576136e2614112565b036136ee575060d85490565b600260dd5460ff16600381111561370757613707614112565b03613713575060d95490565b600360dd5460ff16600381111561372c5761372c614112565b03613439575060da5490565b60ce5460009033908290815b60ce548110156137c757600081815260cf60205260409020546001600160a01b038086169116036137b557600081815260d0602090815260408083205480845260d19092529091205460ff1615156001146137b357828210156137a5578192505b836137af81614842565b9450505b505b806137bf81614842565b915050613744565b5084518210156138155760405162461bcd60e51b815260206004820152601960248201527843616e206e6f74206d696e7420616c6c2065646974696f6e7360381b6044820152606401610dfd565b60018160005b875181101561391c575b600082815260cf60205260409020546001600160a01b03878116911614613858578161385081614842565b925050613825565b60d060008381526020019081526020016000205492506138918882815181106138835761388361480f565b602002602001015184613c1c565b600083815260cb602090815260408083208054600160ff19918216811790925560d18452828520805490911690911790556001600160a01b038916835260de90915281208054916138e183614842565b909155505060d280549060006138f683614842565b9190505550818061390690614842565b925050808061391490614842565b91505061381b565b50909695505050505050565b600033815b8351811015613a18575b60d354600090815260d1602052604090205460ff16151560010361396f5760d3805490600061396583614842565b9190505550613937565b6139948482815181106139845761398461480f565b602002602001015160d354613c1c565b60d38054600090815260cb602090815260408083208054600160ff1991821681179092559454845260d183528184208054909516179093556001600160a01b038516825260de90529081208054916139eb83614842565b909155505060d28054906000613a0083614842565b91905055508080613a1090614842565b91505061392d565b505060d35492915050565b6001811115612211576001600160a01b03841615613a69576001600160a01b03841660009081526068602052604081208054839290613a6390849061476a565b90915550505b6001600160a01b03831615612211576001600160a01b03831660009081526068602052604081208054839290613aa0908490614a6c565b909155505050505050565b600054610100900460ff16613ad25760405162461bcd60e51b8152600401610dfd90614c4b565b6065613ade8382614956565b506066610e9e8282614956565b600054610100900460ff16613b125760405162461bcd60e51b8152600401610dfd90614c4b565b611fb73361343f565b60006001600160a01b0384163b15613c1157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613b5f903390899088908890600401614ce8565b6020604051808303816000875af1925050508015613b9a575060408051601f3d908101601f19168201909252613b9791810190614d25565b60015b613bf7573d808015613bc8576040519150601f19603f3d011682016040523d82523d6000602084013e613bcd565b606091505b508051600003613bef5760405162461bcd60e51b8152600401610dfd90614c96565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613099565b506001949350505050565b6001600160a01b038216613c725760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610dfd565b613c7b81613200565b15613c985760405162461bcd60e51b8152600401610dfd90614d42565b613ca6600083836001613a23565b613caf81613200565b15613ccc5760405162461bcd60e51b8152600401610dfd90614d42565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b031916841790555183929190600080516020614d7a833981519152908290a461152f565b6001600160e01b03198116811461153157600080fd5b600060208284031215613d4e57600080fd5b813561247381613d26565b600080600080600080600080610100898b031215613d7657600080fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b60005b83811015613dc9578181015183820152602001613db1565b838111156122115750506000910152565b60008151808452613df2816020860160208601613dae565b601f01601f19169290920160200192915050565b6020815260006124736020830184613dda565b600060208284031215613e2b57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b0381168114613e5d57600080fd5b919050565b60008060408385031215613e7557600080fd5b613e7e83613e46565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613eca57613eca613e8c565b604052919050565b60006001600160401b03821115613eeb57613eeb613e8c565b5060051b60200190565b60006020808385031215613f0857600080fd5b82356001600160401b03811115613f1e57600080fd5b8301601f81018513613f2f57600080fd5b8035613f42613f3d82613ed2565b613ea2565b81815260059190911b82018301908381019087831115613f6157600080fd5b928401925b82841015613f8657613f7784613e46565b82529284019290840190613f66565b979650505050505050565b600080600060608486031215613fa657600080fd5b613faf84613e46565b9250613fbd60208501613e46565b9150604084013590509250925092565b60008060408385031215613fe057600080fd5b50508035926020909101359150565b6001600160a01b03929092168252602082015260400190565b60006020828403121561401a57600080fd5b81356004811061247357600080fd5b60008060006060848603121561403e57600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261406757600080fd5b5081356001600160401b0381111561407e57600080fd5b6020830191508360208260051b850101111561106557600080fd5b6000806000806000606086880312156140b157600080fd5b8535945060208601356001600160401b03808211156140cf57600080fd5b6140db89838a01614055565b909650945060408801359150808211156140f457600080fd5b5061410188828901614055565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061414a57634e487b7160e01b600052602160045260246000fd5b91905290565b60006001600160401b0382111561416957614169613e8c565b50601f01601f191660200190565b6000614185613f3d84614150565b905082815283838301111561419957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126141c157600080fd5b61247383833560208501614177565b600080600080600080600080610100898b0312156141ed57600080fd5b8835975060208901356001600160401b038082111561420b57600080fd5b6142178c838d016141b0565b985060408b013591508082111561422d57600080fd5b6142398c838d016141b0565b975060608b0135965060808b013591508082111561425657600080fd5b6142628c838d016141b0565b955060a08b0135945060c08b013591508082111561427f57600080fd5b5061428c8b828c016141b0565b92505060e089013590509295985092959890939650565b6080815260006142b66080830187613dda565b85602084015282810360408401526142ce8186613dda565b91505082606083015295945050505050565b600080600080604085870312156142f657600080fd5b84356001600160401b038082111561430d57600080fd5b61431988838901614055565b9096509450602087013591508082111561433257600080fd5b5061433f87828801614055565b95989497509550505050565b60006020828403121561435d57600080fd5b61247382613e46565b60008060006060848603121561437b57600080fd5b8335925060208401356001600160401b038082111561439957600080fd5b6143a5878388016141b0565b935060408601359150808211156143bb57600080fd5b506143c8868287016141b0565b9150509250925092565b600080600080600060a086880312156143ea57600080fd5b6143f386613e46565b945061440160208701613e46565b935060408601356001600160401b038082111561441d57600080fd5b61442989838a016141b0565b9450606088013591508082111561443f57600080fd5b5061444c888289016141b0565b95989497509295608001359392505050565b801515811461153157600080fd5b6000806040838503121561447f57600080fd5b61448883613e46565b915060208301356144988161445e565b809150509250929050565b600080600080608085870312156144b957600080fd5b6144c285613e46565b93506144d060208601613e46565b92506040850135915060608501356001600160401b038111156144f257600080fd5b8501601f8101871361450357600080fd5b61451287823560208401614177565b91505092959194509250565b600082601f83011261452f57600080fd5b8135602061453f613f3d83613ed2565b82815260059290921b8401810191818101908684111561455e57600080fd5b8286015b8481101561459d5780356001600160401b038111156145815760008081fd5b61458f8986838b01016141b0565b845250918301918301614562565b509695505050505050565b600082601f8301126145b957600080fd5b813560206145c9613f3d83613ed2565b82815260059290921b840181019181810190868411156145e857600080fd5b8286015b8481101561459d57803583529183019183016145ec565b600080600080600080600060e0888a03121561461e57600080fd5b873596506020880135955060408801356001600160401b038082111561464357600080fd5b61464f8b838c0161451e565b965060608a013591508082111561466557600080fd5b6146718b838c0161451e565b955060808a013591508082111561468757600080fd5b6146938b838c016145a8565b945060a08a01359150808211156146a957600080fd5b6146b58b838c0161451e565b935060c08a01359150808211156146cb57600080fd5b506146d88a828b016145a8565b91505092959891949750929550565b600080604083850312156146fa57600080fd5b61470383613e46565b915061471160208401613e46565b90509250929050565b600181811c9082168061472e57607f821691505b60208210810361474e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561477c5761477c614754565b500390565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008160001904831182151516156147e8576147e8614754565b500290565b60008261480a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561483757600080fd5b81356124738161445e565b60006001820161485457614854614754565b5060010190565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252601c908201527f596f752063757272656e746c792063616e206e6f742072656465656d00000000604082015260600190565b6000602082840312156148ec57600080fd5b5051919050565b60006020828403121561490557600080fd5b81516124738161445e565b601f821115610e9e57600081815260208120601f850160051c810160208610156149375750805b601f850160051c820191505b8181101561123257828155600101614943565b81516001600160401b0381111561496f5761496f613e8c565b6149838161497d845461471a565b84614910565b602080601f8311600181146149b857600084156149a05750858301515b600019600386901b1c1916600185901b178555611232565b600085815260208120601f198616915b828110156149e7578886015182559484019460019091019084016149c8565b5085821015614a055787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b6020808252600b908201526a57726f6e6720707269636560a81b604082015260600190565b60008219821115614a7f57614a7f614754565b500190565b602080825260129082015271088c2e8c240e6d2f4ca40dad2e6dac2e8c6d60731b604082015260600190565b60008154614abd8161471a565b808552602060018381168015614ada5760018114614af457614b22565b60ff1985168884015283151560051b880183019550614b22565b866000528260002060005b85811015614b1a5781548a8201860152908301908401614aff565b890184019650505b505050505092915050565b60c081526000614b4060c0830189613dda565b8281036020840152614b528189614ab0565b90508281036040840152614b668188614ab0565b90508281036060840152614b7a8187614ab0565b6080840195909552505060a00152949350505050565b600060208284031215614ba257600080fd5b81516001600160401b03811115614bb857600080fd5b8201601f81018413614bc957600080fd5b8051614bd7613f3d82614150565b818152856020838501011115614bec57600080fd5b614bfd826020830160208601613dae565b95945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614d1b90830184613dda565b9695505050505050565b600060208284031215614d3757600080fd5b815161247381613d26565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c51a6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622a26469706673582212207362e099d750e48b9f2c288016c94a84422b5d2b8607b91aff352473f03d26ef64736f6c634300080f0033",
  "devdoc": {
    "author": "Zien Repository: https://github.com/joinzien/expanded-nft",
    "details": "This allows creators to mint a unique serial drop of an expanded NFT within a custom contract",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn User burn function for token id "
        }
      },
      "getAllowedMinter()": {
        "details": "Sets the types of users who is allowed to mint."
      },
      "getAnimationHash(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getAnimationUrl(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getConditionReportHash(uint256)": {
        "details": "Get URIs for the condition report",
        "returns": {
          "_0": "conditionReportUrl, conditionReportHash"
        }
      },
      "getConditionReportUrl(uint256)": {
        "details": "Get URIs for the condition report",
        "returns": {
          "_0": "conditionReportUrl, conditionReportHash"
        }
      },
      "getDescription(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getGeneralMintLimit()": {
        "details": "returns the general mint limit"
      },
      "getImageHash(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getImageUrl(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getMembersMintLimit()": {
        "details": "returns the member mint limit"
      },
      "getMembersSalePrice()": {
        "details": "returns the member sale price"
      },
      "getRedeemedAnimationHash(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getRedeemedAnimationUrl(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getRedeemedImageHash(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getRedeemedImageUrl(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "getRoyaltyBPS()": {
        "details": "returns the royalty BPS"
      },
      "getSplitBPS()": {
        "details": "returns the split BPS"
      },
      "getURIs(uint256)": {
        "details": "Get URIs for edition NFT",
        "returns": {
          "_0": "_imageUrl, _imageHash, _animationUrl, _animationHash"
        }
      },
      "getVIPMintLimit()": {
        "details": "returns the VIP mint limit"
      },
      "getVIPSalePrice()": {
        "details": "returns the VIP sale price"
      },
      "getWhoCanMint()": {
        "details": "returns who can mint"
      },
      "initialize(address,address,string,string,uint256)": {
        "details": "Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later",
        "params": {
          "_dropSize": "Number of editions that can be minted in total.    ",
          "_name": "Name of drop, used in the title as \"$NAME NUMBER/TOTAL\"",
          "_owner": "wallet addres for the user that owns and can mint the drop, gets royalty and sales payouts and can update the base url if needed.",
          "_symbol": "Symbol of the new token contract",
          "artistWallet": "wallet address for thr User that created the drop"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "loadMetadataChunk(uint256,uint256,string[],string[],bytes32[],string[],bytes32[])": {
        "details": "Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later",
        "params": {
          "_description": "How many rows of data to load",
          "animationHash": "The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.",
          "animationUrl": "Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs",
          "count": "Description of the edition, used in the description field of the NFT",
          "imageHash": "SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.",
          "imageUrl": "Image URL of the the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a drop to render the NFT.",
          "startIndex": "The first ID index to write the data"
        }
      },
      "mintEdition(address)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "to": "address to send the newly minted edition to"
        }
      },
      "mintEditions(address[])": {
        "details": "This mints multiple editions to the given list of addresses.",
        "params": {
          "recipients": "list of addresses to send the newly minted editions to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchase()": {
        "details": "This allows the user to purchase an edition at the given price in the contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reserve(address[],uint256[])": {
        "details": "Set various pricing related values",
        "params": {
          "tokenIDs": "A list of tokenId to reserve                                                                           ",
          "wallets": "A list of wallets"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAllowedMinter(uint8)": {
        "details": "Sets the types of users who is allowed to mint.",
        "params": {
          "minters": "WhoCanMint enum of minter types"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApprovedMinters(uint256,address[],bool[])": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setApprovedVIPMinters(uint256,address[],bool[])": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setMembersSalePrice(uint256)": {
        "details": "This sets the members ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "setPricing(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Set various pricing related values",
        "params": {
          "_generalMintLimit": "Mint limit for the general public                                                                                 ",
          "_generalSalePrice": "SalePrice for the general public     ",
          "_membersMintLimit": "Mint limit for Members  ",
          "_membersSalePrice": "SalePrice for Members  ",
          "_royaltyBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.",
          "_splitBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty. ",
          "_vipMintLimit": "Mint limit for VIPs",
          "_vipSalePrice": "Sale price for VIPs"
        }
      },
      "setSalePrice(uint256)": {
        "details": "This sets a simple ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "setSalePrices(uint256,uint256,uint256)": {
        "details": "This sets the members ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "generalSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.                                              ",
          "membersSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.",
          "vipSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "setVIPSalePrice(uint256)": {
        "details": "This sets the VIP ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the drop"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEditionURLs(uint256,string,string)": {
        "details": "Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated."
      },
      "withdraw()": {
        "details": "This withdraws ETH from the contract to the contract owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getArtistWallet()": {
        "notice": "return the artists wallet address"
      },
      "getPaymentToken()": {
        "notice": "return the payment tokens address"
      },
      "numberCanMint()": {
        "notice": "Returns the number of editions allowed to mint"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      },
      "setArtistWallet(address)": {
        "notice": "set the artists wallet address"
      },
      "setPaymentToken(address)": {
        "notice": "set a new payment token address"
      }
    },
    "notice": "This is a smart contract for handling dynamic contract minting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 819,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3580,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3873,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2153,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2155,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2159,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2163,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2167,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2173,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3093,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 589,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 709,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5767,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "description",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 5769,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_artistWallet",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 5774,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_perTokenMetadata",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(PerToken)5735_storage)"
      },
      {
        "astId": 5776,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "dropSize",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 5778,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_loadedMetadata",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 5780,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_reserveCount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 5784,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_reserveAddress",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5788,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_reserveTokenId",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5792,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_tokenClaimed",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5794,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_claimCount",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 5796,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 5799,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_pricing",
        "offset": 0,
        "slot": "212",
        "type": "t_struct(Pricing)5765_storage"
      },
      {
        "astId": 5801,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "salePrice",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 5804,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_paymentTokenERC20",
        "offset": 0,
        "slot": "224",
        "type": "t_contract(IERC20Upgradeable)1795"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1795": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(ExpandedNFTStates)5658": {
        "encoding": "inplace",
        "label": "enum ExpandedNFT.ExpandedNFTStates",
        "numberOfBytes": "1"
      },
      "t_enum(WhoCanMint)5650": {
        "encoding": "inplace",
        "label": "enum ExpandedNFT.WhoCanMint",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PerToken)5735_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ExpandedNFT.PerToken)",
        "numberOfBytes": "32",
        "value": "t_struct(PerToken)5735_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PerToken)5735_storage": {
        "encoding": "inplace",
        "label": "struct ExpandedNFT.PerToken",
        "members": [
          {
            "astId": 5708,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "editionState",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ExpandedNFTStates)5658"
          },
          {
            "astId": 5710,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "editionFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5712,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5714,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "metadataLoaded",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 5716,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "animationUrl",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 5718,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "animationHash",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 5720,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "imageUrl",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 5722,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "imageHash",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 5724,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "redeemedAnimationUrl",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 5726,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "redeemedAnimationHash",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          },
          {
            "astId": 5728,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "redeemedImageUrl",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 5730,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "redeemedImageHash",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes32"
          },
          {
            "astId": 5732,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "conditionReportUrl",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 5734,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "conditionReportHash",
            "offset": 0,
            "slot": "13",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Pricing)5765_storage": {
        "encoding": "inplace",
        "label": "struct ExpandedNFT.Pricing",
        "members": [
          {
            "astId": 5737,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "royaltyBPS",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5739,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "splitBPS",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5741,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "vipSalePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5743,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "membersSalePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5745,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "vipMintLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5747,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "membersMintLimit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5749,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "generalMintLimit",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5753,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "allowedMinters",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5757,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "vipAllowedMinters",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5760,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "whoCanMint",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(WhoCanMint)5650"
          },
          {
            "astId": 5764,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "mintCounts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}