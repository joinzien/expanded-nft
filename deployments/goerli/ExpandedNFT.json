{
  "address": "0x78c13e0ED1191f67a63EEE24c4646011b1E14061",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeliveryAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OfferTermsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ProductionComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RedeemAborted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RedeemStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ExpandedNFT.WhoCanMint",
          "name": "minters",
          "type": "uint8"
        }
      ],
      "name": "WhoCanMintChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "abortRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptDelivery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "acceptOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "allowListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "canMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowListMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowListPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedMinter",
      "outputs": [
        {
          "internalType": "enum ExpandedNFT.WhoCanMint",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArtistWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneralMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getReservationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getReservationsList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSplitBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "artistWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dropSize",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "randomMint",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "isReserved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_mintedMetadataUrl",
          "type": "string[]"
        }
      ],
      "name": "loadMetadataChunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_redeemedMetadataUrl",
          "type": "string"
        }
      ],
      "name": "loadRedeemedMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataloaded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintMultipleEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "numberOfFreeMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_redeemedMetadataUrl",
          "type": "string"
        }
      ],
      "name": "productionComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeemedState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redemptionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rejectOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        }
      ],
      "name": "reserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "minter",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "allowed",
          "type": "bool[]"
        }
      ],
      "name": "setAllowListMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setAllowListSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ExpandedNFT.WhoCanMint",
          "name": "minters",
          "type": "uint8"
        }
      ],
      "name": "setAllowedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setArtistWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "freeMintLimit",
          "type": "uint256"
        }
      ],
      "name": "setFreeMints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setOfferTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_splitBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowListSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generalSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowListMintLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generalMintLimit",
          "type": "uint256"
        }
      ],
      "name": "setPricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allowListSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generalSalePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        }
      ],
      "name": "unreserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "whoReserved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbae4dd0988390fa2b8baea9689fc4a5771a9b155abba74454f0ccb28f6d16065",
  "receipt": {
    "to": null,
    "from": "0xaD1fcD83DE77518d3D1b769F22B0A169eD55A919",
    "contractAddress": "0x78c13e0ED1191f67a63EEE24c4646011b1E14061",
    "transactionIndex": 33,
    "gasUsed": "4108792",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000",
    "blockHash": "0x30478fb0c0856be3b120d24a7ddab1e840372c8b319eaf26251cc2d06d1bf15f",
    "transactionHash": "0xbae4dd0988390fa2b8baea9689fc4a5771a9b155abba74454f0ccb28f6d16065",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 8658419,
        "transactionHash": "0xbae4dd0988390fa2b8baea9689fc4a5771a9b155abba74454f0ccb28f6d16065",
        "address": "0x78c13e0ED1191f67a63EEE24c4646011b1E14061",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 78,
        "blockHash": "0x30478fb0c0856be3b120d24a7ddab1e840372c8b319eaf26251cc2d06d1bf15f"
      }
    ],
    "blockNumber": 8658419,
    "cumulativeGasUsed": "16669881",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1db8ed3c026821f2925f4055c3a3f765",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeliveryAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferTermsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ProductionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RedeemAborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RedeemStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ExpandedNFT.WhoCanMint\",\"name\":\"minters\",\"type\":\"uint8\"}],\"name\":\"WhoCanMintChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"abortRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptDelivery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"acceptOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"allowListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowListMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowListPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedMinter\",\"outputs\":[{\"internalType\":\"enum ExpandedNFT.WhoCanMint\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtistWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneralMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getReservationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getReservationsList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplitBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artistWallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dropSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"randomMint\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"isReserved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_mintedMetadataUrl\",\"type\":\"string[]\"}],\"name\":\"loadMetadataChunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_redeemedMetadataUrl\",\"type\":\"string\"}],\"name\":\"loadRedeemedMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataloaded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintMultipleEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"numberOfFreeMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_redeemedMetadataUrl\",\"type\":\"string\"}],\"name\":\"productionComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemedState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redemptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rejectOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"minter\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"allowed\",\"type\":\"bool[]\"}],\"name\":\"setAllowListMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setAllowListSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ExpandedNFT.WhoCanMint\",\"name\":\"minters\",\"type\":\"uint8\"}],\"name\":\"setAllowedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setArtistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freeMintLimit\",\"type\":\"uint256\"}],\"name\":\"setFreeMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setOfferTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_splitBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowListSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generalSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowListMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generalMintLimit\",\"type\":\"uint256\"}],\"name\":\"setPricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowListSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generalSalePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"unreserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"whoReserved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zien Repository: https://github.com/joinzien/expanded-nft\",\"details\":\"This allows creators to mint a unique serial drop of an expanded NFT within a custom contract\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.    \"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"allowListed(address)\":{\"details\":\"returns if the address is on the allow list\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn User burn function for token id \"}},\"canMint(address)\":{\"details\":\"returns  if the address can mint\"},\"getAllowListCount()\":{\"details\":\"returns the number on the allow list\"},\"getAllowListMintLimit()\":{\"details\":\"returns the allow list mint limit\"},\"getAllowListPrice()\":{\"details\":\"returns the allow list sale price\"},\"getAllowedMinter()\":{\"details\":\"Sets the types of users who is allowed to mint.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getGeneralMintLimit()\":{\"details\":\"returns the general mint limit\"},\"getMintLimit(address)\":{\"details\":\"returns mint limit for the address\"},\"getReservationsCount(address)\":{\"details\":\"returns the number of reservations for this wallet\",\"params\":{\"wallet\":\"The wallet being checked                                                                          \"}},\"getReservationsList(address)\":{\"details\":\"returns the IDs reserved by the wallet\",\"params\":{\"wallet\":\"The wallet being checked                                                                          \"}},\"getRoyaltyBPS()\":{\"details\":\"returns the royalty BPS\"},\"getSplitBPS()\":{\"details\":\"returns the split BPS\"},\"initialize(address,address,string,string,uint256,bool)\":{\"details\":\"Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later\",\"params\":{\"_dropSize\":\"Number of editions that can be minted in total. \",\"_name\":\"Name of drop, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\",\"_owner\":\"wallet addres for the user that owns and can mint the drop, gets royalty and sales payouts and can update the base url if needed.\",\"_symbol\":\"Symbol of the new token contract\",\"artistWallet\":\"wallet address for thr User that created the drop\",\"randomMint\":\"Mint in an random order   \"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isReserved(uint256)\":{\"details\":\"Unreserve an edition for a wallet\",\"params\":{\"tokenID\":\"the tokenId to check                                                                           \"}},\"loadMetadataChunk(uint256,uint256,string[])\":{\"details\":\"Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later\",\"params\":{\"_mintedMetadataUrl\":\"The URL to the metadata for this Edtion\",\"count\":\"How many rows of data to load \",\"startIndex\":\"The first ID index to write the data\"}},\"loadRedeemedMetadata(uint256,string)\":{\"details\":\"Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later\",\"params\":{\"_redeemedMetadataUrl\":\"The URL to the metadata for this Edtion\",\"tokenID\":\"The index to write the data\"}},\"mintEdition(address)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"to\":\"address to send the newly minted edition to\"}},\"mintEditions(address[])\":{\"details\":\"This mints multiple editions to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses to send the newly minted editions to\"}},\"mintMultipleEditions(address,uint256)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"count\":\"how many editions to mint      \",\"to\":\"address to send the newly minted edition to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"numberOfFreeMints(address)\":{\"details\":\"Check the number of fre mints a wallet has\",\"params\":{\"wallet\":\"The address of the wallet                                                                       \"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"price()\":{\"details\":\"returns the current ETH sales price based on who can currently mint.\"},\"purchase()\":{\"details\":\"This allows the user to purchase an edition at the given price in the contract.\"},\"redeemedState(uint256)\":{\"details\":\"returns the current state of the provided token\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserve(address[],uint256[])\":{\"details\":\"Reserve an edition for a wallet\",\"params\":{\"tokenIDs\":\"A list of tokenId to reserve                                                                           \",\"wallets\":\"A list of wallets\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAllowListMinters(uint256,address[],bool[])\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setAllowListSalePrice(uint256)\":{\"details\":\"This sets the allow list ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"The amount of ETH is needed to start the sale.\"}},\"setAllowedMinter(uint8)\":{\"details\":\"Sets the types of users who is allowed to mint.\",\"params\":{\"minters\":\"WhoCanMint enum of minter types\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setFreeMints(address,uint256)\":{\"details\":\"Set the number of freemints for a wallet\",\"params\":{\"freeMintLimit\":\"How many free mints should the wallet get                                                                           \",\"wallet\":\"The address of the wallet\"}},\"setPricing(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Set various pricing related values\",\"params\":{\"_allowListMintLimit\":\"Mint limit for allow listed wallets\",\"_allowListSalePrice\":\"Sale price for allow listed wallets\",\"_generalMintLimit\":\"Mint limit for the general public                                                                                 \",\"_generalSalePrice\":\"SalePrice for the general public     \",\"_royaltyBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.\",\"_splitBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty. \"}},\"setSalePrice(uint256)\":{\"details\":\"This sets a simple ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"The amount of ETH is needed to start the sale.\"}},\"setSalePrices(uint256,uint256)\":{\"details\":\"This sets the members ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"allowListSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\",\"generalSalePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.                                              \"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the drop\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unreserve(uint256[])\":{\"details\":\"Unreserve an edition for a wallet\",\"params\":{\"tokenIDs\":\"A list of tokenId to unreserve                                                                           \"}},\"whoReserved(uint256)\":{\"details\":\"who reserved the provided ID\",\"params\":{\"tokenID\":\"the tokenId to check                                                                           \"}},\"withdraw()\":{\"details\":\"This withdraws ETH from the contract to the contract owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getArtistWallet()\":{\"notice\":\"return the artists wallet address\"},\"getPaymentToken()\":{\"notice\":\"return the payment tokens address\"},\"numberCanMint()\":{\"notice\":\"Returns the number of editions allowed to mint\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"},\"setArtistWallet(address)\":{\"notice\":\"set the artists wallet address\"},\"setPaymentToken(address)\":{\"notice\":\"set a new payment token address\"}},\"notice\":\"This is a smart contract for handling dynamic contract minting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExpandedNFT.sol\":\"ExpandedNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xac29c453f4cf43afe4c9599374b6e1ed493c18644d814554e8a5969aaa6f3486\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/ExpandedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n    ExpandedNFTs\\n\\n */\\n\\npragma solidity ^0.8.19;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IExpandedNFT} from \\\"./IExpandedNFT.sol\\\";\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    @dev This allows creators to mint a unique serial drop of an expanded NFT within a custom contract\\n    @author Zien\\n    Repository: https://github.com/joinzien/expanded-nft\\n*/\\ncontract ExpandedNFT is\\n    ERC721Upgradeable,\\n    IExpandedNFT,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    enum WhoCanMint{ NOT_FOR_SALE, ALLOWLIST, ANYONE }\\n\\n    enum ExpandedNFTStates{ UNMINTED, RESERVED, MINTED, REDEEM_STARTED, SET_OFFER_TERMS, ACCEPTED_OFFER, PRODUCTION_COMPLETE, REDEEMED }\\n    \\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n    event WhoCanMintChanged(WhoCanMint minters);\\n\\n    // State change events\\n    event RedeemStarted(uint256 tokenId, address owner);\\n    event RedeemAborted(uint256 tokenId, address owner);    \\n    event OfferTermsSet(uint256 tokenId);\\n    event OfferAccepted(uint256 tokenId);\\n    event OfferRejected(uint256 tokenId);\\n    event ProductionComplete(uint256 tokenId);\\n    event DeliveryAccepted(uint256 tokenId);\\n\\n    /// @title EIP-721 Metadata Update Extension\\n\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.    \\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId); \\n\\n    struct PerToken { \\n        ExpandedNFTStates state;\\n\\n        // Who reserved this\\n        address reservedBy;\\n\\n        // Redemption price in _paymentTokenERC20\\n        uint256 editionFee; \\n\\n        // Metadata\\n        bool metadataLoaded;\\n        string mintedMetadataUrl;\\n        string redeemedMetadataUrl;\\n    }\\n\\n    struct Pricing { \\n        // Royalty amount in bps\\n        uint256 royaltyBPS;\\n\\n        // Split amount to the platforms. the artist in bps\\n        uint256 splitBPS;\\n\\n        // Price for allow list sales\\n        uint256 allowListSalePrice;\\n\\n        // Limit for allow list sales\\n        uint256 allowListMintLimit;\\n\\n        // Price for general sales\\n        uint256 generalMintLimit;   \\n\\n        // Allow list Addresses allowed to mint edition\\n        mapping(address => bool) allowListMinters;\\n\\n        // The number on the allow list\\n        uint256 allowListCount;\\n\\n        // Who can currently mint\\n        WhoCanMint whoCanMint;\\n\\n        // Mint counts for each address\\n        mapping(address => uint256) mintCounts;                               \\n\\n        // Free Mints\\n        mapping(address =>  uint256) freeMints;\\n    }\\n\\n    // Artists wallet address\\n    address private _artistWallet;\\n\\n    // Per Token data\\n    mapping(uint256 => PerToken) private _perTokenMetadata;\\n\\n    // Total size of the drop that can be minted\\n    uint256 public dropSize;\\n    uint256 private _claimCount; \\n\\n    // Pricing\\n    Pricing private _pricing;\\n    uint256 public salePrice;\\n\\n    // Reservations\\n    mapping(address => uint256)  private _resevationCount;\\n    mapping(address => uint256[]) private _resevations;   \\n\\n    uint256 private _loadedMetadata;\\n\\n    bool private _randomMint;\\n    uint256 private _currentIndex;\\n\\n    // ERC20 interface for the payment token\\n    IERC20Upgradeable private _paymentTokenERC20;\\n\\n    // Global constructor for factory\\n    constructor() {\\n        _pricing.whoCanMint = WhoCanMint.NOT_FOR_SALE;\\n\\n        _disableInitializers();\\n    }\\n\\n    /**\\n      @param _owner wallet addres for the user that owns and can mint the drop, gets royalty and sales payouts and can update the base url if needed.\\n      @param artistWallet wallet address for thr User that created the drop\\n      @param _name Name of drop, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _dropSize Number of editions that can be minted in total. \\n      @param randomMint Mint in an random order   \\n      @dev Function to create a new drop. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the drop.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        address artistWallet,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _dropSize,\\n        bool randomMint\\n    ) public initializer {\\n        require(_dropSize > 0, \\\"Drop size must be > 0\\\");\\n\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n\\n        _artistWallet = artistWallet;\\n        dropSize = _dropSize;\\n\\n        // Set edition id start to be 1 not 0\\n        _claimCount = 0; \\n        _currentIndex = 1;\\n        _randomMint = randomMint;\\n\\n        // Set the metadata\\n        _loadedMetadata = 0; \\n    }\\n\\n    /// @dev returns the number of minted tokens within the drop\\n    function totalSupply() public view returns (uint256) {\\n        return _claimCount;\\n    }\\n\\n    /// @dev returns the royalty BPS\\n    function getRoyaltyBPS() public view returns (uint256) {\\n        return _pricing.royaltyBPS;\\n    }\\n\\n    /// @dev returns the split BPS\\n    function getSplitBPS() public view returns (uint256) {\\n        return _pricing.splitBPS;\\n    }\\n\\n    /// @dev returns the allow list sale price\\n    function getAllowListPrice() public view returns (uint256) {\\n        return _pricing.allowListSalePrice;\\n    }\\n\\n    /// @dev returns the allow list mint limit\\n    function getAllowListMintLimit() public view returns (uint256) {\\n        return _pricing.allowListMintLimit;\\n    }\\n\\n    /// @dev returns the number on the allow list\\n    function getAllowListCount() public view returns (uint256) {\\n        return _pricing.allowListCount;\\n    }    \\n\\n    /// @dev returns the general mint limit\\n    function getGeneralMintLimit() public view returns (uint256) {\\n        return _pricing.generalMintLimit;\\n    }\\n\\n    /// @dev returns mint limit for the address\\n    function getMintLimit(address wallet) public view returns (uint256) {\\n        uint256 currentMintLimit = _currentMintLimit();\\n\\n        if (_pricing.mintCounts[wallet]  >= currentMintLimit) {\\n            return 0;\\n        }\\n            \\n        return (currentMintLimit - _pricing.mintCounts[wallet]);   \\n    }\\n\\n    /// @dev returns  if the address can mint\\n    function canMint(address wallet) public view returns (bool) {\\n        uint256 currentMintLimit = getMintLimit(wallet);   \\n        return (currentMintLimit > 0);   \\n    }\\n\\n    /// @dev returns if the address is on the allow list\\n    function allowListed(address wallet) public view returns (bool) {\\n        return _pricing.allowListMinters[wallet];\\n    }\\n\\n    /**\\n      @dev returns the current ETH sales price\\n           based on who can currently mint.\\n     */\\n    function price() public view returns (uint256){\\n        if (_pricing.whoCanMint == WhoCanMint.ALLOWLIST) {\\n            return _pricing.allowListSalePrice;\\n        } else if (_pricing.whoCanMint == WhoCanMint.ANYONE) {\\n            return salePrice;\\n        } \\n            \\n        return 0;       \\n    }\\n\\n    function redemptionPrice(uint256 tokenId) public view returns (uint256) {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n\\n        return _perTokenMetadata[tokenId].editionFee;\\n    }    \\n\\n    /**\\n      @dev returns the current state of the provided token\\n     */\\n    function redeemedState(uint256 tokenId) public view returns (uint256) {\\n        require(tokenId > 0, \\\"tokenID > 0\\\");\\n        require(tokenId <= dropSize, \\\"tokenID <= drop size\\\");\\n\\n        return uint256(_perTokenMetadata[tokenId].state);\\n    }\\n\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through IExpandedNFT interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase an edition\\n           at the given price in the contract.\\n     */\\n\\n    function purchase() external payable returns (uint256) {\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = msg.sender;\\n\\n        return _mintEditionsBody(toMint);  \\n    }\\n\\n     /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to) external payable override returns (uint256) {\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n\\n        return _mintEditionsBody(toMint);        \\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(address[] memory recipients)\\n        external payable override returns (uint256)\\n    {\\n        return _mintEditionsBody(recipients);\\n    } \\n\\n     /**\\n      @param to address to send the newly minted edition to\\n      @param count how many editions to mint      \\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintMultipleEditions(address to, uint256 count) external payable returns (uint256) {\\n        address[] memory toMint = new address[](count);\\n\\n        for (uint256 r = 0; r < count; r++) {\\n            toMint[r] = to;\\n        }\\n\\n        return _mintEditionsBody(toMint);        \\n    }      \\n\\n    /**\\n      @param numberToBeMinted Hopw many IDs trying to be minted    \\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function _paymentAmountCorrect(uint256 numberToBeMinted)\\n        internal returns (bool)\\n    {\\n        uint256 freeMintCount = _pricing.freeMints[msg.sender];\\n\\n        if (numberToBeMinted <= freeMintCount) {\\n            if (msg.value > 0) {\\n                return (false);\\n            }\\n\\n            return (true);\\n        }\\n\\n        uint256 remainingToMint = numberToBeMinted - freeMintCount;\\n\\n        if (msg.value == (price() * remainingToMint)) {\\n            return (true);\\n        }\\n\\n        return (false);\\n    }\\n\\n    /**\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function _getNextReservation()\\n        internal returns (uint256)\\n    {\\n        uint256 index = 0;\\n        while (_resevations[msg.sender][index] == 0) {\\n            index++;\\n        }  \\n\\n        uint256 currentToken = _resevations[msg.sender][index];\\n\\n        _resevations[msg.sender][index] = 0;  \\n        _resevationCount[msg.sender]--;\\n        _perTokenMetadata[currentToken].reservedBy = address(0);        \\n        \\n        return  currentToken;\\n    }\\n\\n    /**\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function _selectAvailableId()\\n        internal returns (uint256)\\n    {\\n        if (_randomMint) {\\n            uint256 random = uint(keccak256(abi.encodePacked(block.timestamp,msg.sender,block.prevrandao,gasleft()))) % dropSize;\\n            uint256 randomIndex = 1 + random;\\n\\n            while (_perTokenMetadata[randomIndex].state != ExpandedNFTStates.UNMINTED) {\\n                randomIndex++;\\n\\n                if (randomIndex > dropSize)  {\\n                    randomIndex = 1;\\n                }\\n            } \\n\\n            return randomIndex;\\n        }\\n\\n        uint256 index = _currentIndex;\\n\\n        while (_perTokenMetadata[index].state != ExpandedNFTStates.UNMINTED) {\\n            index++;\\n        } \\n\\n        _currentIndex = index;\\n\\n        return  index;\\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function _mintEditionsBody(address[] memory recipients)\\n        internal returns (uint256)\\n    {\\n        require(_loadedMetadata >= dropSize, \\\"Not all metadata loaded\\\");\\n\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n\\n        require(recipients.length <= numberCanMint(), \\\"Exceeded supply\\\");\\n        require((_pricing.mintCounts[msg.sender] + recipients.length) <= _currentMintLimit(), \\\"Exceeded mint limit\\\");\\n\\n        require(_paymentAmountCorrect(recipients.length), \\\"Wrong price\\\");\\n\\n        uint256 currentToken;\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            if (_resevationCount[msg.sender] > 0) {\\n                currentToken = _getNextReservation();\\n            } else {\\n                currentToken = _selectAvailableId();\\n            }\\n\\n            _mint(recipients[i], currentToken);\\n\\n            uint256 freeMintCount = _pricing.freeMints[msg.sender];\\n            if (freeMintCount > 0) {\\n                _pricing.freeMints[msg.sender] = freeMintCount - 1;\\n            }\\n\\n            _perTokenMetadata[currentToken].state = ExpandedNFTStates.MINTED;\\n            _pricing.mintCounts[msg.sender]++;\\n            _claimCount++;\\n\\n            emit EditionSold(price(), msg.sender);\\n            emit MetadataUpdate(currentToken);            \\n        }\\n\\n        return currentToken;        \\n    }  \\n\\n    /**\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @param _splitBPS BPS of the royalty set on the contract. Can be 0 for no royalty. \\n      @param _allowListSalePrice Sale price for allow listed wallets\\n      @param _generalSalePrice SalePrice for the general public     \\n      @param _allowListMintLimit Mint limit for allow listed wallets\\n      @param _generalMintLimit Mint limit for the general public                                                                                 \\n      @dev Set various pricing related values\\n     */\\n    function setPricing (\\n        uint256 _royaltyBPS,\\n        uint256 _splitBPS,\\n        uint256 _allowListSalePrice,  \\n        uint256 _generalSalePrice,\\n        uint256 _allowListMintLimit,\\n        uint256 _generalMintLimit             \\n    ) external onlyOwner {  \\n        _pricing.royaltyBPS = _royaltyBPS;\\n        _pricing.splitBPS = _splitBPS;\\n\\n        _pricing.allowListSalePrice = _allowListSalePrice;\\n        salePrice = _generalSalePrice;\\n\\n        _pricing.allowListMintLimit = _allowListMintLimit;\\n        _pricing.generalMintLimit = _generalMintLimit;\\n\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @param wallets A list of wallets\\n      @param tokenIDs A list of tokenId to reserve                                                                           \\n      @dev Reserve an edition for a wallet\\n     */\\n    function reserve (address[] calldata wallets, uint256[] calldata tokenIDs)  external onlyOwner {  \\n        require(wallets.length == tokenIDs.length, \\\"Lists length must match\\\");\\n\\n        for (uint256 i = 0; i < wallets.length; i++) {\\n            require(_perTokenMetadata[tokenIDs[i]].state == ExpandedNFTStates.UNMINTED, \\\"Needs to be unminted\\\");\\n\\n            _perTokenMetadata[tokenIDs[i]].reservedBy = wallets[i];\\n            _perTokenMetadata[tokenIDs[i]].state = ExpandedNFTStates.RESERVED;\\n            _resevationCount[wallets[i]]++;\\n            _resevations[wallets[i]].push(tokenIDs[i]); \\n        }\\n    }\\n\\n    /**\\n      @param tokenIDs A list of tokenId to unreserve                                                                           \\n      @dev Unreserve an edition for a wallet\\n     */\\n    function unreserve (uint256[] calldata tokenIDs) external onlyOwner {  \\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\\n            require(_perTokenMetadata[tokenIDs[i]].state == ExpandedNFTStates.RESERVED, \\\"Not reserved\\\");\\n\\n            address wallet = _perTokenMetadata[tokenIDs[i]].reservedBy;\\n            uint256 index = 0;\\n            while (_resevations[wallet][index] != tokenIDs[i]) {\\n                index++;\\n            }\\n\\n            _resevations[wallet][index] = 0;  \\n\\n            _resevationCount[_perTokenMetadata[tokenIDs[i]].reservedBy]--;\\n            _perTokenMetadata[tokenIDs[i]].reservedBy = address(0);\\n            _perTokenMetadata[tokenIDs[i]].state = ExpandedNFTStates.UNMINTED;\\n        }\\n    }\\n\\n    /**\\n      @param tokenID the tokenId to check                                                                           \\n      @dev Unreserve an edition for a wallet\\n     */\\n    function isReserved (uint256 tokenID) external view returns (bool) {  \\n        return _perTokenMetadata[tokenID].reservedBy != address(0);\\n    }\\n\\n    /**\\n      @param tokenID the tokenId to check                                                                           \\n      @dev who reserved the provided ID\\n     */\\n    function whoReserved (uint256 tokenID) external view returns (address) {  \\n        return _perTokenMetadata[tokenID].reservedBy;\\n    }\\n \\n    /**\\n      @param wallet The wallet being checked                                                                          \\n      @dev returns the number of reservations for this wallet\\n    */\\n    function getReservationsCount(address wallet) public view returns (uint256) {           \\n        return _resevationCount[wallet];   \\n    }\\n\\n    /**\\n      @param wallet The wallet being checked                                                                          \\n      @dev returns the IDs reserved by the wallet\\n    */\\n    function getReservationsList(address wallet) public view returns (uint256[] memory) {           \\n        return _resevations[wallet];   \\n    }   \\n\\n    /**\\n      @param wallet The address of the wallet\\n      @param freeMintLimit How many free mints should the wallet get                                                                           \\n      @dev Set the number of freemints for a wallet\\n     */\\n    function setFreeMints (address wallet, uint256 freeMintLimit)  external onlyOwner {  \\n        _pricing.freeMints[wallet] = freeMintLimit;\\n    }\\n\\n    /**\\n      @param wallet The address of the wallet                                                                       \\n      @dev Check the number of fre mints a wallet has\\n     */\\n    function numberOfFreeMints (address wallet) external view returns (uint256) {  \\n        return _pricing.freeMints[wallet];\\n    }\\n\\n    /**\\n      @dev returns the current limit on edition that \\n           can be minted by one wallet\\n     */\\n    function _currentMintLimit() internal view returns (uint256){\\n        if (_pricing.whoCanMint == WhoCanMint.ALLOWLIST) {\\n            return _pricing.allowListMintLimit;\\n        } else if (_pricing.whoCanMint == WhoCanMint.ANYONE) {\\n            return _pricing.generalMintLimit;\\n        } \\n            \\n        return 0;       \\n    }\\n\\n    /**\\n      @param _salePrice The amount of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n\\n        _pricing.whoCanMint = WhoCanMint.ANYONE;\\n\\n        emit WhoCanMintChanged(_pricing.whoCanMint);\\n        emit PriceChanged(_salePrice);\\n    }\\n\\n    /**\\n      @param _salePrice The amount of ETH is needed to start the sale.\\n      @dev This sets the allow list ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setAllowListSalePrice(uint256 _salePrice) external onlyOwner {\\n        _pricing.allowListSalePrice = _salePrice;\\n\\n        _pricing.whoCanMint = WhoCanMint.ALLOWLIST;\\n\\n        emit WhoCanMintChanged(_pricing.whoCanMint);\\n        emit PriceChanged(_salePrice);\\n    }\\n\\n     /**\\n      @param allowListSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @param generalSalePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.                                              \\n      @dev This sets the members ETH sales price\\n           Setting a sales price allows users to mint the drop until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrices(uint256 allowListSalePrice, uint256 generalSalePrice) external onlyOwner {\\n        _pricing.allowListSalePrice = allowListSalePrice;\\n        salePrice = generalSalePrice;        \\n\\n        emit PriceChanged(generalSalePrice);\\n    }  \\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 currentBalance = address(this).balance;\\n        if (currentBalance > 0) {\\n            if (_artistWallet != address(0x0)) {\\n                uint256 platformFee = (currentBalance * _pricing.splitBPS) / 10000;\\n                uint256 artistFee = currentBalance - platformFee;\\n\\n                AddressUpgradeable.sendValue(payable(owner()), platformFee);\\n                AddressUpgradeable.sendValue(payable(_artistWallet), artistFee);            \\n            } else {\\n                AddressUpgradeable.sendValue(payable(owner()), currentBalance);\\n            } \\n        }\\n\\n        if (address(_paymentTokenERC20) != address(0x0)) {\\n            uint256 currentBalanceERC20 = _paymentTokenERC20.balanceOf(address(this));\\n            if (currentBalanceERC20 > 0) {\\n                _paymentTokenERC20.transfer(owner(), currentBalanceERC20);       \\n            }\\n        }\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (_pricing.whoCanMint == WhoCanMint.ANYONE) {\\n            return true;\\n        }\\n\\n        if (_pricing.whoCanMint == WhoCanMint.ALLOWLIST) {\\n            if (_pricing.allowListMinters[msg.sender]) {\\n                return true;\\n            }            \\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IExpandedNFT)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n        return the artists wallet address\\n     */\\n    function getArtistWallet()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _artistWallet;\\n    }\\n\\n     /**\\n        set the artists wallet address\\n     */\\n    function setArtistWallet(address wallet)\\n        public\\n        onlyOwner\\n    {\\n        _artistWallet = wallet;\\n    }   \\n\\n    /**\\n        return the payment tokens address\\n     */\\n    function getPaymentToken()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(_paymentTokenERC20);\\n    }\\n\\n     /**\\n        set a new payment token address\\n     */\\n    function setPaymentToken(address paymentToken)\\n        public\\n        onlyOwner\\n    {\\n        if (address(_paymentTokenERC20) != address(0x0)) {\\n            require(_paymentTokenERC20.balanceOf(address(this)) == 0, \\\"token must have 0 balance\\\");\\n        }\\n\\n        _paymentTokenERC20 = IERC20Upgradeable(paymentToken);\\n    }   \\n\\n    /**\\n      @dev Sets the types of users who is allowed to mint.\\n     */\\n    function getAllowedMinter() public view returns (WhoCanMint){\\n        return _pricing.whoCanMint;\\n    }\\n\\n    /**\\n      @param minters WhoCanMint enum of minter types\\n      @dev Sets the types of users who is allowed to mint.\\n     */\\n    function setAllowedMinter(WhoCanMint minters) public onlyOwner {\\n        _pricing.whoCanMint = minters;\\n        emit WhoCanMintChanged(minters);\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setAllowListMinters(uint256 count, address[] calldata minter, bool[] calldata allowed) public onlyOwner {\\n        for (uint256 i = 0; i < count; i++) {\\n            if (_pricing.allowListMinters[minter[i]] != allowed[i]) {\\n                if (allowed[i] == true) {\\n                    _pricing.allowListCount++;    \\n                } else {\\n                    _pricing.allowListCount--; \\n                }\\n            }\\n\\n            _pricing.allowListMinters[minter[i]] = allowed[i];\\n        }\\n    }\\n\\n    function metadataloaded() public view returns (bool){\\n        return (_loadedMetadata >= dropSize);\\n    }\\n\\n    /**\\n      @param startIndex The first ID index to write the data\\n      @param count How many rows of data to load \\n      @param _mintedMetadataUrl The URL to the metadata for this Edtion\\n      @dev Function to create a new drop. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the drop.\\n           This can be re-assigned or updated later\\n     */\\n    function loadMetadataChunk(\\n        uint256 startIndex,\\n        uint256 count,\\n        string[] memory _mintedMetadataUrl\\n    ) public onlyOwner {\\n        require(startIndex > 0, \\\"StartIndex > 0\\\");\\n        require(startIndex + count <= dropSize + 1, \\\"Data large than drop size\\\");\\n\\n        require(_mintedMetadataUrl.length == count, \\\"Data size mismatch\\\");\\n\\n        for (uint i = 0; i < count; i++) {\\n            uint index =  startIndex + i;\\n            \\n            _perTokenMetadata[index].mintedMetadataUrl =_mintedMetadataUrl[i];\\n\\n            if (_perTokenMetadata[index].metadataLoaded != true) {\\n                _perTokenMetadata[index].metadataLoaded = true;\\n               _loadedMetadata++; \\n            }\\n\\n            emit MetadataUpdate(index);\\n        }\\n    }\\n\\n    /**\\n      @param tokenID The index to write the data\\n      @param _redeemedMetadataUrl The URL to the metadata for this Edtion\\n      @dev Function to create a new drop. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the drop.\\n           This can be re-assigned or updated later\\n     */\\n    function loadRedeemedMetadata(\\n        uint256 tokenID,\\n        string memory _redeemedMetadataUrl\\n\\n    ) public onlyOwner {\\n        require(tokenID > 0, \\\"tokenID > 0\\\");\\n        require(tokenID <= dropSize, \\\"tokenID <= drop size\\\");\\n\\n        _perTokenMetadata[tokenID].redeemedMetadataUrl = _redeemedMetadataUrl;\\n\\n        emit MetadataUpdate(tokenID);\\n    }\\n\\n    /// Returns the number of editions allowed to mint\\n    function numberCanMint() public view override returns (uint256) {\\n        return dropSize - _claimCount;\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function redeem(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].state == ExpandedNFTStates.MINTED), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.REDEEM_STARTED;\\n        emit RedeemStarted(tokenId, _msgSender());\\n    }\\n\\n    function abortRedemption(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].state == ExpandedNFTStates.REDEEM_STARTED), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.MINTED;\\n        emit RedeemAborted(tokenId, _msgSender());\\n    }\\n\\n    function setOfferTerms(uint256 tokenId, uint256 fee) public onlyOwner {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require((_perTokenMetadata[tokenId].state== ExpandedNFTStates.REDEEM_STARTED), \\\"Wrong state\\\");\\n\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.SET_OFFER_TERMS;\\n        _perTokenMetadata[tokenId].editionFee = fee;\\n\\n        emit OfferTermsSet(tokenId);\\n    }\\n\\n    function rejectOfferTerms(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].state == ExpandedNFTStates.SET_OFFER_TERMS), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.MINTED;\\n\\n        emit OfferRejected(tokenId);\\n    }\\n\\n    function acceptOfferTerms(uint256 tokenId, uint256 paymentAmount) external {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].state == ExpandedNFTStates.SET_OFFER_TERMS), \\\"You currently can not redeem\\\");\\n\\n        require(paymentAmount >= _perTokenMetadata[tokenId].editionFee, \\\"Wrong price\\\");\\n        require(_paymentTokenERC20.allowance(_msgSender(), address(this)) >= _perTokenMetadata[tokenId].editionFee, \\\"Insufficient allowance\\\");\\n\\n        bool success = _paymentTokenERC20.transferFrom(_msgSender(), address(this), _perTokenMetadata[tokenId].editionFee);\\n        require(success, \\\"Could not transfer token\\\");\\n\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.ACCEPTED_OFFER; \\n\\n        emit OfferAccepted(tokenId);\\n    }\\n\\n    function productionComplete(\\n        uint256 tokenId,\\n        string memory _redeemedMetadataUrl              \\n    ) public onlyOwner {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require((_perTokenMetadata[tokenId].state == ExpandedNFTStates.ACCEPTED_OFFER), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].redeemedMetadataUrl = _redeemedMetadataUrl;\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.PRODUCTION_COMPLETE;\\n\\n        emit ProductionComplete(tokenId);\\n    }\\n\\n    function acceptDelivery(uint256 tokenId) public {\\n        require(_exists(tokenId), \\\"No token\\\");        \\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n\\n        require((_perTokenMetadata[tokenId].state == ExpandedNFTStates.PRODUCTION_COMPLETE), \\\"You currently can not redeem\\\");\\n\\n        _perTokenMetadata[tokenId].state = ExpandedNFTStates.REDEEMED;\\n\\n        emit OfferRejected(tokenId);\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * _pricing.royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        if (_perTokenMetadata[tokenId].state == ExpandedNFTStates.REDEEMED) {\\n            return (_perTokenMetadata[tokenId].redeemedMetadataUrl);\\n        }\\n\\n        return (_perTokenMetadata[tokenId].mintedMetadataUrl);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xad81199140705de01715c3fd0ded440b2d36e2f72b44aa92a816cb097a759dad\",\"license\":\"GPL-3.0\"},\"contracts/IExpandedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IExpandedNFT {\\n  function mintEdition(address to) external payable returns (uint256);\\n  function mintEditions(address[] memory to) external payable returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x971b82a730ae76d1081f2884ab2f0a9c316f3a025571c70ec4fbd42c99a6e0af\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060d4805460ff19169055620000266200002c565b620000ee565b600054610100900460ff1615620000995760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000ec576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6148d080620000fe6000396000f3fe6080604052600436106103795760003560e01c806369e1cac1116101d3578063bb90bf6211610103578063d41c3a651161009b578063d41c3a6514610ae1578063db006a7514610aff578063dfb5823114610b1f578063e985e9c514610b55578063ee5df55014610b75578063eff215c614610b95578063f2fde38b14610bb5578063f51f96dd14610bd5578063fce57fd914610beb57600080fd5b8063bb90bf62146109df578063bf82ae49146109f2578063c2ba474414610a12578063c476c8db14610a32578063c87b56dd14610a52578063c9d359d614610a72578063ce5f4a9414610a8c578063ce9dd83e14610aac578063d3b9834614610acc57600080fd5b80638da5cb5b116101765780638da5cb5b1461090357806395d89b41146109185780639bb22b401461092d578063a035b1fe14610942578063a22cb46514610957578063a52b3e8f14610977578063a66ff0af14610997578063a7e33ae4146109aa578063b88d4fde146109bf57600080fd5b806369e1cac11461080e5780636a326ab11461082e57806370a082311461084e578063715018a61461086e5780637406fe5b146108835780637b422c4c146108a357806381e64ce5146108c357806386c14f30146108e357600080fd5b8063367de39e116102ae57806342842e0e1161025157806342842e0e146106f657806342966c681461071657806346d9c4bf146107365780634b5287691461074b5780635abe7dff1461076b5780635ba437f41461078b5780636352211e146107c657806364edfbf0146107e6578063660243d0146107ee57600080fd5b8063367de39e1461060b578063392774151461062b57806339dc13bc146106495780633c3ca811146106695780633ccfd60b146106965780633da165d4146106ab578063402635cf146106c1578063410a1095146106d657600080fd5b80631308e512116103215780631308e5121461048b578063154afd6f146104ab57806318160ddd146104e45780631919fed7146104f95780631c2f1b4a146105195780632228adcc1461054f57806323b872dd1461058c57806327a3fe41146105ac5780632a55205a146105cc57600080fd5b806219209b1461037e57806301ffc9a7146103a057806306fdde03146103d5578063081812fc146103f7578063095ea7b31461042457806309949abe146104445780630b65b6e7146104635780630f6a934914610478575b600080fd5b34801561038a57600080fd5b5061039e610399366004613b06565b610c0b565b005b3480156103ac57600080fd5b506103c06103bb366004613b5f565b610c5a565b60405190151581526020015b60405180910390f35b3480156103e157600080fd5b506103ea610c85565b6040516103cc9190613bc2565b34801561040357600080fd5b50610417610412366004613bd5565b610d17565b6040516103cc9190613bee565b34801561043057600080fd5b5061039e61043f366004613c1e565b610d3e565b34801561045057600080fd5b5060cd545b6040519081526020016103cc565b34801561046f57600080fd5b50610455610e58565b610455610486366004613cb1565b610e6f565b34801561049757600080fd5b5061039e6104a6366004613dc4565b610e7a565b3480156104b757600080fd5b506103c06104c6366004613e0a565b6001600160a01b0316600090815260d2602052604090205460ff1690565b3480156104f057600080fd5b5060cc54610455565b34801561050557600080fd5b5061039e610514366004613bd5565b610f06565b34801561052557600080fd5b50610455610534366004613e0a565b6001600160a01b0316600090815260d8602052604090205490565b34801561055b57600080fd5b506103c061056a366004613bd5565b600090815260ca602052604090205461010090046001600160a01b0316151590565b34801561059857600080fd5b5061039e6105a7366004613e25565b610f8c565b3480156105b857600080fd5b506104556105c7366004613e0a565b610fbe565b3480156105d857600080fd5b506105ec6105e7366004613e61565b61101e565b604080516001600160a01b0390931683526020830191909152016103cc565b34801561061757600080fd5b5061039e610626366004613e83565b61107a565b34801561063757600080fd5b5060c9546001600160a01b0316610417565b34801561065557600080fd5b5061039e610664366004613bd5565b6110d5565b34801561067557600080fd5b50610689610684366004613e0a565b6111ab565b6040516103cc9190613ea4565b3480156106a257600080fd5b5061039e611217565b3480156106b757600080fd5b5061045560cb5481565b3480156106cd57600080fd5b5060ce54610455565b3480156106e257600080fd5b5060d45460ff166040516103cc9190613efe565b34801561070257600080fd5b5061039e610711366004613e25565b6113be565b34801561072257600080fd5b5061039e610731366004613bd5565b6113d9565b34801561074257600080fd5b5060d154610455565b34801561075757600080fd5b50610455610766366004613bd5565b611407565b34801561077757600080fd5b5061039e610786366004613e61565b61146d565b34801561079757600080fd5b506104176107a6366004613bd5565b600090815260ca602052604090205461010090046001600160a01b031690565b3480156107d257600080fd5b506104176107e1366004613bd5565b61149d565b6104556114d2565b3480156107fa57600080fd5b5061039e610809366004613e61565b61153a565b34801561081a57600080fd5b5061039e610829366004613f6a565b61180b565b34801561083a57600080fd5b5061039e610849366004613e0a565b611aa9565b34801561085a57600080fd5b50610455610869366004613e0a565b611b9e565b34801561087a57600080fd5b5061039e611c24565b34801561088f57600080fd5b5061045561089e366004613bd5565b611c38565b3480156108af57600080fd5b5061039e6108be366004613bd5565b611c75565b3480156108cf57600080fd5b5061039e6108de366004613fe3565b611d6c565b3480156108ef57600080fd5b5061039e6108fe366004614084565b611f1b565b34801561090f57600080fd5b506104176120e9565b34801561092457600080fd5b506103ea6120fd565b34801561093957600080fd5b5060cf54610455565b34801561094e57600080fd5b5061045561210c565b34801561096357600080fd5b5061039e610972366004614149565b61215e565b34801561098357600080fd5b5061039e610992366004613dc4565b612169565b6104556109a5366004613e0a565b61223e565b3480156109b657600080fd5b5060d354610455565b3480156109cb57600080fd5b5061039e6109da366004614180565b6122a0565b6104556109ed366004613c1e565b6122d1565b3480156109fe57600080fd5b5061039e610a0d366004613bd5565b612372565b348015610a1e57600080fd5b506103c0610a2d366004613e0a565b612458565b348015610a3e57600080fd5b5061039e610a4d366004613bd5565b61246d565b348015610a5e57600080fd5b506103ea610a6d366004613bd5565b61248d565b348015610a7e57600080fd5b5060cb5460da5410156103c0565b348015610a9857600080fd5b5061039e610aa73660046141fb565b612591565b348015610ab857600080fd5b5061039e610ac7366004613c1e565b612836565b348015610ad857600080fd5b5060d054610455565b348015610aed57600080fd5b5060dd546001600160a01b0316610417565b348015610b0b57600080fd5b5061039e610b1a366004613bd5565b61285a565b348015610b2b57600080fd5b50610455610b3a366004613e0a565b6001600160a01b0316600090815260d6602052604090205490565b348015610b6157600080fd5b506103c0610b7036600461423c565b612927565b348015610b8157600080fd5b5061039e610b90366004613e61565b612955565b348015610ba157600080fd5b5061039e610bb036600461426f565b612a32565b348015610bc157600080fd5b5061039e610bd0366004613e0a565b612bb1565b348015610be157600080fd5b5061045560d75481565b348015610bf757600080fd5b5061039e610c06366004613e0a565b612c27565b610c13612c51565b60cd86905560ce85905560cf84905560d783905560d082905560d181905560405183815260008051602061485b8339815191529060200160405180910390a1505050505050565b600063152a902d60e11b6001600160e01b031983161480610c7f5750610c7f82612cb0565b92915050565b606060658054610c94906142e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc0906142e8565b8015610d0d5780601f10610ce257610100808354040283529160200191610d0d565b820191906000526020600020905b815481529060010190602001808311610cf057829003601f168201915b5050505050905090565b6000610d2282612d00565b506000908152606960205260409020546001600160a01b031690565b6000610d498261149d565b9050806001600160a01b0316836001600160a01b031603610dbb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610dd75750610dd78133612927565b610e495760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610db2565b610e538383612d25565b505050565b600060cc5460cb54610e6a9190614338565b905090565b6000610c7f82612d93565b610e82612c51565b60008211610ea25760405162461bcd60e51b8152600401610db29061434b565b60cb54821115610ec45760405162461bcd60e51b8152600401610db290614370565b600082815260ca60205260409020600401610edf82826143e4565b5060405182815260008051602061487b833981519152906020015b60405180910390a15050565b610f0e612c51565b60d781905560d480546002919060ff19166001835b021790555060d4546040517f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5191610f5f9160ff90911690613efe565b60405180910390a160405181815260008051602061485b833981519152906020015b60405180910390a150565b610f97335b82613066565b610fb35760405162461bcd60e51b8152600401610db2906144a3565b610e538383836130c4565b600080610fc9613216565b6001600160a01b038416600090815260d560205260409020549091508111610ff45750600092915050565b6001600160a01b038316600090815260d560205260409020546110179082614338565b9392505050565b6000808061102a6120e9565b6001600160a01b03160361104b576110406120e9565b600091509150611073565b6110536120e9565b60cd546127109061106490866144f0565b61106e919061451d565b915091505b9250929050565b611082612c51565b60d4805482919060ff191660018360028111156110a1576110a1613ee8565b02179055507f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5181604051610f819190613efe565b6110de81613262565b6110fa5760405162461bcd60e51b8152600401610db290614531565b61110333610f91565b61111f5760405162461bcd60e51b8152600401610db290614553565b6004600082815260ca602052604090205460ff16600781111561114457611144613ee8565b146111615760405162461bcd60e51b8152600401610db290614579565b600081815260ca6020908152604091829020805460ff1916600217905590518281527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b9101610f81565b6001600160a01b038116600090815260d9602090815260409182902080548351818402810184019094528084526060939283018282801561120b57602002820191906000526020600020905b8154815260200190600101908083116111f7575b50505050509050919050565b61121f612c51565b4780156112a45760c9546001600160a01b0316156112935760ce546000906127109061124b90846144f0565b611255919061451d565b905060006112638284614338565b90506112766112706120e9565b8361327f565b60c95461128c906001600160a01b03168261327f565b50506112a4565b6112a461129e6120e9565b8261327f565b60dd546001600160a01b0316156113bb5760dd546040516370a0823160e01b81526000916001600160a01b0316906370a08231906112e6903090600401613bee565b602060405180830381865afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132791906145b0565b905080156113b95760dd546001600160a01b031663a9059cbb6113486120e9565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611395573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906145c9565b505b50565b610e53838383604051806020016040528060008152506122a0565b6113e233610f91565b6113fe5760405162461bcd60e51b8152600401610db290614553565b6113bb81613398565b60008082116114285760405162461bcd60e51b8152600401610db29061434b565b60cb5482111561144a5760405162461bcd60e51b8152600401610db290614370565b600082815260ca602052604090205460ff166007811115610c7f57610c7f613ee8565b611475612c51565b60cf82905560d781905560405181815260008051602061485b83398151915290602001610efa565b6000818152606760205260408120546001600160a01b031680610c7f5760405162461bcd60e51b8152600401610db2906145e6565b60408051600180825281830190925260009182919060208083019080368337019050509050338160008151811061150b5761150b614618565b60200260200101906001600160a01b031690816001600160a01b03168152505061153481612d93565b91505090565b61154382613262565b61155f5760405162461bcd60e51b8152600401610db290614531565b61156a335b83613066565b6115865760405162461bcd60e51b8152600401610db290614553565b6004600083815260ca602052604090205460ff1660078111156115ab576115ab613ee8565b146115c85760405162461bcd60e51b8152600401610db290614579565b600082815260ca60205260409020600101548110156115f95760405162461bcd60e51b8152600401610db29061462e565b600082815260ca602052604090206001015460dd546001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b91906145b0565b10156116d25760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606401610db2565b60dd546000906001600160a01b03166323b872dd33600086815260ca60205260409081902060010154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015230602483015260448201526064016020604051808303816000875af115801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f91906145c9565b9050806117b95760405162461bcd60e51b815260206004820152601860248201527721b7bab632103737ba103a3930b739b332b9103a37b5b2b760411b6044820152606401610db2565b600083815260ca6020908152604091829020805460ff1916600517905590518481527f9bd6b4fd288008520fd788a93304e5688a401aea817ea8140ecf1fb8648f3191910160405180910390a1505050565b611813612c51565b82811461185c5760405162461bcd60e51b8152602060048201526017602482015276098d2e6e8e640d8cadccee8d040daeae6e840dac2e8c6d604b1b6044820152606401610db2565b60005b83811015611aa257600060ca600085858581811061187f5761187f614618565b602090810292909201358352508101919091526040016000205460ff1660078111156118ad576118ad613ee8565b146118f15760405162461bcd60e51b8152602060048201526014602482015273139959591cc81d1bc81899481d5b9b5a5b9d195960621b6044820152606401610db2565b84848281811061190357611903614618565b90506020020160208101906119189190613e0a565b60ca600085858581811061192e5761192e614618565b90506020020135815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160ca600085858581811061198257611982614618565b60209081029290920135835250810191909152604001600020805460ff191660018360078111156119b5576119b5613ee8565b021790555060d860008686848181106119d0576119d0614618565b90506020020160208101906119e59190613e0a565b6001600160a01b0316815260208101919091526040016000908120805491611a0c83614653565b919050555060d96000868684818110611a2757611a27614618565b9050602002016020810190611a3c9190613e0a565b6001600160a01b03166001600160a01b03168152602001908152602001600020838383818110611a6e57611a6e614618565b8354600181018555600094855260209485902091909402929092013591909201555080611a9a81614653565b91505061185f565b5050505050565b611ab1612c51565b60dd546001600160a01b031615611b7c5760dd546040516370a0823160e01b81526001600160a01b03909116906370a0823190611af2903090600401613bee565b602060405180830381865afa158015611b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3391906145b0565b15611b7c5760405162461bcd60e51b8152602060048201526019602482015278746f6b656e206d757374206861766520302062616c616e636560381b6044820152606401610db2565b60dd80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216611c085760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610db2565b506001600160a01b031660009081526068602052604090205490565b611c2c612c51565b611c36600061341c565b565b6000611c4382613262565b611c5f5760405162461bcd60e51b8152600401610db290614531565b50600090815260ca602052604090206001015490565b611c7e81613262565b611c9a5760405162461bcd60e51b8152600401610db290614531565b611ca333610f91565b611cbf5760405162461bcd60e51b8152600401610db290614553565b6006600082815260ca602052604090205460ff166007811115611ce457611ce4613ee8565b14611d015760405162461bcd60e51b8152600401610db290614579565b600081815260ca6020908152604091829020805460ff1916600717905590518281527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b910160405180910390a160405181815260008051602061487b83398151915290602001610f81565b600054610100900460ff1615808015611d8c5750600054600160ff909116105b80611da65750303b158015611da6575060005460ff166001145b611e095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610db2565b6000805460ff191660011790558015611e2c576000805461ff0019166101001790555b60008311611e745760405162461bcd60e51b8152602060048201526015602482015274044726f702073697a65206d757374206265203e203605c1b6044820152606401610db2565b611e7e858561346e565b611e8661349f565b611e8f87612bb1565b60c980546001600160a01b0319166001600160a01b03881617905560cb839055600060cc819055600160dc5560db805460ff191684151517905560da558015611f12576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b611f23612c51565b60008311611f645760405162461bcd60e51b815260206004820152600e60248201526d05374617274496e646578203e20360941b6044820152606401610db2565b60cb54611f7290600161466c565b611f7c838561466c565b1115611fc65760405162461bcd60e51b815260206004820152601960248201527844617461206c61726765207468616e2064726f702073697a6560381b6044820152606401610db2565b8181511461200b5760405162461bcd60e51b8152602060048201526012602482015271088c2e8c240e6d2f4ca40dad2e6dac2e8c6d60731b6044820152606401610db2565b60005b828110156120e3576000612022828661466c565b905082828151811061203657612036614618565b602002602001015160ca6000838152602001908152602001600020600301908161206091906143e4565b50600081815260ca602052604090206002015460ff1615156001146120af57600081815260ca60205260408120600201805460ff1916600117905560da8054916120a983614653565b91905055505b60405181815260008051602061487b8339815191529060200160405180910390a150806120db81614653565b91505061200e565b50505050565b6000610e6a6097546001600160a01b031690565b606060668054610c94906142e8565b6000600160d45460ff16600281111561212757612127613ee8565b03612133575060cf5490565b600260d45460ff16600281111561214c5761214c613ee8565b03612158575060d75490565b50600090565b6113b93383836134ce565b612171612c51565b61217a82613262565b6121965760405162461bcd60e51b8152600401610db290614531565b6005600083815260ca602052604090205460ff1660078111156121bb576121bb613ee8565b146121d85760405162461bcd60e51b8152600401610db290614579565b600082815260ca602052604090206004016121f382826143e4565b50600082815260ca6020908152604091829020805460ff1916600617905590518381527fadb6d4f651f6fbf8b37026019ee48fdb86abf9ec94eb4a5f0acf72ad8c7872a39101610efa565b60408051600180825281830190925260009182919060208083019080368337019050509050828160008151811061227757612277614618565b60200260200101906001600160a01b031690816001600160a01b03168152505061101781612d93565b6122a933611564565b6122c55760405162461bcd60e51b8152600401610db2906144a3565b6120e384848484613598565b600080826001600160401b038111156122ec576122ec613c48565b604051908082528060200260200182016040528015612315578160200160208202803683370190505b50905060005b83811015612360578482828151811061233657612336614618565b6001600160a01b03909216602092830291909101909101528061235881614653565b91505061231b565b5061236a81612d93565b949350505050565b61237b81613262565b6123975760405162461bcd60e51b8152600401610db290614531565b6123a033610f91565b6123bc5760405162461bcd60e51b8152600401610db290614553565b6003600082815260ca602052604090205460ff1660078111156123e1576123e1613ee8565b146123fe5760405162461bcd60e51b8152600401610db290614579565b600081815260ca60205260409020805460ff191660021790557f6c7c9f699aacfa5bacd2758023ab209b2d1e1c237bfa752bdc94cb87878cf1b781335b604080519283526001600160a01b03909116602083015201610f81565b60008061246483610fbe565b15159392505050565b612475612c51565b60cf81905560d480546001919060ff19168280610f23565b606061249882613262565b6124b45760405162461bcd60e51b8152600401610db290614531565b6007600083815260ca602052604090205460ff1660078111156124d9576124d9613ee8565b0361257557600082815260ca6020526040902060040180546124fa906142e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612526906142e8565b801561120b5780601f106125485761010080835404028352916020019161120b565b820191906000526020600020905b8154815290600101906020018083116125565750939695505050505050565b600082815260ca6020526040902060030180546124fa906142e8565b612599612c51565b60005b81811015610e5357600160ca60008585858181106125bc576125bc614618565b602090810292909201358352508101919091526040016000205460ff1660078111156125ea576125ea613ee8565b146126265760405162461bcd60e51b815260206004820152600c60248201526b139bdd081c995cd95c9d995960a21b6044820152606401610db2565b600060ca600085858581811061263e5761263e614618565b90506020020135815260200190815260200160002060000160019054906101000a90046001600160a01b0316905060005b84848481811061268157612681614618565b9050602002013560d96000846001600160a01b03166001600160a01b0316815260200190815260200160002082815481106126be576126be614618565b9060005260206000200154146126e057806126d881614653565b91505061266f565b6001600160a01b038216600090815260d96020526040812080548390811061270a5761270a614618565b906000526020600020018190555060d8600060ca600088888881811061273257612732614618565b6020908102929092013583525081810192909252604090810160009081205461010090046001600160a01b0316845291830193909352910181208054916127788361467f565b9190505550600060ca600087878781811061279557612795614618565b90506020020135815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060ca60008787878181106127e9576127e9614618565b60209081029290920135835250810191909152604001600020805460ff1916600183600781111561281c5761281c613ee8565b02179055505050808061282e90614653565b91505061259c565b61283e612c51565b6001600160a01b03909116600090815260d66020526040902055565b61286381613262565b61287f5760405162461bcd60e51b8152600401610db290614531565b61288833610f91565b6128a45760405162461bcd60e51b8152600401610db290614553565b6002600082815260ca602052604090205460ff1660078111156128c9576128c9613ee8565b146128e65760405162461bcd60e51b8152600401610db290614579565b600081815260ca60205260409020805460ff191660031790557fc290e40808ef06721539ad0d926f8d5f53d2dd6d5e28334308a012676f867416813361243b565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61295d612c51565b61296682613262565b6129825760405162461bcd60e51b8152600401610db290614531565b6003600083815260ca602052604090205460ff1660078111156129a7576129a7613ee8565b146129e25760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b6044820152606401610db2565b600082815260ca6020908152604091829020805460ff1916600417815560010183905590518381527f316b408b8cf323e8f20ef7a8c267eedc89bef19ca5db7fc30be938e55bf068f99101610efa565b612a3a612c51565b60005b85811015612ba957828282818110612a5757612a57614618565b9050602002016020810190612a6c9190614696565b151560d26000878785818110612a8457612a84614618565b9050602002016020810190612a999190613e0a565b6001600160a01b0316815260208101919091526040016000205460ff16151514612b1d57828282818110612acf57612acf614618565b9050602002016020810190612ae49190614696565b1515600103612b075760d38054906000612afd83614653565b9190505550612b1d565b60d38054906000612b178361467f565b91905055505b828282818110612b2f57612b2f614618565b9050602002016020810190612b449190614696565b60d26000878785818110612b5a57612b5a614618565b9050602002016020810190612b6f9190613e0a565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612ba181614653565b915050612a3d565b505050505050565b612bb9612c51565b6001600160a01b038116612c1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610db2565b6113bb8161341c565b612c2f612c51565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b33612c5a6120e9565b6001600160a01b031614611c365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610db2565b60006001600160e01b031982166380ac58cd60e01b1480612ce157506001600160e01b03198216635b5e139f60e01b145b80610c7f57506301ffc9a760e01b6001600160e01b0319831614610c7f565b612d0981613262565b6113bb5760405162461bcd60e51b8152600401610db2906145e6565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612d5a8261149d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060cb5460da541015612de35760405162461bcd60e51b8152602060048201526017602482015276139bdd08185b1b081b595d1859185d18481b1bd8591959604a1b6044820152606401610db2565b612deb6135cb565b612e375760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610db2565b612e3f610e58565b82511115612e815760405162461bcd60e51b815260206004820152600f60248201526e457863656564656420737570706c7960881b6044820152606401610db2565b612e89613216565b825133600090815260d56020526040902054612ea5919061466c565b1115612ee95760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b5a5b9d081b1a5b5a5d606a1b6044820152606401610db2565b612ef3825161362d565b612f0f5760405162461bcd60e51b8152600401610db29061462e565b6000805b835181101561305f5733600090815260d8602052604090205415612f4057612f39613697565b9150612f4b565b612f48613782565b91505b612f6e848281518110612f6057612f60614618565b602002602001015183613899565b33600090815260d660205260409020548015612fa057612f8f600182614338565b33600090815260d660205260409020555b600083815260ca60209081526040808320805460ff1916600217905533835260d59091528120805491612fd283614653565b909155505060cc8054906000612fe783614653565b91905055507f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa61301561210c565b604080519182523360208301520160405180910390a160405183815260008051602061487b8339815191529060200160405180910390a1508061305781614653565b915050612f13565b5092915050565b6000806130728361149d565b9050806001600160a01b0316846001600160a01b0316148061309957506130998185612927565b8061236a5750836001600160a01b03166130b284610d17565b6001600160a01b031614949350505050565b826001600160a01b03166130d78261149d565b6001600160a01b0316146130fd5760405162461bcd60e51b8152600401610db2906146b3565b6001600160a01b03821661315f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610db2565b826001600160a01b03166131728261149d565b6001600160a01b0316146131985760405162461bcd60e51b8152600401610db2906146b3565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652606885528386208054600019019055908716808652838620805460010190558686526067909452828520805490921684179091559051849360008051602061483b83398151915291a4505050565b6000600160d45460ff16600281111561323157613231613ee8565b0361323d575060d05490565b600260d45460ff16600281111561325657613256613ee8565b03612158575060d15490565b6000908152606760205260409020546001600160a01b0316151590565b804710156132cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610db2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461331c576040519150601f19603f3d011682016040523d82523d6000602084013e613321565b606091505b5050905080610e535760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610db2565b60006133a38261149d565b90506133ae8261149d565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260688452828520805460001901905587855260679093528184208054909116905551929350849260008051602061483b833981519152908390a46113b9565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166134955760405162461bcd60e51b8152600401610db2906146f8565b6113b98282613995565b600054610100900460ff166134c65760405162461bcd60e51b8152600401610db2906146f8565b611c366139d5565b816001600160a01b0316836001600160a01b03160361352b5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610db2565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6135a38484846130c4565b6135af84848484613a05565b6120e35760405162461bcd60e51b8152600401610db290614743565b6000600260d45460ff1660028111156135e6576135e6613ee8565b036135f15750600190565b600160d45460ff16600281111561360a5761360a613ee8565b036121585733600090815260d2602052604090205460ff16156121585750600190565b33600090815260d6602052604081205480831161365c5734156136535750600092915050565b50600192915050565b60006136688285614338565b90508061367361210c565b61367d91906144f0565b340361368d575060019392505050565b5060009392505050565b6000805b33600090815260d9602052604090208054829081106136bc576136bc614618565b90600052602060002001546000036136e057806136d881614653565b91505061369b565b33600090815260d96020526040812080548390811061370157613701614618565b600091825260208083209091015433835260d9909152604082208054919350908490811061373157613731614618565b600091825260208083209091019290925533815260d89091526040812080549161375a8361467f565b9091555050600081815260ca602052604090208054610100600160a81b031916905592915050565b60db5460009060ff161561385157600060cb544233445a6040516020016137d4949392919093845260609290921b6bffffffffffffffffffffffff191660208401526034830152605482015260740190565b6040516020818303038152906040528051906020012060001c6137f79190614795565b9050600061380682600161466c565b90505b600081815260ca602052604081205460ff16600781111561382c5761382c613ee8565b14610c7f578061383b81614653565b91505060cb5481111561384c575060015b613809565b60dc545b600081815260ca602052604081205460ff16600781111561387857613878613ee8565b1461388f578061388781614653565b915050613855565b60dc819055919050565b6001600160a01b0382166138ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610db2565b6138f881613262565b156139155760405162461bcd60e51b8152600401610db2906147a9565b61391e81613262565b1561393b5760405162461bcd60e51b8152600401610db2906147a9565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b03191684179055518392919060008051602061483b833981519152908290a46113b9565b600054610100900460ff166139bc5760405162461bcd60e51b8152600401610db2906146f8565b60656139c883826143e4565b506066610e5382826143e4565b600054610100900460ff166139fc5760405162461bcd60e51b8152600401610db2906146f8565b611c363361341c565b60006001600160a01b0384163b15613afb57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a499033908990889088906004016147e0565b6020604051808303816000875af1925050508015613a84575060408051601f3d908101601f19168201909252613a819181019061481d565b60015b613ae1573d808015613ab2576040519150601f19603f3d011682016040523d82523d6000602084013e613ab7565b606091505b508051600003613ad95760405162461bcd60e51b8152600401610db290614743565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061236a565b506001949350505050565b60008060008060008060c08789031215613b1f57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6001600160e01b0319811681146113bb57600080fd5b600060208284031215613b7157600080fd5b813561101781613b49565b6000815180845260005b81811015613ba257602081850181015186830182015201613b86565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110176020830184613b7c565b600060208284031215613be757600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b0381168114613c1957600080fd5b919050565b60008060408385031215613c3157600080fd5b613c3a83613c02565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613c8657613c86613c48565b604052919050565b60006001600160401b03821115613ca757613ca7613c48565b5060051b60200190565b60006020808385031215613cc457600080fd5b82356001600160401b03811115613cda57600080fd5b8301601f81018513613ceb57600080fd5b8035613cfe613cf982613c8e565b613c5e565b81815260059190911b82018301908381019087831115613d1d57600080fd5b928401925b82841015613d4257613d3384613c02565b82529284019290840190613d22565b979650505050505050565b60006001600160401b03831115613d6657613d66613c48565b613d79601f8401601f1916602001613c5e565b9050828152838383011115613d8d57600080fd5b828260208301376000602084830101529392505050565b600082601f830112613db557600080fd5b61101783833560208501613d4d565b60008060408385031215613dd757600080fd5b8235915060208301356001600160401b03811115613df457600080fd5b613e0085828601613da4565b9150509250929050565b600060208284031215613e1c57600080fd5b61101782613c02565b600080600060608486031215613e3a57600080fd5b613e4384613c02565b9250613e5160208501613c02565b9150604084013590509250925092565b60008060408385031215613e7457600080fd5b50508035926020909101359150565b600060208284031215613e9557600080fd5b81356003811061101757600080fd5b6020808252825182820181905260009190848201906040850190845b81811015613edc57835183529284019291840191600101613ec0565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310613f2057634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f840112613f3857600080fd5b5081356001600160401b03811115613f4f57600080fd5b6020830191508360208260051b850101111561107357600080fd5b60008060008060408587031215613f8057600080fd5b84356001600160401b0380821115613f9757600080fd5b613fa388838901613f26565b90965094506020870135915080821115613fbc57600080fd5b50613fc987828801613f26565b95989497509550505050565b80151581146113bb57600080fd5b60008060008060008060c08789031215613ffc57600080fd5b61400587613c02565b955061401360208801613c02565b945060408701356001600160401b038082111561402f57600080fd5b61403b8a838b01613da4565b9550606089013591508082111561405157600080fd5b5061405e89828a01613da4565b9350506080870135915060a087013561407681613fd5565b809150509295509295509295565b60008060006060848603121561409957600080fd5b83359250602080850135925060408501356001600160401b03808211156140bf57600080fd5b818701915087601f8301126140d357600080fd5b81356140e1613cf982613c8e565b81815260059190911b8301840190848101908a83111561410057600080fd5b8585015b838110156141385780358581111561411c5760008081fd5b61412a8d89838a0101613da4565b845250918601918601614104565b508096505050505050509250925092565b6000806040838503121561415c57600080fd5b61416583613c02565b9150602083013561417581613fd5565b809150509250929050565b6000806000806080858703121561419657600080fd5b61419f85613c02565b93506141ad60208601613c02565b92506040850135915060608501356001600160401b038111156141cf57600080fd5b8501601f810187136141e057600080fd5b6141ef87823560208401613d4d565b91505092959194509250565b6000806020838503121561420e57600080fd5b82356001600160401b0381111561422457600080fd5b61423085828601613f26565b90969095509350505050565b6000806040838503121561424f57600080fd5b61425883613c02565b915061426660208401613c02565b90509250929050565b60008060008060006060868803121561428757600080fd5b8535945060208601356001600160401b03808211156142a557600080fd5b6142b189838a01613f26565b909650945060408801359150808211156142ca57600080fd5b506142d788828901613f26565b969995985093965092949392505050565b600181811c908216806142fc57607f821691505b60208210810361431c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c7f57610c7f614322565b6020808252600b908201526a0746f6b656e4944203e20360ac1b604082015260600190565b602080825260149082015273746f6b656e4944203c3d2064726f702073697a6560601b604082015260600190565b601f821115610e5357600081815260208120601f850160051c810160208610156143c55750805b601f850160051c820191505b81811015612ba9578281556001016143d1565b81516001600160401b038111156143fd576143fd613c48565b6144118161440b84546142e8565b8461439e565b602080601f831160018114614446576000841561442e5750858301515b600019600386901b1c1916600185901b178555612ba9565b600085815260208120601f198616915b8281101561447557888601518255948401946001909101908401614456565b50858210156144935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b8082028115828204841417610c7f57610c7f614322565b634e487b7160e01b600052601260045260246000fd5b60008261452c5761452c614507565b500490565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252601c908201527f596f752063757272656e746c792063616e206e6f742072656465656d00000000604082015260600190565b6000602082840312156145c257600080fd5b5051919050565b6000602082840312156145db57600080fd5b815161101781613fd5565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252600b908201526a57726f6e6720707269636560a81b604082015260600190565b60006001820161466557614665614322565b5060010190565b80820180821115610c7f57610c7f614322565b60008161468e5761468e614322565b506000190190565b6000602082840312156146a857600080fd5b813561101781613fd5565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826147a4576147a4614507565b500690565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061481390830184613b7c565b9695505050505050565b60006020828403121561482f57600080fd5b815161101781613b4956feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7a26469706673582212203b6b274667b8c254905336fe7c8829eca4a231769de3b0db3df924390f8ce76664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106103795760003560e01c806369e1cac1116101d3578063bb90bf6211610103578063d41c3a651161009b578063d41c3a6514610ae1578063db006a7514610aff578063dfb5823114610b1f578063e985e9c514610b55578063ee5df55014610b75578063eff215c614610b95578063f2fde38b14610bb5578063f51f96dd14610bd5578063fce57fd914610beb57600080fd5b8063bb90bf62146109df578063bf82ae49146109f2578063c2ba474414610a12578063c476c8db14610a32578063c87b56dd14610a52578063c9d359d614610a72578063ce5f4a9414610a8c578063ce9dd83e14610aac578063d3b9834614610acc57600080fd5b80638da5cb5b116101765780638da5cb5b1461090357806395d89b41146109185780639bb22b401461092d578063a035b1fe14610942578063a22cb46514610957578063a52b3e8f14610977578063a66ff0af14610997578063a7e33ae4146109aa578063b88d4fde146109bf57600080fd5b806369e1cac11461080e5780636a326ab11461082e57806370a082311461084e578063715018a61461086e5780637406fe5b146108835780637b422c4c146108a357806381e64ce5146108c357806386c14f30146108e357600080fd5b8063367de39e116102ae57806342842e0e1161025157806342842e0e146106f657806342966c681461071657806346d9c4bf146107365780634b5287691461074b5780635abe7dff1461076b5780635ba437f41461078b5780636352211e146107c657806364edfbf0146107e6578063660243d0146107ee57600080fd5b8063367de39e1461060b578063392774151461062b57806339dc13bc146106495780633c3ca811146106695780633ccfd60b146106965780633da165d4146106ab578063402635cf146106c1578063410a1095146106d657600080fd5b80631308e512116103215780631308e5121461048b578063154afd6f146104ab57806318160ddd146104e45780631919fed7146104f95780631c2f1b4a146105195780632228adcc1461054f57806323b872dd1461058c57806327a3fe41146105ac5780632a55205a146105cc57600080fd5b806219209b1461037e57806301ffc9a7146103a057806306fdde03146103d5578063081812fc146103f7578063095ea7b31461042457806309949abe146104445780630b65b6e7146104635780630f6a934914610478575b600080fd5b34801561038a57600080fd5b5061039e610399366004613b06565b610c0b565b005b3480156103ac57600080fd5b506103c06103bb366004613b5f565b610c5a565b60405190151581526020015b60405180910390f35b3480156103e157600080fd5b506103ea610c85565b6040516103cc9190613bc2565b34801561040357600080fd5b50610417610412366004613bd5565b610d17565b6040516103cc9190613bee565b34801561043057600080fd5b5061039e61043f366004613c1e565b610d3e565b34801561045057600080fd5b5060cd545b6040519081526020016103cc565b34801561046f57600080fd5b50610455610e58565b610455610486366004613cb1565b610e6f565b34801561049757600080fd5b5061039e6104a6366004613dc4565b610e7a565b3480156104b757600080fd5b506103c06104c6366004613e0a565b6001600160a01b0316600090815260d2602052604090205460ff1690565b3480156104f057600080fd5b5060cc54610455565b34801561050557600080fd5b5061039e610514366004613bd5565b610f06565b34801561052557600080fd5b50610455610534366004613e0a565b6001600160a01b0316600090815260d8602052604090205490565b34801561055b57600080fd5b506103c061056a366004613bd5565b600090815260ca602052604090205461010090046001600160a01b0316151590565b34801561059857600080fd5b5061039e6105a7366004613e25565b610f8c565b3480156105b857600080fd5b506104556105c7366004613e0a565b610fbe565b3480156105d857600080fd5b506105ec6105e7366004613e61565b61101e565b604080516001600160a01b0390931683526020830191909152016103cc565b34801561061757600080fd5b5061039e610626366004613e83565b61107a565b34801561063757600080fd5b5060c9546001600160a01b0316610417565b34801561065557600080fd5b5061039e610664366004613bd5565b6110d5565b34801561067557600080fd5b50610689610684366004613e0a565b6111ab565b6040516103cc9190613ea4565b3480156106a257600080fd5b5061039e611217565b3480156106b757600080fd5b5061045560cb5481565b3480156106cd57600080fd5b5060ce54610455565b3480156106e257600080fd5b5060d45460ff166040516103cc9190613efe565b34801561070257600080fd5b5061039e610711366004613e25565b6113be565b34801561072257600080fd5b5061039e610731366004613bd5565b6113d9565b34801561074257600080fd5b5060d154610455565b34801561075757600080fd5b50610455610766366004613bd5565b611407565b34801561077757600080fd5b5061039e610786366004613e61565b61146d565b34801561079757600080fd5b506104176107a6366004613bd5565b600090815260ca602052604090205461010090046001600160a01b031690565b3480156107d257600080fd5b506104176107e1366004613bd5565b61149d565b6104556114d2565b3480156107fa57600080fd5b5061039e610809366004613e61565b61153a565b34801561081a57600080fd5b5061039e610829366004613f6a565b61180b565b34801561083a57600080fd5b5061039e610849366004613e0a565b611aa9565b34801561085a57600080fd5b50610455610869366004613e0a565b611b9e565b34801561087a57600080fd5b5061039e611c24565b34801561088f57600080fd5b5061045561089e366004613bd5565b611c38565b3480156108af57600080fd5b5061039e6108be366004613bd5565b611c75565b3480156108cf57600080fd5b5061039e6108de366004613fe3565b611d6c565b3480156108ef57600080fd5b5061039e6108fe366004614084565b611f1b565b34801561090f57600080fd5b506104176120e9565b34801561092457600080fd5b506103ea6120fd565b34801561093957600080fd5b5060cf54610455565b34801561094e57600080fd5b5061045561210c565b34801561096357600080fd5b5061039e610972366004614149565b61215e565b34801561098357600080fd5b5061039e610992366004613dc4565b612169565b6104556109a5366004613e0a565b61223e565b3480156109b657600080fd5b5060d354610455565b3480156109cb57600080fd5b5061039e6109da366004614180565b6122a0565b6104556109ed366004613c1e565b6122d1565b3480156109fe57600080fd5b5061039e610a0d366004613bd5565b612372565b348015610a1e57600080fd5b506103c0610a2d366004613e0a565b612458565b348015610a3e57600080fd5b5061039e610a4d366004613bd5565b61246d565b348015610a5e57600080fd5b506103ea610a6d366004613bd5565b61248d565b348015610a7e57600080fd5b5060cb5460da5410156103c0565b348015610a9857600080fd5b5061039e610aa73660046141fb565b612591565b348015610ab857600080fd5b5061039e610ac7366004613c1e565b612836565b348015610ad857600080fd5b5060d054610455565b348015610aed57600080fd5b5060dd546001600160a01b0316610417565b348015610b0b57600080fd5b5061039e610b1a366004613bd5565b61285a565b348015610b2b57600080fd5b50610455610b3a366004613e0a565b6001600160a01b0316600090815260d6602052604090205490565b348015610b6157600080fd5b506103c0610b7036600461423c565b612927565b348015610b8157600080fd5b5061039e610b90366004613e61565b612955565b348015610ba157600080fd5b5061039e610bb036600461426f565b612a32565b348015610bc157600080fd5b5061039e610bd0366004613e0a565b612bb1565b348015610be157600080fd5b5061045560d75481565b348015610bf757600080fd5b5061039e610c06366004613e0a565b612c27565b610c13612c51565b60cd86905560ce85905560cf84905560d783905560d082905560d181905560405183815260008051602061485b8339815191529060200160405180910390a1505050505050565b600063152a902d60e11b6001600160e01b031983161480610c7f5750610c7f82612cb0565b92915050565b606060658054610c94906142e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc0906142e8565b8015610d0d5780601f10610ce257610100808354040283529160200191610d0d565b820191906000526020600020905b815481529060010190602001808311610cf057829003601f168201915b5050505050905090565b6000610d2282612d00565b506000908152606960205260409020546001600160a01b031690565b6000610d498261149d565b9050806001600160a01b0316836001600160a01b031603610dbb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610dd75750610dd78133612927565b610e495760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610db2565b610e538383612d25565b505050565b600060cc5460cb54610e6a9190614338565b905090565b6000610c7f82612d93565b610e82612c51565b60008211610ea25760405162461bcd60e51b8152600401610db29061434b565b60cb54821115610ec45760405162461bcd60e51b8152600401610db290614370565b600082815260ca60205260409020600401610edf82826143e4565b5060405182815260008051602061487b833981519152906020015b60405180910390a15050565b610f0e612c51565b60d781905560d480546002919060ff19166001835b021790555060d4546040517f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5191610f5f9160ff90911690613efe565b60405180910390a160405181815260008051602061485b833981519152906020015b60405180910390a150565b610f97335b82613066565b610fb35760405162461bcd60e51b8152600401610db2906144a3565b610e538383836130c4565b600080610fc9613216565b6001600160a01b038416600090815260d560205260409020549091508111610ff45750600092915050565b6001600160a01b038316600090815260d560205260409020546110179082614338565b9392505050565b6000808061102a6120e9565b6001600160a01b03160361104b576110406120e9565b600091509150611073565b6110536120e9565b60cd546127109061106490866144f0565b61106e919061451d565b915091505b9250929050565b611082612c51565b60d4805482919060ff191660018360028111156110a1576110a1613ee8565b02179055507f40cb75607c032a2aac1c3565feb3b70e354cbd56e8f8fa36773cba5750464c5181604051610f819190613efe565b6110de81613262565b6110fa5760405162461bcd60e51b8152600401610db290614531565b61110333610f91565b61111f5760405162461bcd60e51b8152600401610db290614553565b6004600082815260ca602052604090205460ff16600781111561114457611144613ee8565b146111615760405162461bcd60e51b8152600401610db290614579565b600081815260ca6020908152604091829020805460ff1916600217905590518281527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b9101610f81565b6001600160a01b038116600090815260d9602090815260409182902080548351818402810184019094528084526060939283018282801561120b57602002820191906000526020600020905b8154815260200190600101908083116111f7575b50505050509050919050565b61121f612c51565b4780156112a45760c9546001600160a01b0316156112935760ce546000906127109061124b90846144f0565b611255919061451d565b905060006112638284614338565b90506112766112706120e9565b8361327f565b60c95461128c906001600160a01b03168261327f565b50506112a4565b6112a461129e6120e9565b8261327f565b60dd546001600160a01b0316156113bb5760dd546040516370a0823160e01b81526000916001600160a01b0316906370a08231906112e6903090600401613bee565b602060405180830381865afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132791906145b0565b905080156113b95760dd546001600160a01b031663a9059cbb6113486120e9565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611395573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906145c9565b505b50565b610e53838383604051806020016040528060008152506122a0565b6113e233610f91565b6113fe5760405162461bcd60e51b8152600401610db290614553565b6113bb81613398565b60008082116114285760405162461bcd60e51b8152600401610db29061434b565b60cb5482111561144a5760405162461bcd60e51b8152600401610db290614370565b600082815260ca602052604090205460ff166007811115610c7f57610c7f613ee8565b611475612c51565b60cf82905560d781905560405181815260008051602061485b83398151915290602001610efa565b6000818152606760205260408120546001600160a01b031680610c7f5760405162461bcd60e51b8152600401610db2906145e6565b60408051600180825281830190925260009182919060208083019080368337019050509050338160008151811061150b5761150b614618565b60200260200101906001600160a01b031690816001600160a01b03168152505061153481612d93565b91505090565b61154382613262565b61155f5760405162461bcd60e51b8152600401610db290614531565b61156a335b83613066565b6115865760405162461bcd60e51b8152600401610db290614553565b6004600083815260ca602052604090205460ff1660078111156115ab576115ab613ee8565b146115c85760405162461bcd60e51b8152600401610db290614579565b600082815260ca60205260409020600101548110156115f95760405162461bcd60e51b8152600401610db29061462e565b600082815260ca602052604090206001015460dd546001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b91906145b0565b10156116d25760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606401610db2565b60dd546000906001600160a01b03166323b872dd33600086815260ca60205260409081902060010154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015230602483015260448201526064016020604051808303816000875af115801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f91906145c9565b9050806117b95760405162461bcd60e51b815260206004820152601860248201527721b7bab632103737ba103a3930b739b332b9103a37b5b2b760411b6044820152606401610db2565b600083815260ca6020908152604091829020805460ff1916600517905590518481527f9bd6b4fd288008520fd788a93304e5688a401aea817ea8140ecf1fb8648f3191910160405180910390a1505050565b611813612c51565b82811461185c5760405162461bcd60e51b8152602060048201526017602482015276098d2e6e8e640d8cadccee8d040daeae6e840dac2e8c6d604b1b6044820152606401610db2565b60005b83811015611aa257600060ca600085858581811061187f5761187f614618565b602090810292909201358352508101919091526040016000205460ff1660078111156118ad576118ad613ee8565b146118f15760405162461bcd60e51b8152602060048201526014602482015273139959591cc81d1bc81899481d5b9b5a5b9d195960621b6044820152606401610db2565b84848281811061190357611903614618565b90506020020160208101906119189190613e0a565b60ca600085858581811061192e5761192e614618565b90506020020135815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160ca600085858581811061198257611982614618565b60209081029290920135835250810191909152604001600020805460ff191660018360078111156119b5576119b5613ee8565b021790555060d860008686848181106119d0576119d0614618565b90506020020160208101906119e59190613e0a565b6001600160a01b0316815260208101919091526040016000908120805491611a0c83614653565b919050555060d96000868684818110611a2757611a27614618565b9050602002016020810190611a3c9190613e0a565b6001600160a01b03166001600160a01b03168152602001908152602001600020838383818110611a6e57611a6e614618565b8354600181018555600094855260209485902091909402929092013591909201555080611a9a81614653565b91505061185f565b5050505050565b611ab1612c51565b60dd546001600160a01b031615611b7c5760dd546040516370a0823160e01b81526001600160a01b03909116906370a0823190611af2903090600401613bee565b602060405180830381865afa158015611b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3391906145b0565b15611b7c5760405162461bcd60e51b8152602060048201526019602482015278746f6b656e206d757374206861766520302062616c616e636560381b6044820152606401610db2565b60dd80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216611c085760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610db2565b506001600160a01b031660009081526068602052604090205490565b611c2c612c51565b611c36600061341c565b565b6000611c4382613262565b611c5f5760405162461bcd60e51b8152600401610db290614531565b50600090815260ca602052604090206001015490565b611c7e81613262565b611c9a5760405162461bcd60e51b8152600401610db290614531565b611ca333610f91565b611cbf5760405162461bcd60e51b8152600401610db290614553565b6006600082815260ca602052604090205460ff166007811115611ce457611ce4613ee8565b14611d015760405162461bcd60e51b8152600401610db290614579565b600081815260ca6020908152604091829020805460ff1916600717905590518281527facb9cd98d41dc8854281172ab2a764d949b62b51776edd911f85376ed2eca64b910160405180910390a160405181815260008051602061487b83398151915290602001610f81565b600054610100900460ff1615808015611d8c5750600054600160ff909116105b80611da65750303b158015611da6575060005460ff166001145b611e095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610db2565b6000805460ff191660011790558015611e2c576000805461ff0019166101001790555b60008311611e745760405162461bcd60e51b8152602060048201526015602482015274044726f702073697a65206d757374206265203e203605c1b6044820152606401610db2565b611e7e858561346e565b611e8661349f565b611e8f87612bb1565b60c980546001600160a01b0319166001600160a01b03881617905560cb839055600060cc819055600160dc5560db805460ff191684151517905560da558015611f12576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b611f23612c51565b60008311611f645760405162461bcd60e51b815260206004820152600e60248201526d05374617274496e646578203e20360941b6044820152606401610db2565b60cb54611f7290600161466c565b611f7c838561466c565b1115611fc65760405162461bcd60e51b815260206004820152601960248201527844617461206c61726765207468616e2064726f702073697a6560381b6044820152606401610db2565b8181511461200b5760405162461bcd60e51b8152602060048201526012602482015271088c2e8c240e6d2f4ca40dad2e6dac2e8c6d60731b6044820152606401610db2565b60005b828110156120e3576000612022828661466c565b905082828151811061203657612036614618565b602002602001015160ca6000838152602001908152602001600020600301908161206091906143e4565b50600081815260ca602052604090206002015460ff1615156001146120af57600081815260ca60205260408120600201805460ff1916600117905560da8054916120a983614653565b91905055505b60405181815260008051602061487b8339815191529060200160405180910390a150806120db81614653565b91505061200e565b50505050565b6000610e6a6097546001600160a01b031690565b606060668054610c94906142e8565b6000600160d45460ff16600281111561212757612127613ee8565b03612133575060cf5490565b600260d45460ff16600281111561214c5761214c613ee8565b03612158575060d75490565b50600090565b6113b93383836134ce565b612171612c51565b61217a82613262565b6121965760405162461bcd60e51b8152600401610db290614531565b6005600083815260ca602052604090205460ff1660078111156121bb576121bb613ee8565b146121d85760405162461bcd60e51b8152600401610db290614579565b600082815260ca602052604090206004016121f382826143e4565b50600082815260ca6020908152604091829020805460ff1916600617905590518381527fadb6d4f651f6fbf8b37026019ee48fdb86abf9ec94eb4a5f0acf72ad8c7872a39101610efa565b60408051600180825281830190925260009182919060208083019080368337019050509050828160008151811061227757612277614618565b60200260200101906001600160a01b031690816001600160a01b03168152505061101781612d93565b6122a933611564565b6122c55760405162461bcd60e51b8152600401610db2906144a3565b6120e384848484613598565b600080826001600160401b038111156122ec576122ec613c48565b604051908082528060200260200182016040528015612315578160200160208202803683370190505b50905060005b83811015612360578482828151811061233657612336614618565b6001600160a01b03909216602092830291909101909101528061235881614653565b91505061231b565b5061236a81612d93565b949350505050565b61237b81613262565b6123975760405162461bcd60e51b8152600401610db290614531565b6123a033610f91565b6123bc5760405162461bcd60e51b8152600401610db290614553565b6003600082815260ca602052604090205460ff1660078111156123e1576123e1613ee8565b146123fe5760405162461bcd60e51b8152600401610db290614579565b600081815260ca60205260409020805460ff191660021790557f6c7c9f699aacfa5bacd2758023ab209b2d1e1c237bfa752bdc94cb87878cf1b781335b604080519283526001600160a01b03909116602083015201610f81565b60008061246483610fbe565b15159392505050565b612475612c51565b60cf81905560d480546001919060ff19168280610f23565b606061249882613262565b6124b45760405162461bcd60e51b8152600401610db290614531565b6007600083815260ca602052604090205460ff1660078111156124d9576124d9613ee8565b0361257557600082815260ca6020526040902060040180546124fa906142e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612526906142e8565b801561120b5780601f106125485761010080835404028352916020019161120b565b820191906000526020600020905b8154815290600101906020018083116125565750939695505050505050565b600082815260ca6020526040902060030180546124fa906142e8565b612599612c51565b60005b81811015610e5357600160ca60008585858181106125bc576125bc614618565b602090810292909201358352508101919091526040016000205460ff1660078111156125ea576125ea613ee8565b146126265760405162461bcd60e51b815260206004820152600c60248201526b139bdd081c995cd95c9d995960a21b6044820152606401610db2565b600060ca600085858581811061263e5761263e614618565b90506020020135815260200190815260200160002060000160019054906101000a90046001600160a01b0316905060005b84848481811061268157612681614618565b9050602002013560d96000846001600160a01b03166001600160a01b0316815260200190815260200160002082815481106126be576126be614618565b9060005260206000200154146126e057806126d881614653565b91505061266f565b6001600160a01b038216600090815260d96020526040812080548390811061270a5761270a614618565b906000526020600020018190555060d8600060ca600088888881811061273257612732614618565b6020908102929092013583525081810192909252604090810160009081205461010090046001600160a01b0316845291830193909352910181208054916127788361467f565b9190505550600060ca600087878781811061279557612795614618565b90506020020135815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060ca60008787878181106127e9576127e9614618565b60209081029290920135835250810191909152604001600020805460ff1916600183600781111561281c5761281c613ee8565b02179055505050808061282e90614653565b91505061259c565b61283e612c51565b6001600160a01b03909116600090815260d66020526040902055565b61286381613262565b61287f5760405162461bcd60e51b8152600401610db290614531565b61288833610f91565b6128a45760405162461bcd60e51b8152600401610db290614553565b6002600082815260ca602052604090205460ff1660078111156128c9576128c9613ee8565b146128e65760405162461bcd60e51b8152600401610db290614579565b600081815260ca60205260409020805460ff191660031790557fc290e40808ef06721539ad0d926f8d5f53d2dd6d5e28334308a012676f867416813361243b565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61295d612c51565b61296682613262565b6129825760405162461bcd60e51b8152600401610db290614531565b6003600083815260ca602052604090205460ff1660078111156129a7576129a7613ee8565b146129e25760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b6044820152606401610db2565b600082815260ca6020908152604091829020805460ff1916600417815560010183905590518381527f316b408b8cf323e8f20ef7a8c267eedc89bef19ca5db7fc30be938e55bf068f99101610efa565b612a3a612c51565b60005b85811015612ba957828282818110612a5757612a57614618565b9050602002016020810190612a6c9190614696565b151560d26000878785818110612a8457612a84614618565b9050602002016020810190612a999190613e0a565b6001600160a01b0316815260208101919091526040016000205460ff16151514612b1d57828282818110612acf57612acf614618565b9050602002016020810190612ae49190614696565b1515600103612b075760d38054906000612afd83614653565b9190505550612b1d565b60d38054906000612b178361467f565b91905055505b828282818110612b2f57612b2f614618565b9050602002016020810190612b449190614696565b60d26000878785818110612b5a57612b5a614618565b9050602002016020810190612b6f9190613e0a565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612ba181614653565b915050612a3d565b505050505050565b612bb9612c51565b6001600160a01b038116612c1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610db2565b6113bb8161341c565b612c2f612c51565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b33612c5a6120e9565b6001600160a01b031614611c365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610db2565b60006001600160e01b031982166380ac58cd60e01b1480612ce157506001600160e01b03198216635b5e139f60e01b145b80610c7f57506301ffc9a760e01b6001600160e01b0319831614610c7f565b612d0981613262565b6113bb5760405162461bcd60e51b8152600401610db2906145e6565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612d5a8261149d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060cb5460da541015612de35760405162461bcd60e51b8152602060048201526017602482015276139bdd08185b1b081b595d1859185d18481b1bd8591959604a1b6044820152606401610db2565b612deb6135cb565b612e375760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610db2565b612e3f610e58565b82511115612e815760405162461bcd60e51b815260206004820152600f60248201526e457863656564656420737570706c7960881b6044820152606401610db2565b612e89613216565b825133600090815260d56020526040902054612ea5919061466c565b1115612ee95760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b5a5b9d081b1a5b5a5d606a1b6044820152606401610db2565b612ef3825161362d565b612f0f5760405162461bcd60e51b8152600401610db29061462e565b6000805b835181101561305f5733600090815260d8602052604090205415612f4057612f39613697565b9150612f4b565b612f48613782565b91505b612f6e848281518110612f6057612f60614618565b602002602001015183613899565b33600090815260d660205260409020548015612fa057612f8f600182614338565b33600090815260d660205260409020555b600083815260ca60209081526040808320805460ff1916600217905533835260d59091528120805491612fd283614653565b909155505060cc8054906000612fe783614653565b91905055507f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa61301561210c565b604080519182523360208301520160405180910390a160405183815260008051602061487b8339815191529060200160405180910390a1508061305781614653565b915050612f13565b5092915050565b6000806130728361149d565b9050806001600160a01b0316846001600160a01b0316148061309957506130998185612927565b8061236a5750836001600160a01b03166130b284610d17565b6001600160a01b031614949350505050565b826001600160a01b03166130d78261149d565b6001600160a01b0316146130fd5760405162461bcd60e51b8152600401610db2906146b3565b6001600160a01b03821661315f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610db2565b826001600160a01b03166131728261149d565b6001600160a01b0316146131985760405162461bcd60e51b8152600401610db2906146b3565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652606885528386208054600019019055908716808652838620805460010190558686526067909452828520805490921684179091559051849360008051602061483b83398151915291a4505050565b6000600160d45460ff16600281111561323157613231613ee8565b0361323d575060d05490565b600260d45460ff16600281111561325657613256613ee8565b03612158575060d15490565b6000908152606760205260409020546001600160a01b0316151590565b804710156132cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610db2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461331c576040519150601f19603f3d011682016040523d82523d6000602084013e613321565b606091505b5050905080610e535760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610db2565b60006133a38261149d565b90506133ae8261149d565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260688452828520805460001901905587855260679093528184208054909116905551929350849260008051602061483b833981519152908390a46113b9565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166134955760405162461bcd60e51b8152600401610db2906146f8565b6113b98282613995565b600054610100900460ff166134c65760405162461bcd60e51b8152600401610db2906146f8565b611c366139d5565b816001600160a01b0316836001600160a01b03160361352b5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610db2565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6135a38484846130c4565b6135af84848484613a05565b6120e35760405162461bcd60e51b8152600401610db290614743565b6000600260d45460ff1660028111156135e6576135e6613ee8565b036135f15750600190565b600160d45460ff16600281111561360a5761360a613ee8565b036121585733600090815260d2602052604090205460ff16156121585750600190565b33600090815260d6602052604081205480831161365c5734156136535750600092915050565b50600192915050565b60006136688285614338565b90508061367361210c565b61367d91906144f0565b340361368d575060019392505050565b5060009392505050565b6000805b33600090815260d9602052604090208054829081106136bc576136bc614618565b90600052602060002001546000036136e057806136d881614653565b91505061369b565b33600090815260d96020526040812080548390811061370157613701614618565b600091825260208083209091015433835260d9909152604082208054919350908490811061373157613731614618565b600091825260208083209091019290925533815260d89091526040812080549161375a8361467f565b9091555050600081815260ca602052604090208054610100600160a81b031916905592915050565b60db5460009060ff161561385157600060cb544233445a6040516020016137d4949392919093845260609290921b6bffffffffffffffffffffffff191660208401526034830152605482015260740190565b6040516020818303038152906040528051906020012060001c6137f79190614795565b9050600061380682600161466c565b90505b600081815260ca602052604081205460ff16600781111561382c5761382c613ee8565b14610c7f578061383b81614653565b91505060cb5481111561384c575060015b613809565b60dc545b600081815260ca602052604081205460ff16600781111561387857613878613ee8565b1461388f578061388781614653565b915050613855565b60dc819055919050565b6001600160a01b0382166138ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610db2565b6138f881613262565b156139155760405162461bcd60e51b8152600401610db2906147a9565b61391e81613262565b1561393b5760405162461bcd60e51b8152600401610db2906147a9565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b03191684179055518392919060008051602061483b833981519152908290a46113b9565b600054610100900460ff166139bc5760405162461bcd60e51b8152600401610db2906146f8565b60656139c883826143e4565b506066610e5382826143e4565b600054610100900460ff166139fc5760405162461bcd60e51b8152600401610db2906146f8565b611c363361341c565b60006001600160a01b0384163b15613afb57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a499033908990889088906004016147e0565b6020604051808303816000875af1925050508015613a84575060408051601f3d908101601f19168201909252613a819181019061481d565b60015b613ae1573d808015613ab2576040519150601f19603f3d011682016040523d82523d6000602084013e613ab7565b606091505b508051600003613ad95760405162461bcd60e51b8152600401610db290614743565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061236a565b506001949350505050565b60008060008060008060c08789031215613b1f57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6001600160e01b0319811681146113bb57600080fd5b600060208284031215613b7157600080fd5b813561101781613b49565b6000815180845260005b81811015613ba257602081850181015186830182015201613b86565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110176020830184613b7c565b600060208284031215613be757600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b0381168114613c1957600080fd5b919050565b60008060408385031215613c3157600080fd5b613c3a83613c02565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613c8657613c86613c48565b604052919050565b60006001600160401b03821115613ca757613ca7613c48565b5060051b60200190565b60006020808385031215613cc457600080fd5b82356001600160401b03811115613cda57600080fd5b8301601f81018513613ceb57600080fd5b8035613cfe613cf982613c8e565b613c5e565b81815260059190911b82018301908381019087831115613d1d57600080fd5b928401925b82841015613d4257613d3384613c02565b82529284019290840190613d22565b979650505050505050565b60006001600160401b03831115613d6657613d66613c48565b613d79601f8401601f1916602001613c5e565b9050828152838383011115613d8d57600080fd5b828260208301376000602084830101529392505050565b600082601f830112613db557600080fd5b61101783833560208501613d4d565b60008060408385031215613dd757600080fd5b8235915060208301356001600160401b03811115613df457600080fd5b613e0085828601613da4565b9150509250929050565b600060208284031215613e1c57600080fd5b61101782613c02565b600080600060608486031215613e3a57600080fd5b613e4384613c02565b9250613e5160208501613c02565b9150604084013590509250925092565b60008060408385031215613e7457600080fd5b50508035926020909101359150565b600060208284031215613e9557600080fd5b81356003811061101757600080fd5b6020808252825182820181905260009190848201906040850190845b81811015613edc57835183529284019291840191600101613ec0565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310613f2057634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f840112613f3857600080fd5b5081356001600160401b03811115613f4f57600080fd5b6020830191508360208260051b850101111561107357600080fd5b60008060008060408587031215613f8057600080fd5b84356001600160401b0380821115613f9757600080fd5b613fa388838901613f26565b90965094506020870135915080821115613fbc57600080fd5b50613fc987828801613f26565b95989497509550505050565b80151581146113bb57600080fd5b60008060008060008060c08789031215613ffc57600080fd5b61400587613c02565b955061401360208801613c02565b945060408701356001600160401b038082111561402f57600080fd5b61403b8a838b01613da4565b9550606089013591508082111561405157600080fd5b5061405e89828a01613da4565b9350506080870135915060a087013561407681613fd5565b809150509295509295509295565b60008060006060848603121561409957600080fd5b83359250602080850135925060408501356001600160401b03808211156140bf57600080fd5b818701915087601f8301126140d357600080fd5b81356140e1613cf982613c8e565b81815260059190911b8301840190848101908a83111561410057600080fd5b8585015b838110156141385780358581111561411c5760008081fd5b61412a8d89838a0101613da4565b845250918601918601614104565b508096505050505050509250925092565b6000806040838503121561415c57600080fd5b61416583613c02565b9150602083013561417581613fd5565b809150509250929050565b6000806000806080858703121561419657600080fd5b61419f85613c02565b93506141ad60208601613c02565b92506040850135915060608501356001600160401b038111156141cf57600080fd5b8501601f810187136141e057600080fd5b6141ef87823560208401613d4d565b91505092959194509250565b6000806020838503121561420e57600080fd5b82356001600160401b0381111561422457600080fd5b61423085828601613f26565b90969095509350505050565b6000806040838503121561424f57600080fd5b61425883613c02565b915061426660208401613c02565b90509250929050565b60008060008060006060868803121561428757600080fd5b8535945060208601356001600160401b03808211156142a557600080fd5b6142b189838a01613f26565b909650945060408801359150808211156142ca57600080fd5b506142d788828901613f26565b969995985093965092949392505050565b600181811c908216806142fc57607f821691505b60208210810361431c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c7f57610c7f614322565b6020808252600b908201526a0746f6b656e4944203e20360ac1b604082015260600190565b602080825260149082015273746f6b656e4944203c3d2064726f702073697a6560601b604082015260600190565b601f821115610e5357600081815260208120601f850160051c810160208610156143c55750805b601f850160051c820191505b81811015612ba9578281556001016143d1565b81516001600160401b038111156143fd576143fd613c48565b6144118161440b84546142e8565b8461439e565b602080601f831160018114614446576000841561442e5750858301515b600019600386901b1c1916600185901b178555612ba9565b600085815260208120601f198616915b8281101561447557888601518255948401946001909101908401614456565b50858210156144935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b8082028115828204841417610c7f57610c7f614322565b634e487b7160e01b600052601260045260246000fd5b60008261452c5761452c614507565b500490565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252601c908201527f596f752063757272656e746c792063616e206e6f742072656465656d00000000604082015260600190565b6000602082840312156145c257600080fd5b5051919050565b6000602082840312156145db57600080fd5b815161101781613fd5565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252600b908201526a57726f6e6720707269636560a81b604082015260600190565b60006001820161466557614665614322565b5060010190565b80820180821115610c7f57610c7f614322565b60008161468e5761468e614322565b506000190190565b6000602082840312156146a857600080fd5b813561101781613fd5565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826147a4576147a4614507565b500690565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061481390830184613b7c565b9695505050505050565b60006020828403121561482f57600080fd5b815161101781613b4956feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7a26469706673582212203b6b274667b8c254905336fe7c8829eca4a231769de3b0db3df924390f8ce76664736f6c63430008130033",
  "devdoc": {
    "author": "Zien Repository: https://github.com/joinzien/expanded-nft",
    "details": "This allows creators to mint a unique serial drop of an expanded NFT within a custom contract",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.    "
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "allowListed(address)": {
        "details": "returns if the address is on the allow list"
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn User burn function for token id "
        }
      },
      "canMint(address)": {
        "details": "returns  if the address can mint"
      },
      "getAllowListCount()": {
        "details": "returns the number on the allow list"
      },
      "getAllowListMintLimit()": {
        "details": "returns the allow list mint limit"
      },
      "getAllowListPrice()": {
        "details": "returns the allow list sale price"
      },
      "getAllowedMinter()": {
        "details": "Sets the types of users who is allowed to mint."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getGeneralMintLimit()": {
        "details": "returns the general mint limit"
      },
      "getMintLimit(address)": {
        "details": "returns mint limit for the address"
      },
      "getReservationsCount(address)": {
        "details": "returns the number of reservations for this wallet",
        "params": {
          "wallet": "The wallet being checked                                                                          "
        }
      },
      "getReservationsList(address)": {
        "details": "returns the IDs reserved by the wallet",
        "params": {
          "wallet": "The wallet being checked                                                                          "
        }
      },
      "getRoyaltyBPS()": {
        "details": "returns the royalty BPS"
      },
      "getSplitBPS()": {
        "details": "returns the split BPS"
      },
      "initialize(address,address,string,string,uint256,bool)": {
        "details": "Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later",
        "params": {
          "_dropSize": "Number of editions that can be minted in total. ",
          "_name": "Name of drop, used in the title as \"$NAME NUMBER/TOTAL\"",
          "_owner": "wallet addres for the user that owns and can mint the drop, gets royalty and sales payouts and can update the base url if needed.",
          "_symbol": "Symbol of the new token contract",
          "artistWallet": "wallet address for thr User that created the drop",
          "randomMint": "Mint in an random order   "
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isReserved(uint256)": {
        "details": "Unreserve an edition for a wallet",
        "params": {
          "tokenID": "the tokenId to check                                                                           "
        }
      },
      "loadMetadataChunk(uint256,uint256,string[])": {
        "details": "Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later",
        "params": {
          "_mintedMetadataUrl": "The URL to the metadata for this Edtion",
          "count": "How many rows of data to load ",
          "startIndex": "The first ID index to write the data"
        }
      },
      "loadRedeemedMetadata(uint256,string)": {
        "details": "Function to create a new drop. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the drop. This can be re-assigned or updated later",
        "params": {
          "_redeemedMetadataUrl": "The URL to the metadata for this Edtion",
          "tokenID": "The index to write the data"
        }
      },
      "mintEdition(address)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "to": "address to send the newly minted edition to"
        }
      },
      "mintEditions(address[])": {
        "details": "This mints multiple editions to the given list of addresses.",
        "params": {
          "recipients": "list of addresses to send the newly minted editions to"
        }
      },
      "mintMultipleEditions(address,uint256)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "count": "how many editions to mint      ",
          "to": "address to send the newly minted edition to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "numberOfFreeMints(address)": {
        "details": "Check the number of fre mints a wallet has",
        "params": {
          "wallet": "The address of the wallet                                                                       "
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "price()": {
        "details": "returns the current ETH sales price based on who can currently mint."
      },
      "purchase()": {
        "details": "This allows the user to purchase an edition at the given price in the contract."
      },
      "redeemedState(uint256)": {
        "details": "returns the current state of the provided token"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reserve(address[],uint256[])": {
        "details": "Reserve an edition for a wallet",
        "params": {
          "tokenIDs": "A list of tokenId to reserve                                                                           ",
          "wallets": "A list of wallets"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAllowListMinters(uint256,address[],bool[])": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setAllowListSalePrice(uint256)": {
        "details": "This sets the allow list ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "The amount of ETH is needed to start the sale."
        }
      },
      "setAllowedMinter(uint8)": {
        "details": "Sets the types of users who is allowed to mint.",
        "params": {
          "minters": "WhoCanMint enum of minter types"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setFreeMints(address,uint256)": {
        "details": "Set the number of freemints for a wallet",
        "params": {
          "freeMintLimit": "How many free mints should the wallet get                                                                           ",
          "wallet": "The address of the wallet"
        }
      },
      "setPricing(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Set various pricing related values",
        "params": {
          "_allowListMintLimit": "Mint limit for allow listed wallets",
          "_allowListSalePrice": "Sale price for allow listed wallets",
          "_generalMintLimit": "Mint limit for the general public                                                                                 ",
          "_generalSalePrice": "SalePrice for the general public     ",
          "_royaltyBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.",
          "_splitBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty. "
        }
      },
      "setSalePrice(uint256)": {
        "details": "This sets a simple ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "The amount of ETH is needed to start the sale."
        }
      },
      "setSalePrices(uint256,uint256)": {
        "details": "This sets the members ETH sales price Setting a sales price allows users to mint the drop until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "allowListSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.",
          "generalSalePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.                                              "
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the drop"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unreserve(uint256[])": {
        "details": "Unreserve an edition for a wallet",
        "params": {
          "tokenIDs": "A list of tokenId to unreserve                                                                           "
        }
      },
      "whoReserved(uint256)": {
        "details": "who reserved the provided ID",
        "params": {
          "tokenID": "the tokenId to check                                                                           "
        }
      },
      "withdraw()": {
        "details": "This withdraws ETH from the contract to the contract owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getArtistWallet()": {
        "notice": "return the artists wallet address"
      },
      "getPaymentToken()": {
        "notice": "return the payment tokens address"
      },
      "numberCanMint()": {
        "notice": "Returns the number of editions allowed to mint"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      },
      "setArtistWallet(address)": {
        "notice": "set the artists wallet address"
      },
      "setPaymentToken(address)": {
        "notice": "set a new payment token address"
      }
    },
    "notice": "This is a smart contract for handling dynamic contract minting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 237,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 240,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1915,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2208,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 506,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 508,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 512,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 516,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 520,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 526,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1428,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3370,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_artistWallet",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 3375,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_perTokenMetadata",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(PerToken)3340_storage)"
      },
      {
        "astId": 3377,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "dropSize",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 3379,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_claimCount",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 3382,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_pricing",
        "offset": 0,
        "slot": "205",
        "type": "t_struct(Pricing)3368_storage"
      },
      {
        "astId": 3384,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "salePrice",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 3388,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_resevationCount",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3393,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_resevations",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3395,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_loadedMetadata",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 3397,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_randomMint",
        "offset": 0,
        "slot": "219",
        "type": "t_bool"
      },
      {
        "astId": 3399,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 3402,
        "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
        "label": "_paymentTokenERC20",
        "offset": 0,
        "slot": "221",
        "type": "t_contract(IERC20Upgradeable)477"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)477": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(ExpandedNFTStates)3267": {
        "encoding": "inplace",
        "label": "enum ExpandedNFT.ExpandedNFTStates",
        "numberOfBytes": "1"
      },
      "t_enum(WhoCanMint)3258": {
        "encoding": "inplace",
        "label": "enum ExpandedNFT.WhoCanMint",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(PerToken)3340_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ExpandedNFT.PerToken)",
        "numberOfBytes": "32",
        "value": "t_struct(PerToken)3340_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PerToken)3340_storage": {
        "encoding": "inplace",
        "label": "struct ExpandedNFT.PerToken",
        "members": [
          {
            "astId": 3329,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ExpandedNFTStates)3267"
          },
          {
            "astId": 3331,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "reservedBy",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3333,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "editionFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3335,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "metadataLoaded",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3337,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "mintedMetadataUrl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3339,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "redeemedMetadataUrl",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Pricing)3368_storage": {
        "encoding": "inplace",
        "label": "struct ExpandedNFT.Pricing",
        "members": [
          {
            "astId": 3342,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "royaltyBPS",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3344,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "splitBPS",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3346,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "allowListSalePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3348,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "allowListMintLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3350,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "generalMintLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3354,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "allowListMinters",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3356,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "allowListCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3359,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "whoCanMint",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(WhoCanMint)3258"
          },
          {
            "astId": 3363,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "mintCounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3367,
            "contract": "contracts/ExpandedNFT.sol:ExpandedNFT",
            "label": "freeMints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}